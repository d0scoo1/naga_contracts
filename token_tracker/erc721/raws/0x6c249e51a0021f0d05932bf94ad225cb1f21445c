{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n  guestlisted by @etherlect\r\n\r\n  ____________________________________________________________\r\n /                                                            \\\r\n/______________________________________________________________\\\r\n|   [+]     [+] [+] [+] [+]   CLUB   [+] [+] [+] [+]     [+]   |\r\n================================================================\r\n |  [+]     [+] [+] [+] [+] [+]  [+] [+] [+] [+] [+]     [+]  |\r\n |----------------------------------------------------------- |\r\n |  +-+  |  +-+ +-+ +-+ +-+ +-+  +-+ +-+ +-+ +-+ +-+  |  +-+  |\r\n |  |*|  |  |*| |*| |*| |*| |*|  |*| |*| |*| |*| |*|  |  | |  |\r\n |  +-+  |  +-+ +-+ +-+ +-+ +-+  +-+ +-+ +-+ +-+ +-+  |  +-+  |\r\n |  [ ]  |  [+] [+] [+] [+] [+]  [+] [+] [+] [+] [+]  |  [ ]  |\r\n |  +-+  |                    +--+                    |  +-+  |\r\n |  | |  |                    |  |                    |  | |  |\r\n ==============================================================\r\n _ --  --_  --  _ -  __  -    |  |    __ --   - _ --    --- _ _\r\n _    --- __  -   _--   __ -  |  |  _  - __ -- ___ -- _ - __ - \r\n    __ --      - -   _ -  -   |  |    _ - _ -- _ --- _ -- _ ---\r\n\r\n*/\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.1\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/GuestlistedLibrary.sol\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\nlibrary GuestlistedLibrary {\r\n    struct Venue { \r\n        string name;\r\n        string location;\r\n        uint[2][] indexes;\r\n        string[] colors;\r\n        uint[] djIndexes;\r\n    }\r\n\r\n    struct DJ { \r\n        string firstName;\r\n        string lastName;\r\n        uint fontSize;\r\n    }\r\n\r\n    struct TokenData {\r\n        uint tokenId;\r\n        uint deterministicNumber;\r\n        uint randomNumber;\r\n        uint shapeRandomNumber;\r\n        uint shapeIndex;\r\n        string json;\r\n        string date;\r\n        string bg;\r\n        string color;\r\n        string shape;\r\n        string attributes;\r\n        string customMetadata;\r\n        string djFullName;\r\n        Venue venue;\r\n        DJ dj;\r\n    }\r\n\r\n    function toString(uint value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Guestlisted.sol\r\n\r\n\r\npragma solidity ^0.8.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract Guestlisted is ERC721, ReentrancyGuard, Ownable {\r\n    \r\n    using ECDSA for bytes32;\r\n\r\n    // -------------------------------------------------------------------------------------------------------\r\n    // \r\n    //  Mint config\r\n    //  \r\n    //  @startIndex                 =>      Start index from which to mint tokens\r\n    //  @endIndex                   =>      End index until which to mint tokens\r\n    //  @remaining                  =>      Remaining tokens to mint\r\n    //  @mintPrice                  =>      Current mint price (in WEI)\r\n    //  @maxTokensPerTransaction    =>      Max allowed tokens to mint per transaction\r\n    //  @maxMintsPerWallet          =>      Max allowed tokens to mint per wallet\r\n    //  @version                    =>      Used as a key along with wallet address in mintedPerWallet mapping\r\n    //  @isActive                   =>      State of the mint\r\n    //  @isRandom                   =>      Mint strategy (random / predictable)\r\n    //  @isOnlyForHolders           =>      Allows only token holders to mint\r\n    //  @isOnWhitelist              =>      Request a signature of wallet address by whitelistSigner\r\n    //  @whitelistSigner            =>      Whitelist signer address which should be recovered while minting\r\n    //  \r\n    // -------------------------------------------------------------------------------------------------------\r\n    struct MintConfig { \r\n        uint startIndex;\r\n        uint endIndex;\r\n        uint remaining;\r\n        uint mintPrice;\r\n        uint maxTokensPerTransaction;\r\n        uint maxMintsPerWallet;\r\n        uint version;\r\n        bool isActive;\r\n        bool isRandom;\r\n        bool isOnlyForHolders;\r\n        bool isOnWhitelist;\r\n        address whitelistSigner;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // \r\n    //  If exists, custom metadata is added in the JSON metadata of tokens:\r\n    //  \r\n    //  { \r\n    //      ...other properties,\r\n    //      name: value,\r\n    //      name: value,\r\n    //      ...\r\n    //  }\r\n    //  \r\n    // ------------------------------------------------------------------------\r\n    struct CustomMetadata { \r\n        string name;\r\n        string value;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // \r\n    //  If exists, custom attributes are added in the JSON metadata of tokens:\r\n    //  \r\n    //  {\r\n    //      \"attributes\": {\r\n    //          ...other attributes,\r\n    //         {\r\n    //             \"display_type\": displayType, \r\n    //             \"trait_type\": traitType, \r\n    //             \"value\": value\r\n    //         }\r\n    //      } \r\n    //  }\r\n    //  \r\n    // ------------------------------------------------------------------------\r\n    struct CustomAttribute { \r\n        string displayType;\r\n        string traitType;\r\n        string value;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // \r\n    //  Mapping storing the number of mints per wallet\r\n    //  string(abi.encodePacked(walletAddress, mintConfig.version)) => nbMinted\r\n    // \r\n    // ------------------------------------------------------------------------\r\n    mapping(string => uint) private mintedPerWallet;\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Mapping storing already minted tokens\r\n    // \r\n    // --------------------------------------------------------\r\n    mapping(uint => uint) private mintCache;\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Mappings for eventual future custom metadata & \r\n    //  attributes of tokens (added in the JSON if exists)\r\n    //  tokenId => CustomAttribute[] / CustomMetadata[]\r\n    // \r\n    // --------------------------------------------------------\r\n    mapping(uint => CustomAttribute[]) public customAttributes;\r\n    mapping(uint => CustomMetadata[]) public customMetadata;\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Mapping returns if the color of the\r\n    //  text should be white given a bg color\r\n    //  bgColor (hex) => 0 (true) / 1 (false)\r\n    // \r\n    // --------------------------------------------------------\r\n    mapping(string => uint) public isTextColorWhite;\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Instantiation of global variables\r\n    // \r\n    // --------------------------------------------------------\r\n    uint public totalSupply;\r\n    uint public minted;\r\n    uint public burned;\r\n    bool public isBurnActive;\r\n    GuestlistedArtProxy public artProxyContract;\r\n    MintConfig public mintConfig;\r\n    GuestlistedLibrary.Venue[] private venues;\r\n    GuestlistedLibrary.DJ[] private djs;\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns the metadata of a token (base64 encoded JSON)\r\n    // \r\n    // --------------------------------------------------------\r\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\r\n\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token.\");\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Get tokenData\r\n        // \r\n        // --------------------------------------------------------\r\n        GuestlistedLibrary.TokenData memory tokenData = getTokenData(_tokenId);\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Build attributes\r\n        // \r\n        // --------------------------------------------------------\r\n        tokenData.attributes = string(\r\n            abi.encodePacked(\r\n                '{\"trait_type\":\"venue\",\"value\":\"',\r\n                tokenData.venue.name,\r\n                '\"}, {\"trait_type\":\"dj\",\"value\":\"',\r\n                tokenData.djFullName,\r\n                '\"}, {\"trait_type\":\"date\",\"value\":\"',\r\n                tokenData.date,\r\n                '\"}, {\"trait_type\":\"shape\",\"value\":\"',\r\n                tokenData.shape,\r\n                '\"}, {\"trait_type\":\"background\",\"value\":\"',\r\n                tokenData.bg,\r\n                '\"}, {\"trait_type\":\"color\",\"value\":\"',\r\n                tokenData.color,\r\n                '\"}'\r\n            )\r\n        );\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Build custom attributes of the token if there is any\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0;i < customAttributes[_tokenId].length; i++) {\r\n            tokenData.attributes = string(\r\n                abi.encodePacked(\r\n                    tokenData.attributes,\r\n                    ',{\"display_type\":\"',\r\n                    customAttributes[_tokenId][i].displayType,\r\n                    '\",\"trait_type\":\"',\r\n                    customAttributes[_tokenId][i].traitType,\r\n                    '\",\"value\":\"',\r\n                    customAttributes[_tokenId][i].value,\r\n                    '\"}'\r\n                )\r\n            );\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Build custom metadata of the token if there is any\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0;i < customMetadata[_tokenId].length; i++) {\r\n            tokenData.customMetadata = string(\r\n                abi.encodePacked(\r\n                    tokenData.customMetadata,\r\n                    ',\"',\r\n                    customMetadata[_tokenId][i].name,\r\n                    '\":\"',\r\n                    customMetadata[_tokenId][i].value,\r\n                    '\"'\r\n                )\r\n            );\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Build final token metadata JSON\r\n        //  (get the image from proxy art contract)\r\n        // \r\n        // --------------------------------------------------------\r\n        tokenData.json = Base64.encode(\r\n            bytes(\r\n                abi.encodePacked(\r\n                    '{\"name\":\"guestlisted #',\r\n                    GuestlistedLibrary.toString(_tokenId),\r\n                    ' - ',\r\n                    tokenData.djFullName,\r\n                    ' at ',\r\n                    tokenData.venue.name,\r\n                    '\", \"id\": \"',\r\n                    GuestlistedLibrary.toString(_tokenId),\r\n                    '\", \"description\":\"You are guestlisted.\", \"image\":\"',\r\n                    artProxyContract.draw(tokenData),\r\n                    '\", \"attributes\":[',\r\n                    tokenData.attributes,\r\n                    ']',\r\n                    tokenData.customMetadata,\r\n                    '}'\r\n                )\r\n            )\r\n        );\r\n\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", tokenData.json));\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns the data of a token (struct TokenData)\r\n    // \r\n    // --------------------------------------------------------\r\n    function getTokenData(uint256 _tokenId) private view returns (GuestlistedLibrary.TokenData memory) {\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Building tokenData used in the artProxyContract\r\n        // \r\n        // --------------------------------------------------------\r\n        GuestlistedLibrary.TokenData memory tokenData;\r\n        tokenData.tokenId = _tokenId;\r\n        tokenData.deterministicNumber = deterministic(GuestlistedLibrary.toString(_tokenId));\r\n        tokenData.randomNumber = random(GuestlistedLibrary.toString(_tokenId));\r\n        tokenData.shapeRandomNumber = tokenData.deterministicNumber % 100;\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Iterate indexes of each venue and pick the venue\r\n        //  corresponding to the _tokenId\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0; i < venues.length; i++) {\r\n            for (uint j = 0; j < venues[i].indexes.length; j++) {\r\n                if (venues[i].indexes[j][0] <= _tokenId && \r\n                    venues[i].indexes[j][1] >= _tokenId) {\r\n                    tokenData.venue = venues[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Pick the date, bg, text color and dj for a given \r\n        //  tokenId and the selected venue\r\n        // \r\n        // --------------------------------------------------------\r\n        tokenData.date = getDate(_tokenId);\r\n        tokenData.bg = tokenData.venue.colors[tokenData.deterministicNumber % tokenData.venue.colors.length];\r\n        tokenData.color = isTextColorWhite[tokenData.bg] == 1 ? 'ffffff' : '393D3F';\r\n        tokenData.dj = djs[tokenData.venue.djIndexes[tokenData.deterministicNumber % tokenData.venue.djIndexes.length]];\r\n        \r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Pick a shape\r\n        // \r\n        // --------------------------------------------------------\r\n        \r\n        // circle = 25% of chances\r\n        tokenData.shapeIndex = 0;\r\n        tokenData.shape = 'circle';\r\n\r\n        if (tokenData.shapeRandomNumber > 25 && tokenData.shapeRandomNumber <= 35) {\r\n            // line => 10% of chances\r\n            tokenData.shapeIndex = 4;\r\n            tokenData.shape = 'line';\r\n        } else if (tokenData.shapeRandomNumber > 35 && tokenData.shapeRandomNumber <= 55) {\r\n            // prism => 20% of chances\r\n            tokenData.shapeIndex = 1;\r\n            tokenData.shape = 'prism';\r\n        } else if (tokenData.shapeRandomNumber > 55 && tokenData.shapeRandomNumber <= 80) {\r\n            // cube => 25% of chances\r\n            tokenData.shapeIndex = 3;\r\n            tokenData.shape = 'cube';\r\n        } else if (tokenData.shapeRandomNumber > 80 && tokenData.shapeRandomNumber <= 100) {\r\n            // square => 20% of chances\r\n            tokenData.shapeIndex = 2;\r\n            tokenData.shape = 'square';\r\n        }\r\n\r\n        tokenData.djFullName = string(\r\n            abi.encodePacked(\r\n                tokenData.dj.firstName, \r\n                bytes(tokenData.dj.lastName).length == 0 ? '': string(abi.encodePacked(' ', tokenData.dj.lastName))\r\n            )\r\n        );\r\n\r\n        return tokenData;\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns the image of a token (base64 encoded SVG)\r\n    // \r\n    // --------------------------------------------------------\r\n    function tokenImage(uint256 _tokenId) public view returns (string memory) {\r\n        require(_exists(_tokenId), \"tokenImage query for nonexistent token.\");\r\n        return artProxyContract.draw(getTokenData(_tokenId));\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns a random index of token to mint depending on\r\n    //  sender addr and current block timestamp & difficulty\r\n    // \r\n    // --------------------------------------------------------\r\n    function getRandomTokenIndex (address senderAddress) internal returns (uint) {\r\n        uint randomNumber = random(string(abi.encodePacked(senderAddress)));\r\n        uint i = (randomNumber % mintConfig.remaining) + mintConfig.startIndex;\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  If there's a cache at mintCache[i] then use it\r\n        //  otherwise use i itself\r\n        // \r\n        // --------------------------------------------------------\r\n        uint index = mintCache[i] == 0 ? i : mintCache[i];\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Grab a number from the tail & decrease remaining\r\n        // \r\n        // --------------------------------------------------------\r\n        mintCache[i] = mintCache[mintConfig.remaining - 1 + mintConfig.startIndex] == 0 ? mintConfig.remaining - 1 + mintConfig.startIndex : mintCache[mintConfig.remaining - 1 + mintConfig.startIndex];\r\n        mintConfig.remaining--;\r\n\r\n        return index;\r\n    }\r\n\r\n    function mint(uint _nbTokens, bytes memory signature) public payable nonReentrant  {\r\n        require(mintConfig.isActive, \"The mint is not active at the moment.\");\r\n        require(_nbTokens > 0, \"Number of tokens can not be less than or equal to 0.\");\r\n        require(_nbTokens <= mintConfig.maxTokensPerTransaction, \"Number of tokens can not be higher than allowed.\");\r\n        require(mintConfig.remaining >= _nbTokens, \"The mint would exceed the number of remaining tokens.\");\r\n        require(mintConfig.mintPrice * _nbTokens == msg.value, \"Sent ETH value is incorrect.\");\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Check signature if mintConfig.isOnWhitelist is true\r\n        // \r\n        // --------------------------------------------------------\r\n        if (mintConfig.isOnWhitelist) {\r\n            address recoveredSigner = keccak256(abi.encodePacked(_msgSender())).toEthSignedMessageHash().recover(signature);\r\n            require(recoveredSigner == mintConfig.whitelistSigner, \"Your wallet is not whitelisted.\");\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Check if minter is holder if \r\n        //  mintConfig.isOnlyForHolders is true\r\n        // \r\n        // --------------------------------------------------------\r\n        if (mintConfig.isOnlyForHolders) {\r\n            require(balanceOf(_msgSender()) > 0, \"You have to own at least one token to mint more.\");\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Check if minter has not already reached the\r\n        //  limit of mints per wallet + update the mapping\r\n        //  minterKey is composed of the wallet address and version\r\n        //  version can be updated to reinit all wallets to 0 mints\r\n        // \r\n        // --------------------------------------------------------\r\n        string memory minterKey = string(abi.encodePacked(_msgSender(), mintConfig.version));\r\n        require(mintedPerWallet[minterKey] + _nbTokens <= mintConfig.maxMintsPerWallet, \"Your wallet is not allowed to mint as many tokens.\");\r\n        mintedPerWallet[minterKey] += _nbTokens;\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Mint depending on mint strategy: random / predictable\r\n        // \r\n        // --------------------------------------------------------\r\n        if (mintConfig.isRandom) {\r\n            for (uint i = 0; i < _nbTokens;i++) {\r\n                totalSupply++;\r\n                minted++;\r\n                _safeMint(_msgSender(), getRandomTokenIndex(_msgSender()));\r\n            }\r\n        } else {\r\n            for (uint i = 0; i < _nbTokens;i++) {\r\n                // --------------------------------------------------------\r\n                // \r\n                //  Update mint cache & remaining before mint\r\n                // \r\n                // --------------------------------------------------------\r\n                totalSupply++;\r\n                minted++;\r\n                mintCache[minted] = mintConfig.remaining - 1 + mintConfig.startIndex;\r\n                mintConfig.remaining--;\r\n                _safeMint(_msgSender(), minted);\r\n            }\r\n        }\r\n    }\r\n\r\n    function burn(uint _tokenId) external {\r\n        require(isBurnActive, \"Burning disabled.\");\r\n        require(_exists(_tokenId), \"The token does not exists.\");\r\n        require(ownerOf(_tokenId) == _msgSender(), \"You are not the owner of the token.\");\r\n        totalSupply--;\r\n        burned++;\r\n        _burn(_tokenId);\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns a date for a tokenId\r\n    //  date range: 01.01.22 - 28.12.25\r\n    // \r\n    // --------------------------------------------------------\r\n    function getDate (uint256 _tokenId) internal pure returns (string memory) {\r\n        uint deterministicNumber = deterministic(GuestlistedLibrary.toString(_tokenId));\r\n        uint day = deterministicNumber % 28 + 1;\r\n        uint month = deterministicNumber % 12 + 1;\r\n        uint yearDeterministic = deterministicNumber % 4;\r\n        string memory yearString = '22';\r\n\r\n        if (yearDeterministic == 1) yearString = '23';\r\n        else if (yearDeterministic == 2) yearString = '24';\r\n        else if (yearDeterministic == 3) yearString = '25';\r\n\r\n        string memory dayString = GuestlistedLibrary.toString(day);\r\n        if (day < 10) dayString = string(abi.encodePacked('0', dayString));\r\n\r\n        string memory monthString = GuestlistedLibrary.toString(month);\r\n        if (month < 10) monthString = string(abi.encodePacked('0', monthString));\r\n\r\n        return string(abi.encodePacked(dayString, '.', monthString, '.', yearString));\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns a deterministic number for an input\r\n    // \r\n    // --------------------------------------------------------\r\n    function deterministic (string memory input) internal pure returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Returns a relatively random number for an input\r\n    //  depending on current block timestamp & difficulty\r\n    // \r\n    // --------------------------------------------------------\r\n    function random (string memory input) internal view returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty, input)));\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Updates a venue in the storage at specified index\r\n    //  Adds a new venue if the index is -1\r\n    // \r\n    // --------------------------------------------------------\r\n    function updateVenue (int _index, GuestlistedLibrary.Venue memory _venue) public onlyOwner {\r\n        require((_index == -1) || (uint(_index) < venues.length), 'Can not update non-existent venue.');\r\n        if (_index == -1) venues.push(_venue);\r\n        else venues[uint(_index)] = _venue;\r\n    }\r\n\r\n    function getVenueByIndex (uint _index) external view returns (GuestlistedLibrary.Venue memory) {\r\n        require(_index < venues.length , 'Venue does not exists.');\r\n        return venues[_index];\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Updates a dj in the storage at specified index\r\n    //  Adds a new dj if the index is -1\r\n    // \r\n    // --------------------------------------------------------\r\n    function updateDJ (int _index, GuestlistedLibrary.DJ memory _dj) public onlyOwner {\r\n        require((_index == -1) || (uint(_index) <= djs.length - 1), 'Can not update non-existent dj.');\r\n        if (_index == -1) djs.push(_dj);\r\n        else djs[uint(_index)] = _dj;\r\n    }\r\n\r\n    function getDJByIndex (uint _index) external view returns (GuestlistedLibrary.DJ memory) {\r\n        require(_index < djs.length , 'DJ does not exists.');\r\n        return djs[_index];\r\n    }\r\n\r\n    function getMintedPerWallet (address minterAddress, uint version) external view returns (uint) {\r\n        string memory minterKey = string(abi.encodePacked(minterAddress, version));\r\n        return mintedPerWallet[minterKey];\r\n    }\r\n\r\n    function updateIsTextColorWhite (string memory bg, uint value) public onlyOwner {\r\n        require(value == 0 || value == 1, 'Wrong value.');\r\n        isTextColorWhite[bg] = value;\r\n    }\r\n\r\n    function updateArtProxyContract(address _artProxyContractAddress) public onlyOwner {\r\n        artProxyContract = GuestlistedArtProxy(_artProxyContractAddress);\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // \r\n    //  Update the adress used to sign & recover whitelists\r\n    // \r\n    // --------------------------------------------------------\r\n    function updateWhitelistSigner(address _whitelistSigner) external onlyOwner {\r\n        mintConfig.whitelistSigner = _whitelistSigner;\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n    // \r\n    //  Erease and update the custom metadata for a set of tokens.\r\n    //  This metadata will be added to specified tokens in the\r\n    //  tokenURI method.\r\n    // \r\n    // ----------------------------------------------------------------\r\n    function updateCustomMetadata (uint[] memory _tokenIds, CustomMetadata[] memory _customMetadata) external onlyOwner {\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            delete customMetadata[_tokenIds[i]];\r\n            for (uint j = 0; j < _customMetadata.length; j++) {\r\n                customMetadata[_tokenIds[i]].push(_customMetadata[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n    // \r\n    //  Erease and update the custom attributes for a set of tokens.\r\n    //  Those attributes will be added to specified tokens in the\r\n    //  tokenURI method.\r\n    // \r\n    // ----------------------------------------------------------------\r\n    function updateCustomAttributes (uint[] memory _tokenIds, CustomAttribute[] memory _customAttributes) external onlyOwner {\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            delete customAttributes[_tokenIds[i]];\r\n            for (uint j = 0; j < _customAttributes.length; j++) {\r\n                customAttributes[_tokenIds[i]].push(_customAttributes[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateMintConfig(MintConfig memory _mintConfig) public onlyOwner {\r\n        mintConfig = _mintConfig;\r\n    }\r\n\r\n    function flipBurnState() external onlyOwner {\r\n        isBurnActive = !isBurnActive;\r\n    }\r\n\r\n    function flipMintState() external onlyOwner {\r\n        mintConfig.isActive = !mintConfig.isActive;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n    // \r\n    //  Returns un array of tokens owned by an address\r\n    //  (gas optimisation of tokenOfOwnerByIndex from ERC721Enumerable)\r\n    // \r\n    // ----------------------------------------------------------------\r\n    function tokensOfOwner(address _ownerAddress) public virtual view returns (uint[] memory) {\r\n        uint balance = balanceOf(_ownerAddress);\r\n        uint[] memory tokens = new uint[](balance);\r\n        uint tokenId;\r\n        uint found;\r\n\r\n        while (found < balance) {\r\n            if (_exists(tokenId) && ownerOf(tokenId) == _ownerAddress) {\r\n                tokens[found++] = tokenId;\r\n            }\r\n            tokenId++;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    constructor(\r\n        address _artProxyContractAddress,\r\n        MintConfig memory _mintConfig,\r\n        GuestlistedLibrary.Venue[] memory _venues, \r\n        GuestlistedLibrary.DJ[] memory _djs, \r\n        string[] memory bgsWithWhiteTextColor,\r\n        uint[] memory _ownerReserve\r\n    ) ERC721(\"guestlisted\", \"guestlist\") Ownable() {\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Setup the art proxy contract instance\r\n        // \r\n        // --------------------------------------------------------\r\n        updateArtProxyContract(_artProxyContractAddress);\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Update the mintConfig\r\n        // \r\n        // --------------------------------------------------------\r\n        updateMintConfig(_mintConfig);\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Store venues\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0;i < _venues.length; i++) {\r\n            updateVenue(-1, _venues[i]);\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Store djs\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0;i < _djs.length; i++) {\r\n            updateDJ(-1, _djs[i]);\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Store backgounds that has white text color\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0; i < bgsWithWhiteTextColor.length; i++) {\r\n            updateIsTextColorWhite(bgsWithWhiteTextColor[i], 1);\r\n        }\r\n\r\n        // --------------------------------------------------------\r\n        // \r\n        //  Mint owner reserved tokens\r\n        // \r\n        // --------------------------------------------------------\r\n        for (uint i = 0; i < _ownerReserve.length; i++) {\r\n            mintCache[_ownerReserve[i]] = mintConfig.remaining - 1 + mintConfig.startIndex;\r\n            totalSupply++;\r\n            minted++;\r\n            mintConfig.remaining--;\r\n            _safeMint(owner(), _ownerReserve[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// --------------------------------------------------------\r\n// \r\n//  Art proxy contract function signature\r\n// \r\n// --------------------------------------------------------\r\ncontract GuestlistedArtProxy {\r\n    function draw (GuestlistedLibrary.TokenData memory tokenData) public view returns (string memory) {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artProxyContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRandom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnlyForHolders\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"whitelistSigner\",\"type\":\"address\"}],\"internalType\":\"struct Guestlisted.MintConfig\",\"name\":\"_mintConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256[2][]\",\"name\":\"indexes\",\"type\":\"uint256[2][]\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"djIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GuestlistedLibrary.Venue[]\",\"name\":\"_venues\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"firstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fontSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GuestlistedLibrary.DJ[]\",\"name\":\"_djs\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"bgsWithWhiteTextColor\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerReserve\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artProxyContract\",\"outputs\":[{\"internalType\":\"contract GuestlistedArtProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"displayType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipBurnState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDJByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"firstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fontSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GuestlistedLibrary.DJ\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getMintedPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVenueByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256[2][]\",\"name\":\"indexes\",\"type\":\"uint256[2][]\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"djIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GuestlistedLibrary.Venue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isTextColorWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRandom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnlyForHolders\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"whitelistSigner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artProxyContractAddress\",\"type\":\"address\"}],\"name\":\"updateArtProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"displayType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Guestlisted.CustomAttribute[]\",\"name\":\"_customAttributes\",\"type\":\"tuple[]\"}],\"name\":\"updateCustomAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Guestlisted.CustomMetadata[]\",\"name\":\"_customMetadata\",\"type\":\"tuple[]\"}],\"name\":\"updateCustomMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"firstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fontSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GuestlistedLibrary.DJ\",\"name\":\"_dj\",\"type\":\"tuple\"}],\"name\":\"updateDJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bg\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateIsTextColorWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRandom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnlyForHolders\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"whitelistSigner\",\"type\":\"address\"}],\"internalType\":\"struct Guestlisted.MintConfig\",\"name\":\"_mintConfig\",\"type\":\"tuple\"}],\"name\":\"updateMintConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256[2][]\",\"name\":\"indexes\",\"type\":\"uint256[2][]\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"djIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GuestlistedLibrary.Venue\",\"name\":\"_venue\",\"type\":\"tuple\"}],\"name\":\"updateVenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSigner\",\"type\":\"address\"}],\"name\":\"updateWhitelistSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Guestlisted", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a9b41ff10cb53b3c08ded8ef0929de95b3c2c15a73096c5bc529af46ca61924"}]}