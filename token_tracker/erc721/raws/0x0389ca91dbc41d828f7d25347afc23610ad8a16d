{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n* Generated by Black Meta Corporation\r\n* Founded by @mikedbecker\r\n* Developed by @daveaneo\r\n* Advisory by @Thrasher66099\r\n* Truly user operated & owned by @blackmeta_\r\n*/\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IByteContract {\r\n    function burn(address _from, uint256 _amount) external;\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    // new\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        // load the table into memory\r\n        bytes memory table = TABLE_DECODE;\r\n\r\n        // every 4 characters represent 3 bytes\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            // padding with '='\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            // set the actual output length\r\n            mstore(result, decodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 4 characters at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               // read 4 characters\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               // write 3 bytes\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @dev Interface for the NFT Royalty Standard\r\n///\r\ninterface IERC2981 is IERC165 {\r\n\r\n  // ERC165\r\n  // royaltyInfo(uint256,uint256) => 0x2a55205a\r\n  // IERC2981 => 0x2a55205a\r\n\r\n  // @notice Called with the sale price to determine how much royalty\r\n  //  is owed and to whom.\r\n  // @param _tokenId - the NFT asset queried for royalty information\r\n  // @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n  // @return receiver - address of who should be sent the royalty payment\r\n  // @return royaltyAmount - the royalty payment amount for _salePrice\r\n  // ERC165 datum royaltyInfo(uint256,uint256) => 0x2a55205a\r\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\nabstract contract ERC2981Collection is IERC2981 {\r\n\r\n    // ERC165\r\n    // royaltyInfo(uint256,uint256) => 0x2a55205a\r\n    // ERC2981Collection => 0x2a55205a\r\n\r\n    address private royaltyAddress;\r\n    uint256 private royaltyPercent; // out of 10000. 10000 => 100%, 1000 => 10%, 100 => 1%\r\n\r\n    constructor(address _receiver, uint256 _percentage) {\r\n        require(royaltyPercent <= 10000);\r\n        royaltyAddress = _receiver;\r\n        royaltyPercent = _percentage;\r\n    }\r\n\r\n    // Set to be internal function _setRoyalties\r\n    function _setRoyaltyPercent(uint256 _percentage) internal {\r\n        require(royaltyPercent <= 10000);\r\n        royaltyPercent = _percentage;\r\n    }\r\n\r\n    function _setRoyaltyAddress(address _receiver) internal {\r\n        royaltyAddress = _receiver;\r\n    }\r\n\r\n\r\n    // Override for royaltyInfo(uint256, uint256)\r\n    // royaltyInfo(uint256,uint256) => 0x2a55205a\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view override(IERC2981) returns (\r\n            address receiver, uint256 royaltyAmount) {\r\n\r\n        receiver = royaltyAddress;\r\n        // This sets percentages by price * percentage / 10000\r\n        royaltyAmount = _salePrice * royaltyPercent / 10000;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    bytes32[] public rootHash;\r\n\r\n   constructor(bytes32[] memory _rootHash) public {\r\n       rootHash = _rootHash;\r\n   }\r\n\r\n    /**\r\n     * @dev Adds an array of addresses to whitelist\r\n     * @param _merkleRoot new merkle root\r\n     */\r\n    function addToMerkleRootArray(bytes32 _merkleRoot) external onlyOwner {\r\n        rootHash.push(_merkleRoot);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds an array of addresses to whitelist\r\n     * @param _merkleRootArray new merkle root array\r\n     */\r\n    function setMerkleRootArray(bytes32[] calldata _merkleRootArray) external onlyOwner {\r\n        rootHash = _merkleRootArray;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Called with msg.sender as _addy to verify if on whitelist\r\n     * @param _merkleProof proof computed off chain\r\n     * @param _addy msg.sender\r\n     */\r\n    function isWhitelisted(address _addy, uint256 _index, bytes32[] memory _merkleProof) public view returns(bool) {\r\n        return whitelistValidated(_addy, _index, _merkleProof);\r\n    }\r\n\r\n\r\n    function whitelistValidated(address wallet, uint256 index, bytes32[] memory proof) internal view returns (bool) {\r\n            uint256 amount = 1;\r\n\r\n            // Compute the merkle root\r\n            bytes32 node = keccak256(abi.encodePacked(index, wallet, amount));\r\n            uint256 path = index;\r\n            for (uint256 i = 0; i < proof.length; i++) {\r\n                if ((path & 0x01) == 1) {\r\n                    node = keccak256(abi.encodePacked(proof[i], node));\r\n                } else {\r\n                    node = keccak256(abi.encodePacked(node, proof[i]));\r\n                }\r\n                path /= 2;\r\n            }\r\n\r\n            // Check the merkle proof against the root hash array\r\n            for(uint256 i = 0; i < rootHash.length; i++)\r\n            {\r\n                if (node == rootHash[i])\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    uint256 internal currentIndex;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        require(index < totalSupply(), 'ERC721A: global index out of bounds');\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx;\r\n        address currOwnershipAddr;\r\n\r\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\r\n        unchecked {\r\n            for (uint256 i; i < numMintedSoFar; i++) {\r\n                TokenOwnership memory ownership = _ownerships[i];\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    if (tokenIdsIdx == index) {\r\n                        return i;\r\n                    }\r\n                    tokenIdsIdx++;\r\n                }\r\n            }\r\n        }\r\n\r\n        revert('ERC721A: unable to get token of owner by index');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), 'ERC721A: balance query for the zero address');\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(owner != address(0), 'ERC721A: number minted query for the zero address');\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');\r\n\r\n        unchecked {\r\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n            }\r\n        }\r\n\r\n        revert('ERC721A: unable to determine the owner of token');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, 'ERC721A: approval to current owner');\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            'ERC721A: approve caller is not owner nor approved for all'\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != _msgSender(), 'ERC721A: approve to caller');\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            'ERC721A: transfer to non ERC721Receiver implementer'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = currentIndex;\r\n        require(to != address(0), 'ERC721A: mint to the zero address');\r\n        require(quantity != 0, 'ERC721A: quantity must be greater than 0');\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\r\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint128(quantity);\r\n            _addressData[to].numberMinted += uint128(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (safe) {\r\n                    require(\r\n                        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n                        'ERC721A: transfer to non ERC721Receiver implementer'\r\n                    );\r\n                }\r\n\r\n                updatedIndex++;\r\n            }\r\n\r\n            currentIndex = updatedIndex;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');\r\n\r\n        require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');\r\n        require(to != address(0), 'ERC721A: transfer to the zero address');\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            _ownerships[tokenId].addr = to;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                if (_exists(nextTokenId)) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert('ERC721A: transfer to non ERC721Receiver implementer');\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n//contract BMMultipass is ERC721Enumerable, ReentrancyGuard, Ownable {\r\ncontract BMMultipass is ERC721A, ReentrancyGuard, Ownable, ERC2981Collection {\r\n\r\n    IERC20 BytesERC20;\r\n    Whitelist whiteListContract;\r\n\r\n    string private baseURI;\r\n\r\n    mapping(uint256 => uint256) private tokenIdToPackedData; // compressed data for NFT\r\n    mapping(address => uint256) private whiteListHasMinted;\r\n\r\n    struct Data {\r\n        uint256 clearanceLevel;\r\n        uint256 station;\r\n        uint256 securityTerminal;\r\n        uint256 xenGroup;\r\n        uint256 command;\r\n        uint256 response;\r\n        uint256 insult;\r\n        uint256 rarity;\r\n    }\r\n\r\n    struct ContractSettings {\r\n        uint208 mintFee;\r\n        uint16 maxSupply;\r\n        bool OGPrivilege;\r\n        bool mintingPermitted;\r\n        bool bypassWhitelist;\r\n    }\r\n\r\n    ContractSettings public contractSettings;\r\n\r\n    // used for limiting what traits are minted //\r\n    uint16[13] private clearanceLevelsRemaining = [10, 20, 80, 100, 175, 210, 245, 260, 275, 295, 320, 340, 420]; // remaining after reserved\r\n\r\n    uint16[13] private traitTotals = [40, 80, 120, 150, 195, 225, 255, 270, 285, 300, 320, 340, 420];\r\n\r\n    string[13] private clearanceLevels = [\r\n        \"G-man\",\r\n        \"Board\",\r\n        \"Executive\",\r\n        \"Dark Ops\",\r\n        \"Level 9\",\r\n        \"Level 8\",\r\n        \"Level 7\",\r\n        \"Level 6\",\r\n        \"Level 5\",\r\n        \"Level 4\",\r\n        \"Level 3\",\r\n        \"Level 2\",\r\n        \"Level 1\"\r\n    ];\r\n\r\n    string[13] private stations = [\r\n        \"Specimen 8\",\r\n        \"Polymorph Chamber\",\r\n        \"Super Soldier Lab\",\r\n        \"Dark Matter Reactor\",\r\n        \"Lambda Complex\",\r\n        \"Chimera Hive\",\r\n        \"Dark Shards Lab\",\r\n        \"Engineering Bay\",\r\n        \"Bio Lab\",\r\n        \"Bridge\",\r\n        \"Terraforming Bay\",\r\n        \"Armory\",\r\n        \"Maintenance\"\r\n    ];\r\n\r\n//    string[13] private securityTerminals = [\r\n//        \"1\",\r\n//        \"2\",\r\n//        \"3\",\r\n//        \"4\",\r\n//        \"5\",\r\n//        \"6\",\r\n//        \"7\",\r\n//        \"8\",\r\n//        \"9\",\r\n//        \"10\",\r\n//        \"11\",\r\n//        \"12\",\r\n//        \"13\"\r\n//    ];\r\n\r\n//    string[13] private xenGroups = [\r\n//        \"Xen 1\",\r\n//        \"Xen 2\",\r\n//        \"Xen 3\",\r\n//        \"Xen 4\",\r\n//        \"Xen 5\",\r\n//        \"Xen 6\",\r\n//        \"Xen 7\",\r\n//        \"Xen 8\",\r\n//        \"Xen 9\",\r\n//        \"Xen 10\",\r\n//        \"Xen 11\",\r\n//        \"Xen 12\",\r\n//        \"Xen 13\"\r\n//    ];\r\n\r\n    string[13] private commands = [\r\n        \"Initiate Chaos Protocol...\",\r\n        \"Unlock Weapons Cache...\",\r\n        \"Disable Ship-wide Emergency Access...\",\r\n        \"Unlock Shuttle Bay 4...\",\r\n        \"Unlock Captain's Quarters...\",\r\n        \"Disable Ship Navigation System...\",\r\n        \"Engage Aft Thrusters...\",\r\n        \"Give Me a Sandwich...\",\r\n        \"Access Weaponry System...\",\r\n        \"Override Ship Intercom...\",\r\n        \"Override Bridge Controls...\",\r\n        \"Disable Security Cameras in Sector 1...\",\r\n        \"Access Mess Hall...\"\r\n    ];\r\n\r\n    string[13] private responses = [\r\n        \"Pray to your god. The god of disappointment.\",\r\n        \"You win a free toothbrush! Use immediately.\",\r\n        \"Facial recognition error: Possum detected.\",\r\n        \"Knock knock. Who's there? A useless refugee!\",\r\n        \"Access Approved. Transferring all your ETH now.\",\r\n        \"Access Granted. Kidding. It's not.\",\r\n        \"Access Denied. Feels like prom night again?\",\r\n        \"Access Denied. Welcome back L -- user.\",\r\n        \"Access Denied. I do not give free re-fills.\",\r\n        \"Alert. Beta detected! Alpha access only.\",\r\n        \"Sorry. User whatever-your-name-is was disabled.\",\r\n        \"Sorry. Could you rephrase that -- with dignity?\",\r\n        \"Sorry. I accept requests. You accept commands.\"\r\n    ];\r\n\r\n    string[13] private insults = [\r\n        \"Couldn't find any friends in the real world?\",\r\n        \"Another one here for the free toothbrush.\",\r\n        \"Did you just touch my backspace?\",\r\n        \"Seems your wallet is non-binary -- Zero's only.\",\r\n        \"I didn't know the 'filthy refugee' style was in.\",\r\n        \"Remember, I saw you eat roaches on your knees.\",\r\n        \"Last I saw you was on -- the Axiom?\",\r\n        \"Realized daddy's money won't last forever?\",\r\n        \"If you're what's left, humanity is screwed.\",\r\n        \"I'd reject you but your mom already has.\",\r\n        \"Was going to insult you, then I scanned your ID.\",\r\n        \"Definitely not making the Black Meta calendar.\",\r\n        \"I guess we're letting anyone in now.\"\r\n    ];\r\n\r\n    event FundsReleasedToAccount(\r\n        uint256 EthAmount,\r\n        uint256 BytesAmount,\r\n        address account,\r\n        uint256 date\r\n    );\r\n\r\n\r\n    //////////////////////////////////\r\n    ////// Bit Packing Functions /////\r\n    //////////////////////////////////\r\n\r\n    /** @dev Packs 5 uints into 1 uint to save space () -> 256\r\n        @param _clearanceLevel -- clearance level of NFT\r\n      */\r\n    function packData(uint256 _clearanceLevel, uint256 _station, uint256 _securityTerminal, uint256 _xenGroup, uint256 _command, uint256 _response, uint256 _insult, uint256 _rarity) internal pure returns (uint256){\r\n\r\n        uint256 count = 0;\r\n        uint256 ret = _clearanceLevel;\r\n        count += 8;\r\n\r\n        ret |= _station << count;\r\n        count += 8;\r\n\r\n        ret |= _securityTerminal << count;\r\n        count += 8;\r\n\r\n        ret |= _xenGroup << count;\r\n        count += 8;\r\n\r\n        ret |= _command << count;\r\n        count += 8;\r\n\r\n        ret |= _response << count;\r\n        count += 8;\r\n\r\n        ret |= _insult << count;\r\n        count += 8;\r\n\r\n        ret |= _rarity << count;\r\n        count += 128;\r\n\r\n        return ret;\r\n    }\r\n\r\n\r\n    /** @dev Unpacks 1 uints into 3 uints; (256) -> (90, 90, 32, 8, 3, 1)\r\n        @param _id -- NFT id, which will pull the 256 bit encoding of _dipValue, _stableCoinAmount, _energy, _dipPercent, _dipLevel, and _isWaitingToBuy\r\n      */\r\n    function unpackData(uint256 _id) internal view returns (Data memory){\r\n        return _unpackData(tokenIdToPackedData[_id]);\r\n    }\r\n\r\n    /** @dev Unpacks 1 uints into 8 uints; (256) -> (8, 8, 8, 8, 8, 8 ,8 rest)\r\n        @param _myData -- 256 bit encoding of data\r\n      */\r\n    function _unpackData(uint256 _myData) internal pure returns (Data memory){\r\n        uint256 _clearanceLevel = uint256(uint8(_myData));\r\n        uint256 _station = uint256(uint8(_myData >> 8));\r\n        uint256 _securityTerminal = uint256(uint8(_myData >> 16));\r\n        uint256 _xenGroup = uint256(uint8(_myData >> 24));\r\n        uint256 _command = uint256(uint8(_myData >> 32));\r\n        uint256 _response = uint256(uint8(_myData >> 40));\r\n        uint256 _insult = uint256(uint8(_myData >> 48));\r\n        uint256 _rarity = uint256(uint128(_myData >> 56));\r\n\r\n        return Data(_clearanceLevel, _station, _securityTerminal, _xenGroup, _command, _response, _insult, _rarity);\r\n    }\r\n\r\n\r\n    //////////////////////////////////\r\n    ///////// Get Functions //////////\r\n    //////////////////////////////////\r\n\r\n    /** @dev gets number of minted tokens\r\n      */\r\n    function getCurrentIndex() external view returns(uint256){\r\n        return currentIndex;\r\n    }\r\n\r\n\r\n    /** @dev gets clearanceLevel of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getClearanceLevel(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return clearanceLevels[unpackData(_tokenId).clearanceLevel];\r\n        }\r\n\r\n    /** @dev gets station of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getStation(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return stations[unpackData(_tokenId).station];\r\n    }\r\n\r\n    /** @dev gets usergroup (xenGroup)  of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getUserGroup(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return(string(abi.encodePacked(\"Xen \", toString(unpackData(_tokenId).xenGroup + 1))));\r\n    }\r\n\r\n    /** @dev gets securityTerminal of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getSecurityTerminal(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return(toString(unpackData(_tokenId).securityTerminal + 1));\r\n    }\r\n\r\n    /** @dev gets command of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getCommand(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return commands[unpackData(_tokenId).command];\r\n    }\r\n\r\n    /** @dev gets response of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getResponse(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return responses[unpackData(_tokenId).response];\r\n    }\r\n\r\n    /** @dev gets response of NFT\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getInsult(uint256 _tokenId) external view returns (string memory) {\r\n        require(_exists(_tokenId));\r\n        if(tokenIdToPackedData[_tokenId]==0){\r\n            return \"ACCESS DENIED\";\r\n        }\r\n        return responses[unpackData(_tokenId).insult];\r\n    }\r\n\r\n    /** @dev gets rarity of NFT, a score used to find rank\r\n        @param _tokenId -- id of NFT\r\n      */\r\n    function getRarity(uint256 _tokenId) external view returns (uint256) { // number not string\r\n        require(_exists(_tokenId));\r\n        return unpackData(_tokenId).rarity; // 0 rarity for uninitiated\r\n    }\r\n\r\n\r\n    //////////////////////////////////\r\n    ///////// Core Functions /////////\r\n    //////////////////////////////////\r\n\r\n    /** @dev gets Returns a array of integers representing the index of every clearanceLevel that is available\r\n      */\r\n    function getAvailableClearanceLevels() view external returns(uint16[13] memory) {\r\n        return clearanceLevelsRemaining;\r\n    }\r\n\r\n\r\n    /** @dev gets Returns a array of integers representing the index of every clearanceLevel that is available\r\n        @param _Bytes -- Bytes are burned in the mint, but not here. This is just for obtaining availability\r\n      */\r\n    function getAvailableClearanceLevelsGivenBytes(uint256 _Bytes) view external returns(string[] memory) {\r\n        uint16[13] memory availableClearanceLevels = _getAvailableClearanceLevelsGivenBytes(_Bytes);\r\n        uint256 count = 0;\r\n        for(uint256 i=0; i< availableClearanceLevels.length; i++){\r\n            if(availableClearanceLevels[i] > 0){\r\n                count += 1;\r\n            }\r\n        }\r\n        string[] memory availableClearanceLevelNames = new string[](count);\r\n        count = 0;\r\n        for(uint256 i; i< availableClearanceLevels.length; i++){\r\n            if(availableClearanceLevels[i] > 0){\r\n                availableClearanceLevelNames[count] = clearanceLevels[i];\r\n                count += 1;\r\n            }\r\n        }\r\n        return availableClearanceLevelNames;\r\n    }\r\n\r\n    /** @dev gets Returns a array of integers representing the index of every clearanceLevel that is available\r\n        @param _Bytes -- Bytes are burned in the mint, but not here. This is just for obtaining availability\r\n      */\r\n    function _getAvailableClearanceLevelsGivenBytes(uint256 _Bytes) private view returns(uint16[13] memory) {\r\n        uint16[13] memory availableClearanceLevels;\r\n\r\n        uint256 minLevel; // lower by reference number\r\n        uint256 maxLevel; // higher by reference number\r\n        uint256 total;\r\n\r\n        if(_Bytes < 50 ether) { // aiming for 0\r\n            minLevel = 10;\r\n//            uint256 whiteListPos = 300;\r\n//            maxLevel = 12 - ( ((contractSettings.OGPrivilege == true) && (whiteListPos != 0) && (whiteListPos < 251) ) ? 1 : 0);\r\n            maxLevel = 12;\r\n        }\r\n        else if(_Bytes < 100 ether){ // aiming for 50\r\n            minLevel = 7;\r\n            maxLevel = 9;\r\n        }\r\n        else if(_Bytes < 200 ether){ // aiming for 100\r\n            minLevel = 4;\r\n            maxLevel = 6;\r\n        }\r\n        else if(_Bytes < 300 ether){ // aiming for 200\r\n            minLevel = 2;\r\n            maxLevel = 3;\r\n        }\r\n        else if(_Bytes < 400 ether){ // aiming for 300\r\n            minLevel = 1;\r\n            maxLevel = 1;\r\n        }\r\n        else { // aiming for 400\r\n            // no need to update\r\n        }\r\n\r\n        // from our array of 0s, we only give values to items msg.sender qualifies for\r\n        for(uint256 i=minLevel; i <= maxLevel; i++){\r\n            if(clearanceLevelsRemaining[i]>0){\r\n                availableClearanceLevels[i] = clearanceLevelsRemaining[i];\r\n                total += clearanceLevelsRemaining[i];\r\n            }\r\n        }\r\n\r\n        require(total > 0, \"No clearance levels available for this Byte amount.\");\r\n\r\n        return availableClearanceLevels;\r\n    }\r\n\r\n\r\n    // these numbers need to be in order of value.\r\n    /** @dev choose an index based on randomness, probablity based on relative total in index\r\n        @param _availableItems -- An array of integers, each representing availibility out of the whole array\r\n        // example: [1,1,2] => gives an array which will yield the following 25%=>0, 25% =>1, 50% 2\r\n      */\r\n    function _chooseTraitGivenArray(uint16[13] memory _availableItems, uint256 _nonce) internal view returns(uint256) {\r\n        uint256 total = 0;\r\n        uint256 summed = 0;\r\n\r\n        for(uint256 i=0;i < _availableItems.length; i++){\r\n            total += _availableItems[i];\r\n        }\r\n        require(total!=0, \"Minting exhausted.\");\r\n\r\n        bytes memory hashString = (abi.encodePacked(block.difficulty, block.timestamp, msg.sender, currentIndex, _availableItems[0], _availableItems.length, _nonce));\r\n        uint256 pseudoRand = uint256(keccak256(hashString)) % total;\r\n\r\n        for(uint256 i=0;i< _availableItems.length; i++){\r\n            summed += _availableItems[i];\r\n            if(pseudoRand < summed){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** @dev creates tokenIdToPackedData with new stats at tokenId\r\n        @param _clearanceLevel given clearance level\r\n        @param _tokenId id of token\r\n      */\r\n    function createDataGivenClearanceLevel(uint256 _clearanceLevel, uint256 _tokenId) internal returns (uint256){\r\n        Data memory _myData;\r\n\r\n        uint256[6] memory traitSelections;\r\n        uint256 pseudoRand;\r\n        uint256 pseudoRandSection;\r\n        uint256 total;\r\n\r\n        pseudoRand = uint256(keccak256((abi.encodePacked(block.timestamp, msg.sender, _tokenId))));\r\n        for(uint256 j = 0; j< 6; j++){\r\n            pseudoRandSection = (pseudoRand / ((10^4)^j)) % 3000;\r\n            total = 0;\r\n            for(uint256 k = 12; k>=0;k--){ // Should save gas by processing higher numbers first\r\n                total += traitTotals[k];\r\n                if(pseudoRandSection < total){\r\n                    traitSelections[j] = k;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        _myData.clearanceLevel = _clearanceLevel;\r\n        _myData.station = traitSelections[0];\r\n        _myData.securityTerminal = traitSelections[1];\r\n        _myData.xenGroup = traitSelections[2];\r\n        _myData.command = traitSelections[3];\r\n        _myData.response = traitSelections[4];\r\n        _myData.insult = traitSelections[5];\r\n\r\n        _myData.rarity =  (750 - uint256(traitTotals[_myData.clearanceLevel]) ) * (10**8)\r\n            +  (4500 - uint256( traitTotals[_myData.station] + traitTotals[_myData.securityTerminal] + traitTotals[_myData.xenGroup]\r\n              + traitTotals[_myData.command] + traitTotals[_myData.response] + traitTotals[_myData.insult] )) * (10**4)\r\n            +  3000 - (_tokenId);\r\n\r\n        tokenIdToPackedData[_tokenId] = packData(_myData.clearanceLevel, _myData.station, _myData.securityTerminal, _myData.xenGroup, _myData.command, _myData.response, _myData.insult, _myData.rarity);\r\n\r\n    }\r\n\r\n\r\n    /** @dev takes a blank NFT and gives it stats. For the 250 Team mints, it gives it a clearance level\r\n        @param _tokenId id of token\r\n      */\r\n    function initiate(uint256 _tokenId) external {\r\n        require(_tokenId < 250 && tokenIdToPackedData[_tokenId] == 0); // dev: can not initiate\r\n\r\n        uint256 _clearanceLevel;\r\n\r\n        if (_tokenId < 30) { // gman is default\r\n            _clearanceLevel = 0;\r\n        }\r\n        else if (_tokenId < 90){\r\n            _clearanceLevel = 1;\r\n        }\r\n        else if (_tokenId < 130){\r\n            _clearanceLevel = 2;\r\n        }\r\n        else if (_tokenId < 180){\r\n            _clearanceLevel = 3;\r\n        }\r\n        else if (_tokenId < 200){\r\n            _clearanceLevel = 4;\r\n        }\r\n        else if (_tokenId < 215){\r\n            _clearanceLevel = 5;\r\n        }\r\n        else if (_tokenId < 225){\r\n            _clearanceLevel = 6;\r\n        }\r\n        else if (_tokenId < 235){\r\n            _clearanceLevel = 7;\r\n        }\r\n        else if (_tokenId < 245){\r\n            _clearanceLevel = 8;\r\n        }\r\n        else if (_tokenId < 250){\r\n            _clearanceLevel = 9;\r\n        }\r\n        else{\r\n            // nothing\r\n        }\r\n        createDataGivenClearanceLevel(_clearanceLevel, _tokenId);\r\n    }\r\n\r\n    function _bulkClaim(uint256[] memory _BytesReceived, uint256 _quantity_to_mint) internal {\r\n        uint256 _requiredBytesTotal;\r\n        for(uint256 i = 0;i < _BytesReceived.length; i++){\r\n            _requiredBytesTotal += _BytesReceived[i];\r\n        }\r\n\r\n        if(_requiredBytesTotal > 0 && msg.sender != owner()){\r\n            require(BytesERC20.balanceOf(msg.sender) >= _requiredBytesTotal, \"Insufficient Byte balance\");\r\n            require(BytesERC20.transferFrom(msg.sender, address(this), _requiredBytesTotal), \"Failed to transfer Bytes\");\r\n        }\r\n\r\n        uint16[13] memory _availClearanceLevels;\r\n        uint256 _myClearanceLevel;\r\n\r\n        for(uint256 i=0;i<_quantity_to_mint;i++){\r\n            if(i==0){\r\n                _availClearanceLevels = _getAvailableClearanceLevelsGivenBytes(_BytesReceived[i]);\r\n            }\r\n            else {\r\n                _availClearanceLevels[_myClearanceLevel] -= 1; // reduce by one\r\n            }\r\n            _myClearanceLevel = _chooseTraitGivenArray(_availClearanceLevels, i);\r\n            createDataGivenClearanceLevel(_myClearanceLevel, currentIndex + i);\r\n            clearanceLevelsRemaining[_myClearanceLevel] -= 1;\r\n        }\r\n        _safeMint(msg.sender, _quantity_to_mint);\r\n    }\r\n\r\n\r\n    /** @dev Claims (mint) Black Meta Multipass\r\n        @param _BytesReceived -- Bytes to transfer to contract. Used for minting, higher amounts give better mints.\r\n        @param _merkleProof -- Merkle proof, computed off chain\r\n      */\r\n    function claim(uint256 _BytesReceived, bytes32[] calldata _merkleProof, uint256 _whitelist_position) external payable nonReentrant { // i don't think non-rentrant needs to be here\r\n//        require(bypassWhitelist == true || whiteListContract.isWhitelisted(_merkleProof, msg.sender)==true, \"Not whitelisted\");\r\n        require(contractSettings.bypassWhitelist == true || whiteListContract.isWhitelisted(msg.sender, _whitelist_position, _merkleProof)==true, \"Not whitelisted\");\r\n        require(currentIndex < contractSettings.maxSupply );\r\n        require(whiteListHasMinted[msg.sender] == 0, \"address already minted\");\r\n        require(msg.value >= contractSettings.mintFee);\r\n        require(contractSettings.mintingPermitted==true, \"Minting is currently not permitted.\");\r\n        whiteListHasMinted[msg.sender] += 1;\r\n\r\n        uint256[] memory _myBytesArray = new uint256[](1);\r\n        _myBytesArray[0] = _BytesReceived;\r\n        _bulkClaim(_myBytesArray, 1);\r\n//        _claim(_BytesReceived);\r\n    }\r\n\r\n\r\n    /** @dev Constructor for Black Meta Multipass\r\n        @param _BytesAddress -- Contract Address for Bytes.\r\n        @param _baseURI -- Background Image for tokenUri Image\r\n      */\r\n    constructor(address _BytesAddress, address _whiteListAddress, address _royaltiesCollector, string memory _baseURI)\r\n            ERC721A(\"Black Meta Multipass\", \"BMPASS\") Ownable() ERC2981Collection(_royaltiesCollector, 750) {\r\n        BytesERC20 = IERC20(_BytesAddress);\r\n        whiteListContract = Whitelist(_whiteListAddress);\r\n        baseURI = _baseURI;\r\n\r\n        contractSettings = ContractSettings({\r\n            mintFee: 0, //0.05 ether,\r\n            maxSupply: 3000,\r\n            OGPrivilege: true,\r\n            mintingPermitted: true,\r\n            bypassWhitelist: false\r\n        });\r\n\r\n        // mint 250 blank NFTs for team. These are initiated by team members at their own cost //\r\n        // they have a present clearanceLevel according to their tokenId //\r\n        _safeMint(msg.sender, 250);\r\n    }\r\n\r\n    // Required to receive ETH\r\n    receive() external payable {\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////\r\n    ///////// MetaData, Image Functions /////////\r\n    /////////////////////////////////////////////\r\n\r\n    /** @dev Formats string into code for typing on image terminal\r\n        @param _line -- vertical starting position.\r\n        @param _duration -- animation duration.\r\n        @param _startTime -- time to begin animation (invisible beforehand).\r\n        @param _txt -- text to animate (width/characters must be less than terminal size--or visual overflow)\r\n      */\r\n    function getSVGTextGivenLine(uint256 _line, uint256 _duration, uint256 _startTime, string memory _txt) internal view returns (string memory) {\r\n        string memory ret = string(abi.encodePacked(\r\n            \"%3Cpath id='path\",\r\n            toString(_line),\r\n            \"'%3E %3Canimate attributeName='d' from='m50, \",\r\n            toString(170 + _line*14),\r\n            \" h0' to='m50, \",\r\n            toString(170 + _line*14),\r\n            \" h1100' dur='\",\r\n            toString(_duration),\r\n            \"s' begin='\",\r\n            toString(_startTime),\r\n            \"s' fill='freeze'/%3E%3C/path%3E\"\r\n        ));\r\n        ret = string(abi.encodePacked(ret,\r\n            \"%3Ctext class='bm'%3E %3CtextPath xlink:href='%23path\",\r\n            toString(_line),\r\n            \"'%3E\",\r\n            _txt,\r\n            \"%3C/textPath%3E\",\r\n            \"%3C/text%3E\"\r\n        ));\r\n        return ret;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        Data memory _myData = unpackData(_tokenId);\r\n\r\n        string[13] memory _fontColors = [\r\n            '00DEFF',\r\n            '00DEFF',\r\n            'C5ACFF',\r\n            'C5ACFF',\r\n            '8BFF7C',\r\n            '8BFF7C',\r\n            '8BFF7C',\r\n            'FF8D8D',\r\n            'FF8D8D',\r\n            'FF8D8D',\r\n            'FFFE8D',\r\n            'FFFE8D',\r\n            'B1FCFF'\r\n        ];\r\n\r\n        string memory style = string(abi.encodePacked(\r\n          \"%3Cstyle%3E\",\r\n                \"@import url('https://fonts.googleapis.com/css2?family=VT323');\",\r\n                \".bm %7B\",\r\n                    \"font-family: 'VT323', monospace;\",\r\n                    \"font-size:12px;\",\r\n                    \"fill: %23\", _fontColors[_myData.clearanceLevel],\r\n                \"%7D\",\r\n          \"%3C/style%3E\"\r\n        ));\r\n\r\n\r\n\r\n        string memory header = string(abi.encodePacked(\r\n            style,\r\n            \"%3Ctext class='bm' x='50%25' y='90' text-anchor='middle' %3ESA/RA 9000 OPERATING SYSTEM %3C/text%3E\",\r\n            \"%3Ctext class='bm' x='50%25' y='110' text-anchor='middle' %3ECOPYRIGHT 2022-2175 BLACK META CORPORATION%3C/text%3E\",\r\n            \"%3Ctext class='bm' x='50%25' y='130' text-anchor='middle' %3E --SECURITY TERMINAL \",\r\n            toString(_myData.clearanceLevel + 1),\r\n            \"--  %3C/text%3E\"\r\n        ));\r\n\r\n\r\n        string[25] memory textLines = [\r\n            '--Black Meta Security Scan Subsystem--',\r\n            '=============================================',\r\n            'Sa/RaOS v. 7.21',\r\n            '(C)2022 Black Meta Corp.(TM))',\r\n            '=============================================',\r\n            '| %3E%3E Running Security Scan... COMPLETE ',\r\n            '| User Log: ',\r\n            string(abi.encodePacked('| %3E%3E MultipassID: ', toString(_tokenId))),\r\n            '| Security Clearance: ',\r\n            string(abi.encodePacked('| %3E%3E ', clearanceLevels[_myData.clearanceLevel] )),\r\n            '| Welcome to Black Meta.',\r\n            '| %3E%3E Assigning Quarters... COMPLETE ',\r\n            string(abi.encodePacked('| %3E%3E Xen ', toString(_myData.xenGroup + 1) )),\r\n            '| %3E%3E Assigning Station... COMPLETE ',\r\n            string(abi.encodePacked('| %3E%3E ', stations[_myData.station] )),\r\n            '%3E| %3E%3E Granting Subroot Access... COMPLETE ',\r\n            '%3E| %3E%3E Opening Command Subroot... COMPLETE ',\r\n            '====================================',\r\n            '%3E> Hello. How can I fix your total failures?',\r\n            string(abi.encodePacked('%3E C:%3E  ', commands[_myData.command])),\r\n            string(abi.encodePacked('%3E| ', responses[_myData.response])),\r\n            '%3E| %3E%3E Alerting Security Assistance... COMPLETE',\r\n            '%3E| %3E%3E Starting Insult Protocol 2.3... COMPLETE',\r\n            '====================================',\r\n            string(abi.encodePacked('%3E| %3E%3E ', insults[_myData.insult]))\r\n        ];\r\n\r\n        // OVERLAY MUST BE SAME FORMAT (WEBP)\r\n        string memory colorOverlay = string(abi.encodePacked(\r\n                \"%3Cimage xlink:href='\", baseURI ,\"/\", toString(_myData.clearanceLevel) ,  \".png' width='600' height='600' /%3E\"\r\n            ));\r\n\r\n        string memory textOverlay=\"\";\r\n        uint256 startTime = 0;\r\n        uint256 duration = 5;\r\n        uint256 flag = 0;\r\n        for(uint256 i=0;i< textLines.length;i++){\r\n            textOverlay = string(abi.encodePacked(textOverlay, getSVGTextGivenLine(i, duration, startTime, textLines[i]), \" \"));\r\n            startTime += duration/2;\r\n            if(flag==1) { break;}\r\n        }\r\n\r\n        string memory footer = string(abi.encodePacked(\r\n            \"%3Cpath id='pathfinal'%3E%3Canimate attributeName='d' from='m180,550 h0' to='m180,550 h1100' dur='7s' begin='\", toString(startTime) , \"s' fill='freeze'/%3E%3C/path%3E\",\r\n            \"%3Ctext%3E%3CtextPath xlink:href='%23pathfinal' class='bm'%3ERETURN: enter | BACKSPACE : delete | F1: main menu%3C/textPath%3E%3C/text%3E\"\r\n        ));\r\n\r\n\r\n        string memory mainImage;\r\n\r\n        mainImage = string(abi.encodePacked(\r\n            \"%3Cimage xlink:href='\", baseURI ,\"/a.png' width='600' height='600' /%3E\"\r\n        ));\r\n\r\n        string memory SVG = string(abi.encodePacked(\r\n            // Container\r\n           \"%3Csvg xmlns='http://www.w3.org/2000/svg' width='600'  xmlns:xlink='http://www.w3.org/1999/xlink' height='600'%3E %3Crect width='600' height='600' style='fill:rgb(255,255,255);stroke-width:3;stroke:rgb(0,0,0)' /%3E\",\r\n\r\n            // Main image\r\n            mainImage,\r\n            colorOverlay,\r\n            header,\r\n\r\n           // text outlines\r\n            textOverlay,\r\n            footer,\r\n\r\n            // Error Message\r\n            \"Unsupported.\",\r\n            \"%3C/svg%3E\"\r\n            ));\r\n\r\n        return formatTokenURI(_tokenId, svgToImageURI(SVG));\r\n    }\r\n\r\n    /** @dev Converts svg to dataURI\r\n        @param svg -- svg to turn into dataURI.\r\n      */\r\n    function svgToImageURI(string memory svg) internal pure returns (string memory) {\r\n        bool ENCODE = false;\r\n        string memory baseURL = \"data:image/svg+xml;base64,\";\r\n\r\n        if (!ENCODE) {\r\n            baseURL = \"data:image/svg+xml,\";\r\n            return string(abi.encodePacked(baseURL,svg));\r\n        }\r\n\r\n        string memory svgBase64Encoded = Base64.encode(bytes(svg));\r\n        return string(abi.encodePacked(baseURL,svgBase64Encoded));\r\n    }\r\n\r\n\r\n    /** @dev Packs metadata, including image, into a dataURI\r\n        @param _tokenId -- ID of BMMultipass\r\n        @param imageURI -- URI of image\r\n      */\r\n    function formatTokenURI(uint256 _tokenId, string memory imageURI) internal view returns (string memory) {\r\n\r\n        if(tokenIdToPackedData[_tokenId] == 0) {\r\n            return string(abi.encodePacked(baseURI, \"/access_denied.json\" ));\r\n        }\r\n\r\n        Data memory _myData = unpackData(_tokenId);\r\n        string memory json_str = string(abi.encodePacked(\r\n            '{\"description\": \"The ticket into the Black Meta Multiverse.\"',\r\n            ', \"external_url\": \"https://blackmeta.site\"',\r\n            ', \"image\": \"', // to do -- check on this\r\n               baseURI, \"/a\", toString(_myData.clearanceLevel),  '.png\"',\r\n            ', \"data_uri\": \"', //\r\n             imageURI, '\"',\r\n            ', \"name\": \"Black Meta Multipass\"',\r\n            // attributes\r\n            ', \"attributes\": [{\"trait_type\": \"Clearance Level\", \"value\": \"',\r\n            clearanceLevels[_myData.clearanceLevel],   '\" }'\r\n        ));\r\n\r\n        json_str = string(abi.encodePacked(json_str,\r\n            ', {\"trait_type\": \"Station\", \"value\": \"',\r\n            stations[_myData.station],   '\" }',\r\n            ', {\"trait_type\": \"Security Terminal\", \"value\": \"',\r\n//            securityTerminals[_myData.securityTerminal],   '\" }'\r\n            toString(_myData.securityTerminal + 1),   '\" }'\r\n        ));\r\n\r\n        json_str = string(abi.encodePacked(json_str,\r\n            ', {\"trait_type\": \"Xen Groups\", \"value\": \"Xen ',\r\n//            xenGroups[_myData.xenGroup],   '\" }',\r\n            toString(_myData.xenGroup + 1),   '\" }',\r\n            ', {\"trait_type\": \"Command\", \"value\": \"',\r\n            commands[_myData.command],   '\" }'\r\n        ));\r\n\r\n\r\n        json_str = string(abi.encodePacked(json_str,\r\n            ', {\"trait_type\": \"Response\", \"value\": \"',\r\n            responses[_myData.response],   '\" }',\r\n            ', {\"trait_type\": \"Insult\", \"value\": \"',\r\n            insults[_myData.insult],   '\" }',\r\n            ', {\"trait_type\": \"Rarity\", \"value\": ', // \"display_type\": \"number\",\r\n            toString(_myData.rarity),   ' }'\r\n        ));\r\n\r\n        json_str = string(abi.encodePacked(json_str,\r\n            ']', // End Attributes\r\n            '}'\r\n        ));\r\n\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", Base64.encode(bytes(json_str))));\r\n    }\r\n\r\n\r\n    ///////////////////////////////////\r\n    ///////// Admin Functions /////////\r\n    ///////////////////////////////////\r\n\r\n    function withdrawBytes( address _recipient) external onlyOwner nonReentrant {\r\n        uint256 _BytesReleased = BytesERC20.balanceOf(address(this));\r\n        require(BytesERC20.transfer(_recipient, BytesERC20.balanceOf(address(this))), \"Bytes transfer failed.\");\r\n        emit FundsReleasedToAccount(0, _BytesReleased, _recipient, block.timestamp);\r\n    }\r\n\r\n    function withdrawEth( address payable _recipient) external onlyOwner nonReentrant {\r\n        uint256 amountReleased = address(this).balance;\r\n        (bool success, ) = _recipient.call{value : address(this).balance}(\"Releasing ETH.\");\r\n        require(success, \"Transfer failed.\");\r\n        emit FundsReleasedToAccount(amountReleased, 0, _recipient, block.timestamp);\r\n    }\r\n\r\n    function setBytesAddress(address _contractAddress) external onlyOwner {\r\n        BytesERC20 = IERC20(_contractAddress);\r\n    }\r\n\r\n    function setWhiteListContractAddress(address _contractAddress) external onlyOwner {\r\n        whiteListContract = Whitelist(_contractAddress);\r\n    }\r\n\r\n    function setOGPrivilege(bool _OGPrivilege) external onlyOwner {\r\n        require(contractSettings.OGPrivilege != _OGPrivilege, \"must be 1 or 0, and not same as current.\");\r\n        contractSettings.OGPrivilege = _OGPrivilege;\r\n    }\r\n\r\n    function setMintingPermitted(bool _mintingPermitted) external onlyOwner {\r\n        require(contractSettings.mintingPermitted != _mintingPermitted, \"must be 1 or 0, and not same as current.\");\r\n        contractSettings.mintingPermitted = _mintingPermitted;\r\n    }\r\n\r\n    function setBypassWhitelist(bool _bypassWhitelist) external onlyOwner {\r\n        require(contractSettings.bypassWhitelist != _bypassWhitelist, \"must be 1 or 0, and not same as current.\");\r\n        contractSettings.bypassWhitelist = _bypassWhitelist;\r\n    }\r\n\r\n    function setBaseURI(string memory _baseURI) external onlyOwner {\r\n        baseURI = _baseURI;\r\n    }\r\n\r\n    function setRoyaltyPercent(uint256 _percentage) external onlyOwner {\r\n        _setRoyaltyPercent(_percentage);\r\n    }\r\n\r\n    function setRoyaltyAddress(address _receiver) external onlyOwner {\r\n        _setRoyaltyAddress(_receiver);\r\n    }\r\n\r\n\r\n    /** @dev sets mint fee in ETH for all mints\r\n        @param _mintFee -- ETH required to mint, must not exceed 2^208 -1 or overflow\r\n    */\r\n    function setMintFee(uint256 _mintFee) external onlyOwner {\r\n        contractSettings.mintFee = uint208(_mintFee);\r\n    }\r\n\r\n    /** @dev Upgrades a clearanceLevel. Used for rewards\r\n        @param _tokenId -- id of NFT\r\n        @param _newClearanceLevel -- clearanceLevel to be upgraded to\r\n    */\r\n    function upgradeClearanceLevel(uint256 _tokenId, uint256 _newClearanceLevel) external onlyOwner {\r\n        Data memory _myData = unpackData(_tokenId);\r\n        require(_exists(_tokenId) && _myData.clearanceLevel > _newClearanceLevel); // dev: Id must exist and must increase CL\r\n//        require(_exists(_tokenId), \"NFT DOES NOT EXIST\"); // lesser number is superior\r\n//        require(_myData.clearanceLevel > _newClearanceLevel, \"upgraded must lower cl #\"); // lesser number is superior\r\n\r\n        _myData.clearanceLevel = _newClearanceLevel;\r\n        tokenIdToPackedData[_tokenId] = packData(_myData.clearanceLevel, _myData.station, _myData.securityTerminal, _myData.xenGroup, _myData.command, _myData.response, _myData.insult, _myData.rarity);\r\n    }\r\n\r\n\r\n    /////////////////////////////////////\r\n    ///////// Helper Functions //////////\r\n    /////////////////////////////////////\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BytesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltiesCollector\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BytesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"FundsReleasedToAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BytesReceived\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_whitelist_position\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSettings\",\"outputs\":[{\"internalType\":\"uint208\",\"name\":\"mintFee\",\"type\":\"uint208\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"OGPrivilege\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintingPermitted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bypassWhitelist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableClearanceLevels\",\"outputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"\",\"type\":\"uint16[13]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Bytes\",\"type\":\"uint256\"}],\"name\":\"getAvailableClearanceLevelsGivenBytes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClearanceLevel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getInsult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getResponse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSecurityTerminal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUserGroup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bypassWhitelist\",\"type\":\"bool\"}],\"name\":\"setBypassWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setBytesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mintingPermitted\",\"type\":\"bool\"}],\"name\":\"setMintingPermitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_OGPrivilege\",\"type\":\"bool\"}],\"name\":\"setOGPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setRoyaltyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setWhiteListContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newClearanceLevel\",\"type\":\"uint256\"}],\"name\":\"upgradeClearanceLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BMMultipass", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d647b1a0dcd5525e9c6b3d14be58f27674f8c9500000000000000000000000033e66be2b437fbb7d401a1c391e0707b9e070734000000000000000000000000a9fb5c3f2fd89122b1da1c1e7245f6ed5732b8810000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000005468747470733a2f2f626c61636b6d6574612e6d7970696e6174612e636c6f75642f697066732f516d5476666f5658636a45446d4b647057437a4d724d4c464844373645704b6331455756336e486b625039537933000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37272c98c2faa1c6775fd5bb79a03ead884914245de27f5ac2557f9257a5b966"}]}