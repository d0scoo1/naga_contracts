{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n// Copyright (c) 2022 Joyride\r\n\r\n// File: microgasFactory.sol\r\n// Some parts modified 2022 from github.com/divergencetech/ethier\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"BAD_HEX_LENGTH\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"REENTRANT\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"BAD_OWNER\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IAllowsProxy {\r\n    function isProxyActive() external view returns (bool);\r\n\r\n    function proxyAddress() external view returns (address);\r\n\r\n    function isApprovedForProxy(address _owner, address _operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface IFactoryMintable {\r\n    function factoryMint(uint256 _optionId, address _to) external;\r\n    function factoryCanMint(uint256 _optionId) external view returns (bool);\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\n/**\r\n * Used to delegate ownership of a contract to another address, to save on unneeded transactions to approve contract use for users\r\n */\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\ncontract AllowsConfigurableProxy is IAllowsProxy, Ownable {\r\n    bool internal isProxyActive_;\r\n    address internal proxyAddress_;\r\n\r\n    constructor(address _proxyAddress, bool _isProxyActive) {\r\n        proxyAddress_ = _proxyAddress;\r\n        isProxyActive_ = _isProxyActive;\r\n    }\r\n\r\n    function setIsProxyActive(bool _isProxyActive) external onlyOwner {\r\n        isProxyActive_ = _isProxyActive;\r\n    }\r\n\r\n    function setProxyAddress(address _proxyAddress) public onlyOwner {\r\n        proxyAddress_ = _proxyAddress;\r\n    }\r\n\r\n    function proxyAddress() public view returns (address) {\r\n        return proxyAddress_;\r\n    }\r\n\r\n    function isProxyActive() public view returns (bool) {\r\n        return isProxyActive_;\r\n    }\r\n\r\n    function isApprovedForProxy(address owner, address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (\r\n            isProxyActive_ && proxyAddress_ == _operator\r\n        ) {\r\n            return true;\r\n        }\r\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyAddress_);\r\n        if (\r\n            isProxyActive_ && address(proxyRegistry.proxies(owner)) == _operator\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * This is a generic factory contract that can be used to mint tokens. The configuration\r\n * for minting is specified by an _optionId, which can be used to delineate various\r\n * ways of minting.\r\n */\r\ninterface IFactoryERC721 {\r\n    /**\r\n     * Returns the name of this factory.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * Returns the symbol for this factory.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * Number of options the factory supports.\r\n     */\r\n    function numOptions() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns whether the option ID can be minted. Can return false if the developer wishes to\r\n     * restrict a total supply per option ID (or overall).\r\n     */\r\n    function canMint(uint256 _optionId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns a URL specifying some metadata about the option. This metadata can be of the\r\n     * same structure as the ERC721 metadata.\r\n     */\r\n    function tokenURI(uint256 _optionId) external view returns (string memory);\r\n\r\n    /**\r\n     * Indicates that this is a factory contract. Ideally would use EIP 165 supportsInterface()\r\n     */\r\n    function supportsFactoryInterface() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Mints asset(s) in accordance to a specific address with a particular \"option\". This should be\r\n     * callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this).\r\n     * Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.\r\n     * @param _optionId the option id\r\n     * @param _toAddress address of the future owner of the asset(s)\r\n     */\r\n    function mint(uint256 _optionId, address _toAddress) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract TokenFactory is\r\n    AllowsConfigurableProxy,\r\n    ReentrancyGuard,\r\n    IERC721\r\n{\r\n    using Strings for uint256;\r\n    uint256 public immutable NUM_OPTIONS;\r\n\r\n    /// @notice Contract that deployed this factory.\r\n    IFactoryMintable public token;\r\n\r\n    /// @notice Factory name and symbol.\r\n    string public name;\r\n    string public symbol;\r\n\r\n    string public optionURI;\r\n\r\n    bool public paused = false;\r\n\r\n    error NotOwnerOrProxy();\r\n    error InvalidOptionId();\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _owner,\r\n        uint256 _numOptions,\r\n        address _proxyAddress,\r\n        IFactoryMintable _token\r\n    ) AllowsConfigurableProxy(_proxyAddress, true) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        token = _token;\r\n        NUM_OPTIONS = _numOptions;\r\n        optionURI = \"https://onjoyride.mypinata.cloud/ipfs/QmWY6ZTnvd7Zaw2hSLzDudvv5GxJ47hMNXhZQVQQqnoWxu/\";\r\n        // first owner will be the token that deploys the contract\r\n        transferOwnership(_owner);\r\n        createOptionsAndEmitTransfers();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    modifier onlyOwnerOrProxy() {\r\n        if (\r\n            _msgSender() != owner() &&\r\n            !isApprovedForProxy(owner(), _msgSender())\r\n        ) {\r\n            revert NotOwnerOrProxy();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkValidOptionId(uint256 _optionId) {\r\n        // options are 0-indexed so check should be inclusive\r\n        if (_optionId >= NUM_OPTIONS) {\r\n            revert InvalidOptionId();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier interactBurnInvalidOptionId(uint256 _optionId) {\r\n        _;\r\n        _burnInvalidOptions();\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"PAUSED\");\r\n        _;\r\n    }\r\n\r\n    function setPaused(bool state) external onlyOwner {\r\n        paused = state;\r\n    }\r\n\r\n    function supportsFactoryInterface() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @notice Emits standard ERC721.Transfer events for each option so NFT indexers pick them up.\r\n    Does not need to fire on contract ownership transfer because once the tokens exist, the `ownerOf`\r\n    check will always pass for contract owner.\r\n     */\r\n    function createOptionsAndEmitTransfers() internal {\r\n        for (uint256 i = 0; i < NUM_OPTIONS; i++) {\r\n            emit Transfer(address(0), owner(), i);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the base URI for constructing tokenURI values for options.\r\n    function setBaseOptionURI(string memory _baseOptionURI) public onlyOwner {\r\n        optionURI = _baseOptionURI;\r\n    }\r\n\r\n     /**\r\n    @notice hack: transferFrom is called on sale \ufffd this method mints the real token\r\n     */\r\n    function transferFrom(\r\n        address,\r\n        address _to,\r\n        uint256 _optionId\r\n    )\r\n        public\r\n        nonReentrant\r\n        onlyOwnerOrProxy\r\n        whenNotPaused\r\n        interactBurnInvalidOptionId(_optionId)\r\n    {\r\n        token.factoryMint(_optionId, _to);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address,\r\n        address _to,\r\n        uint256 _optionId\r\n    )\r\n        public override\r\n        nonReentrant\r\n        onlyOwnerOrProxy\r\n        whenNotPaused\r\n        interactBurnInvalidOptionId(_optionId)\r\n    {\r\n        token.factoryMint(_optionId, _to);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address,\r\n        address _to,\r\n        uint256 _optionId,\r\n        bytes calldata\r\n    ) external {\r\n        safeTransferFrom(_to, _to,_optionId);\r\n    }\r\n\r\n    /**\r\n    @dev Return true if operator is an approved proxy of Owner\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return isApprovedForProxy(_owner, _operator);\r\n    }\r\n\r\n    /**\r\n    @notice Returns owner if _optionId is valid so posted orders pass validation\r\n     */\r\n    function ownerOf(uint256 _optionId) public view returns (address) {\r\n        return token.factoryCanMint(_optionId) ? owner() : address(0);\r\n    }\r\n\r\n    /**\r\n    @notice Returns a URL specifying option metadata, conforming to standard\r\n    ERC1155 metadata format.\r\n     */\r\n    function tokenURI(uint256 _optionId) external view returns (string memory) {\r\n        return string(abi.encodePacked(optionURI, _optionId.toString()));\r\n    }\r\n    \r\n    ///@notice public facing method for _burnInvalidOptions in case state of tokenContract changes\r\n    function burnInvalidOptions() public onlyOwner {\r\n        _burnInvalidOptions();\r\n    }\r\n\r\n    ///@notice \"burn\" option by sending it to 0 address. This will hide all active listings. Called as part of interactBurnInvalidOptionIds\r\n    function _burnInvalidOptions() internal {\r\n        for (uint256 i; i < NUM_OPTIONS; ++i) {\r\n            if (!token.factoryCanMint(i)) {\r\n                emit Transfer(owner(), address(0), i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice emit a transfer event for a \"burnt\" option back to the owner if factoryCanMint the optionId\r\n    @dev will re-validate listings on OpenSea frontend if an option becomes eligible to mint again\r\n    eg, if max supply is increased\r\n    */\r\n    function restoreOption(uint256 _optionId) external onlyOwner {\r\n        if (token.factoryCanMint(_optionId)) {\r\n            emit Transfer(address(0), owner(), _optionId);\r\n        }\r\n    }\r\n\r\n    function totalSupply() external pure returns (uint256) { return 3333; }\r\n    function approve(address operator, uint256) external onlyOwner { setProxyAddress(operator); }\r\n    function getApproved(uint256) external view returns (address operator) {return proxyAddress();}\r\n    function setApprovalForAll(address operator, bool) external onlyOwner { setProxyAddress(operator); }\r\n    function balanceOf(address _owner) external view returns (uint256) {return _owner==owner()?NUM_OPTIONS:0;}\r\n}\r\n// File: microgas721.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"TOO_POOR\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"CANT_SEND\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"LL_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"LL_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"TOO_POOR\");\r\n        require(isContract(target), \"NOT_CONTRACT\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"LL_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"NOT_CONTRACT\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"LL_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"NOT_CONTRACT\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    uint256 public constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping owner address to token count\r\n    //mapping(address => uint256) internal _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) internal _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"BAD_ADDRESS\");\r\n        //return _balances[owner];\r\n        //balanceOf in ERC-721 is pointless and nearly useless without the ERC721Enumerable extension.\r\n        //returns max value just in case anything is actually relying on it for anything.\r\n        //This should indicate that the method is not implemented without throwing or returning 0 which could cause confusion.\r\n        return MAX_UINT;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner > address(1), \"BAD_ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"BAD_ID\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"INVALID\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"NOT_OWNER\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"BAD_TOKEN\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"NOT_APPROVED\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"NOT_APPROVED\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"NOT_RECEIVER\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] > address(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"BAD_ID\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"NOT_RECEIVER\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to > address(1), \"ZERO_ADDRESS\");\r\n        require(!_exists(tokenId), \"ALREADY_MINTED\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        //_balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        //_balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"NOT_OWNER\");\r\n        require(to > address(1), \"ZERO_ADDRESS\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        //_balances[from] -= 1;\r\n        //_balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"INVALID_APPROVE\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"NOT_RECEIVER\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract Initializable {\r\n    bool inited = false;\r\n\r\n    modifier initializer() {\r\n        require(!inited, \"INITIALIZED\");\r\n        _;\r\n        inited = true;\r\n    }\r\n}\r\n\r\ncontract EIP712Base is Initializable {\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        address verifyingContract;\r\n        bytes32 salt;\r\n    }\r\n\r\n    string constant public ERC712_VERSION = \"1\";\r\n\r\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\r\n        )\r\n    );\r\n    bytes32 internal domainSeperator;\r\n\r\n    // supposed to be called once while initializing.\r\n    // one of the contracts that inherits this contract follows proxy pattern\r\n    // so it is not possible to do this in a constructor\r\n    function _initializeEIP712(\r\n        string memory name\r\n    )\r\n        internal\r\n        initializer\r\n    {\r\n        _setDomainSeperator(name);\r\n    }\r\n\r\n    function _setDomainSeperator(string memory name) internal {\r\n        domainSeperator = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(ERC712_VERSION)),\r\n                address(this),\r\n                bytes32(getChainId())\r\n            )\r\n        );\r\n    }\r\n\r\n    function getDomainSeperator() public view returns (bytes32) {\r\n        return domainSeperator;\r\n    }\r\n\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Accept message hash and returns hash message in EIP712 compatible form\r\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n     * https://eips.ethereum.org/EIPS/eip-712\r\n     * \"\\\\x19\" makes the encoding deterministic\r\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n     */\r\n    function toTypedMessageHash(bytes32 messageHash)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n            );\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract NativeMetaTransaction is EIP712Base {\r\n    using SafeMath for uint256;\r\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n        )\r\n    );\r\n    event MetaTransactionExecuted(\r\n        address userAddress,\r\n        address payable relayerAddress,\r\n        bytes functionSignature\r\n    );\r\n    mapping(address => uint256) nonces;\r\n\r\n    /*\r\n     * Meta transaction structure.\r\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n     * He should call the desired function directly in that case.\r\n     */\r\n    struct MetaTransaction {\r\n        uint256 nonce;\r\n        address from;\r\n        bytes functionSignature;\r\n    }\r\n\r\n    function executeMetaTransaction(\r\n        address userAddress,\r\n        bytes memory functionSignature,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) public payable returns (bytes memory) {\r\n        MetaTransaction memory metaTx = MetaTransaction({\r\n            nonce: nonces[userAddress],\r\n            from: userAddress,\r\n            functionSignature: functionSignature\r\n        });\r\n\r\n        require(\r\n            verify(userAddress, metaTx, sigR, sigS, sigV),\r\n            \"BAD_SIGNER\"\r\n        );\r\n\r\n        // increase nonce for user (to avoid re-use)\r\n        nonces[userAddress] = nonces[userAddress].add(1);\r\n\r\n        emit MetaTransactionExecuted(\r\n            userAddress,\r\n            payable(msg.sender),\r\n            functionSignature\r\n        );\r\n\r\n        // Append userAddress and relayer address at the end to extract it from calling context\r\n        (bool success, bytes memory returnData) = address(this).call(\r\n            abi.encodePacked(functionSignature, userAddress)\r\n        );\r\n        require(success, \"FAILED\");\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function hashMetaTransaction(MetaTransaction memory metaTx)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    META_TRANSACTION_TYPEHASH,\r\n                    metaTx.nonce,\r\n                    metaTx.from,\r\n                    keccak256(metaTx.functionSignature)\r\n                )\r\n            );\r\n    }\r\n\r\n    function getNonce(address user) public view returns (uint256 nonce) {\r\n        nonce = nonces[user];\r\n    }\r\n\r\n    function verify(\r\n        address signer,\r\n        MetaTransaction memory metaTx,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) internal view returns (bool) {\r\n        require(signer != address(0), \"INVALID_SIGNER\");\r\n        return\r\n            signer ==\r\n            ecrecover(\r\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\r\n                sigV,\r\n                sigR,\r\n                sigS\r\n            );\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract FactoryMintable is Context {\r\n    address public tokenFactory;\r\n\r\n    error NotTokenFactory();\r\n    error FactoryCannotMint();\r\n\r\n    modifier onlyFactory() {\r\n        if (_msgSender() != tokenFactory) {\r\n            revert NotTokenFactory();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier canMint(uint256 _optionId) {\r\n        if (!factoryCanMint(_optionId)) {\r\n            revert FactoryCannotMint();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function factoryMint(uint256 _optionId, address _to) external virtual;\r\n\r\n    function factoryCanMint(uint256 _optionId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool);\r\n}\r\n\r\nabstract contract ContextMixin {\r\n    function msgSender()\r\n        internal\r\n        view\r\n        returns (address payable sender)\r\n    {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else {\r\n            sender = payable(msg.sender);\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n\r\nstruct mintTier {\r\n    uint8 tierIndex;\r\n    uint32 finneyPrice;\r\n\r\n    uint32 startIndex;\r\n    uint32 endIndex;\r\n\r\n    uint32 nextIDPlusOne; //must initialize as 1\r\n}\r\n\r\nenum purchaseType {\r\n    PUBLIC_SALE,\r\n    FREE_MINT,\r\n    WHITE_LIST\r\n}\r\n\r\nstruct purchaseData {\r\n    uint256 tierID;\r\n    uint256 quantity;\r\n    purchaseType purchaseType;\r\n    uint256[] whitelistBits;\r\n    uint256[] freeMintIDs;\r\n    bytes32 sigR;\r\n    bytes32 sigS;\r\n    uint8 sigV;\r\n}\r\n\r\nstruct remainingNFTData {\r\n    uint256 tierID;\r\n    uint256 remaining;\r\n    uint256 weiPrice;\r\n    uint256 wlWeiPrice;\r\n}\r\n\r\nstruct webData {\r\n    remainingNFTData[] remaining;\r\n    uint256 whiteListStartTimestamp;\r\n    uint256 publicStartTimestamp;\r\n    bool revealed;\r\n}\r\n\r\ncontract Microgas721 is ContextMixin, NativeMetaTransaction, Ownable, ERC721, FactoryMintable, ReentrancyGuard {\r\n    using Strings for uint256;\r\n    using Address for address;\r\n\r\n    uint256 public constant FINNEY = 1e15;\r\n    uint256 public constant MAX_PER_TX = 5;\r\n\r\n    uint256 public _tierCount;\r\n    uint256 public _maxSupply;\r\n\r\n    string private _contractMetadataURI;\r\n    string[] private _tierBaseURI;\r\n    mintTier[] public _packTiers;\r\n\r\n    address _allowListSigningAddress;\r\n    uint256 _revealBlock;\r\n    uint256 _revealed;\r\n\r\n    uint256 public _publicStartTimestamp = ERC721.MAX_UINT;\r\n    uint256 public _whiteListStartTimestamp = ERC721.MAX_UINT;\r\n    uint256[] _whitelistBits;\r\n\r\n    address _openSeaProxy;\r\n    mapping(address => bool) _revokedDefaultPermissions;\r\n    mapping(address => mapping(uint256 => uint256)) _purchasedByOriginPerBlock;\r\n\r\n    bool _paused = false;\r\n\r\n    constructor(string memory name_, string memory symbol_, address proxy) ERC721(name_, symbol_) { \r\n        _openSeaProxy = proxy;\r\n        setupInitialData();\r\n    }\r\n    \r\n    function setupInitialData() private {\r\n        _packTiers.push(mintTier(0,79,0,3332,1));\r\n        _tierBaseURI.push(\"https://onjoyride.mypinata.cloud/ipfs/QmbxXvL1rSTHYye3CN6h1TBKnr3aFcTA4pMuLBYS6bVjBn/tokens/\");\r\n        _contractMetadataURI = \"https://onjoyride.mypinata.cloud/ipfs/QmbxXvL1rSTHYye3CN6h1TBKnr3aFcTA4pMuLBYS6bVjBn/contract\";\r\n\r\n        _tierCount = 1;\r\n        _maxSupply = 3333;\r\n\r\n        _whiteListStartTimestamp = 1648501200;\r\n        _publicStartTimestamp = 1648587600;\r\n\r\n        _allowListSigningAddress = 0x8e69cAc0DBFe68BEfCa549f817F8Ee86c053dEeB;\r\n\r\n        for(uint i = 0; i < 14; i++) {\r\n            _whitelistBits.push(ERC721.MAX_UINT);\r\n        }\r\n    }\r\n\r\n    modifier validSignature (purchaseData memory purchaseData_) {\r\n        if(purchaseData_.purchaseType != purchaseType.PUBLIC_SALE) {\r\n            bytes memory encodedPurchaseData;\r\n\r\n            if(purchaseData_.purchaseType == purchaseType.WHITE_LIST) {\r\n                encodedPurchaseData = abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    purchaseData_.whitelistBits,\r\n                    bytes32(uint256(uint160(msg.sender))));\r\n            } else {\r\n                encodedPurchaseData = abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    purchaseData_.tierID,\r\n                    purchaseData_.freeMintIDs,\r\n                    bytes32(uint256(uint160(msg.sender))));\r\n            }\r\n\r\n            bytes32 hash = keccak256(encodedPurchaseData);\r\n\r\n            require(\r\n                _allowListSigningAddress == \r\n                    ecrecover(hash, \r\n                        purchaseData_.sigV, \r\n                        purchaseData_.sigR, \r\n                        purchaseData_.sigS)\r\n                ,\"NO_AUTH\"\r\n            );\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier beforeSale() {\r\n        require(totalSupply() == 0 || _publicStartTimestamp > block.timestamp && _whiteListStartTimestamp > block.timestamp, \"STARTED\");\r\n        _;\r\n    }\r\n\r\n    modifier publicStarted() {\r\n        require(_publicStartTimestamp < block.timestamp, \"BEFORE_PUBLIC\");\r\n        _;\r\n    }\r\n\r\n    modifier notRevealed() {\r\n        require(_revealed == 0, \"REVEALED\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!_paused, \"PAUSED\");\r\n        _;\r\n    }\r\n\r\n    function setOSFactory(ITokenFactory factory) public onlyOwner {\r\n        tokenFactory = address(factory);\r\n    }\r\n\r\n    function setContractMetadataURI(string calldata uri) external onlyOwner {\r\n        _contractMetadataURI = uri;\r\n    }\r\n\r\n    function setAllowListSigningAddress(address signer) external onlyOwner {\r\n        _allowListSigningAddress = signer;\r\n    }\r\n\r\n    function setDropTimestamps(uint256 whiteListStart_, uint256 publicStart_) external onlyOwner beforeSale {\r\n        _publicStartTimestamp = publicStart_;\r\n        _whiteListStartTimestamp = whiteListStart_;\r\n    }\r\n\r\n    function setPackTiers(mintTier[] calldata tiers) external onlyOwner beforeSale {\r\n        uint maxSupply = 0;\r\n        for(uint i = 0; i < tiers.length; i++) {\r\n            require(tiers[i].tierIndex == i, \"BAD_INDEX\");\r\n            if(i < _tierCount) {\r\n                _packTiers[i] = tiers[i];\r\n            } else {\r\n                _packTiers.push(tiers[i]);\r\n                _tierBaseURI.push(\"\");\r\n            }\r\n            maxSupply += tiers[i].endIndex - tiers[i].startIndex;\r\n        }\r\n        \r\n        while(_packTiers.length > tiers.length) {\r\n            _packTiers.pop();\r\n            _tierBaseURI.pop();\r\n        }\r\n\r\n        _tierCount = tiers.length;\r\n        _maxSupply = maxSupply;\r\n    }\r\n\r\n    function setReducedPackTier(uint mintTierIndex, uint32 newEndIndex) external onlyOwner notRevealed {\r\n        mintTier memory tier = _packTiers[mintTierIndex];\r\n        require(tier.startIndex < newEndIndex && tier.endIndex > newEndIndex, \"BAD_TIER\");\r\n        _packTiers[mintTierIndex].endIndex = newEndIndex;\r\n        uint oldSupply = tier.endIndex - tier.startIndex;\r\n        uint newSupply = newEndIndex - tier.startIndex;\r\n        _maxSupply -= oldSupply - newSupply;\r\n    }\r\n\r\n    function setPaused(bool state) external onlyOwner {\r\n        _paused = state;\r\n    }\r\n\r\n    function initializeTierURIs(string[] calldata tierBaseURI_) external onlyOwner {\r\n        require(tierBaseURI_.length == _tierCount, \"BAD_URIS\");\r\n        for(uint i = 0; i < _tierCount; i++) {\r\n            _tierBaseURI[i] = tierBaseURI_[i];\r\n        }\r\n\r\n        if(tokenFactory == address(0))\r\n            ITokenFactory(tokenFactory).setBaseOptionURI(tierBaseURI_);\r\n    }\r\n\r\n    function addWhitelistBits(uint blockCount) public onlyOwner {\r\n        for(uint i = 0; i < blockCount; i++) {\r\n            _whitelistBits.push(ERC721.MAX_UINT);\r\n        }\r\n    }\r\n\r\n    function prepReveal() external onlyOwner notRevealed {\r\n        _revealBlock = block.number;\r\n    }\r\n\r\n    function reveal() external onlyOwner notRevealed {\r\n        require(blockhash(_revealBlock + 10) != 0, \"CANT_REVEAL\");\r\n        require(blockhash(_revealBlock + 20) != 0, \"CANT_REVEAL\");\r\n        _revealed = uint256(keccak256(abi.encodePacked(\r\n            blockhash(_revealBlock + 20), \r\n            blockhash(_revealBlock + 15), \r\n            blockhash(_revealBlock + 10))));\r\n    }\r\n\r\n    function primeThePump(uint256 start_, uint256 count_, uint256 tierID_, address[] calldata freebieAddresses_) external onlyOwner {\r\n        mintTier memory tier = _packTiers[tierID_];\r\n        require(tier.startIndex < start_+1, \"NOT_IN_TIER\");\r\n        require(tier.endIndex > start_+count_-2, \"NOT_IN_TIER\");\r\n\r\n        for(uint i = start_; i < start_+count_; i++) {\r\n            if(i >= start_ + freebieAddresses_.length) {\r\n                require(_owners[i] == address(0), \"ID_INITIALIZED\");\r\n                _owners[i] = address(1);\r\n            }\r\n            else {\r\n                require(start_ == tier.startIndex, \"BAD_FREEBIE_ID\");\r\n                _safeMint(freebieAddresses_[i-start_], i, \"\");\r\n            }\r\n        }\r\n        tier.nextIDPlusOne += uint32(freebieAddresses_.length);\r\n\r\n        _packTiers[tierID_] = tier;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the total unsold tokens from a tier by its index.\r\n    */\r\n    function tierUnsold(uint256 tierIDX) private view returns (uint256) {\r\n        mintTier memory tier = _packTiers[tierIDX];\r\n        return tier.endIndex - tier.startIndex - tier.nextIDPlusOne + 2;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the price of token from a tier by its index.\r\n    */\r\n    function tierPrice(uint256 tierIDX) private view returns (uint256) {\r\n        mintTier memory tier = _packTiers[tierIDX];\r\n        return tier.finneyPrice*FINNEY;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the presale price of token from a tier by its index.\r\n    */\r\n    function tierWLPrice(uint256 tierIDX) private view returns (uint256) {\r\n        mintTier memory tier = _packTiers[tierIDX];\r\n        return tier.finneyPrice*FINNEY;\r\n    }\r\n\r\n    function remainingItems() external view returns (webData memory) {\r\n        remainingNFTData[] memory remainingNFT = new remainingNFTData[](_tierCount);\r\n        for(uint i = 0; i < _tierCount; i++) {\r\n            uint256 remaining = tierUnsold(i);\r\n            uint256 weiPrice = tierPrice(i);\r\n            uint256 wlWeiPrice = tierWLPrice(i);\r\n            remainingNFT[i] = remainingNFTData(i,remaining,weiPrice,wlWeiPrice);\r\n        }\r\n        return webData(remainingNFT, _whiteListStartTimestamp, _publicStartTimestamp, _revealed != 0);\r\n    }\r\n\r\n    function idToTier(uint256 tokenId_) private view returns (mintTier memory) {\r\n        mintTier memory tier;\r\n        for(uint i = 0; i < _tierCount; i++) {\r\n            tier = _packTiers[i];\r\n            if(tier.startIndex <= tokenId_ && tier.endIndex >= tokenId_) {\r\n                return tier;\r\n            }\r\n        }\r\n        require(false, \"INVALID_ID\");\r\n        return tier;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId_), \"INVALID_ID\");\r\n        mintTier memory tier = idToTier(tokenId_);\r\n        string memory baseURI = _tierBaseURI[tier.tierIndex];\r\n        if(_revealed == 0) {\r\n            return string(\r\n                abi.encodePacked(baseURI, \"default\")\r\n            );\r\n        } else {\r\n            uint id = tokenId_ - tier.startIndex;\r\n            id = (_revealed + id) % (tier.endIndex - tier.startIndex);\r\n            id += tier.startIndex;\r\n            return string(\r\n                abi.encodePacked(baseURI, \"revealed/\", id.toString())\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     * Using a simple naive search of all entries and counting. This costs way too much gas for use on chain. \r\n     * On-chain ownership-of-any checks should require an ID as parameter and use ownerOf().\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner <= address(1), \"BAD_QUERY\");\r\n        uint count;\r\n        for( uint i; i < _maxSupply; ++i ){\r\n          if( owner == _owners[i])\r\n            ++count;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        uint256 sumTotal = 0;\r\n        for(uint i = 0; i < _tierCount; i++) {\r\n            sumTotal += _packTiers[i].nextIDPlusOne;\r\n        }\r\n        return sumTotal - _tierCount;\r\n    }\r\n\r\n    function mintTokenComplex(purchaseData[] calldata data_) external payable {\r\n        uint256 valueRemaining = msg.value;\r\n        uint256 totalPurchased = 0;\r\n\r\n        for(uint i = 0; i < data_.length; i++) {\r\n            if(data_[i].purchaseType == purchaseType.PUBLIC_SALE) {\r\n                require(_publicStartTimestamp > block.timestamp, \"NOT_START\");\r\n                uint256 price = tierPrice(data_[i].tierID);\r\n                valueRemaining -= mintTokenBase(data_[i].tierID,data_[i].quantity, valueRemaining, price, msgSender());\r\n                totalPurchased += data_[i].quantity;\r\n            } else {\r\n                require(block.timestamp > _whiteListStartTimestamp && block.timestamp < _publicStartTimestamp, \"NOT_WL\");\r\n                valueRemaining -= mintTokenPresale(data_[i], valueRemaining);\r\n                totalPurchased += data_[i].quantity;\r\n            }\r\n        }\r\n\r\n        if(msg.sender != tx.origin) { //unfortunately for botters (and some people using CA wallets) this costs some extra gas to enforce\r\n            totalPurchased += _purchasedByOriginPerBlock[tx.origin][block.number];\r\n            _purchasedByOriginPerBlock[tx.origin][block.number] = totalPurchased;\r\n        }\r\n\r\n        require(totalPurchased < 1+MAX_PER_TX, \"TOO_MANY\");\r\n    }\r\n\r\n    function factoryCanMint(uint256 _optionId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        publicStarted\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        uint256 packTier = _optionId % _tierCount;\r\n        uint256 quantity = 1 + (_optionId / _tierCount)*2;\r\n        mintTier memory tier = _packTiers[packTier];\r\n        uint256 _firstID = tier.startIndex + tier.nextIDPlusOne - 1;\r\n        if (tokenFactory == address(0) || _firstID + quantity > tier.endIndex + 1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function factoryMint(uint256 _optionId, address _to)\r\n        public\r\n        override\r\n        nonReentrant\r\n        onlyFactory\r\n        canMint(_optionId)\r\n    {\r\n        uint256 packTier = _optionId % _tierCount;\r\n        uint256 quantity = 1 + (_optionId / _tierCount)*2;\r\n        mintTokenBase(packTier, quantity, 0, 0, _to);\r\n    }\r\n\r\n    function mintTokenSimple(uint256 tierID_, uint256 quantity_) external payable publicStarted {\r\n        require(quantity_ < MAX_PER_TX+1, \"TOO_MANY\");\r\n        uint256 price = tierPrice(tierID_);\r\n        mintTokenBase(tierID_, quantity_, msg.value, price, msgSender());\r\n    }\r\n\r\n    function mintTokenBase(uint256 tierID_, uint256 quantity_, uint256 valueRemaining, uint256 price, address recipient) internal notPaused returns (uint256 cost) {\r\n        require(tierID_ < _tierCount, \"BAD_TIER\");\r\n\r\n        mintTier memory tier = _packTiers[tierID_];\r\n        uint256 finalPrice = price * quantity_;\r\n        require(valueRemaining+1 > finalPrice, \"LOW_PAY\");\r\n\r\n        uint256 _firstID = tier.startIndex + tier.nextIDPlusOne - 1;\r\n        require(_firstID + quantity_ - 1 < tier.endIndex + 1, \"TOO_MANY\");\r\n\r\n        for(uint256 i = 0; i < quantity_; i++) {\r\n            _safeMint(recipient, _firstID, \"\");\r\n            _firstID++;\r\n        }\r\n\r\n        tier.nextIDPlusOne += uint32(quantity_);\r\n        _packTiers[tierID_] = tier;\r\n\r\n        return finalPrice;\r\n    }\r\n\r\n    function mintTokenPresale(purchaseData memory data_, uint256 valueRemaining_) internal validSignature(data_) returns (uint256 valueRemaining) {\r\n        require(data_.tierID < _tierCount, \"BAD_TIER\");\r\n\r\n        uint quantityMintable = 0;\r\n        for(uint i = 0; i < _whitelistBits.length && quantityMintable < data_.quantity; i++) {\r\n            uint256 wlBitBlock = _whitelistBits[i];\r\n            if(data_.whitelistBits[i] & wlBitBlock > 0) {\r\n                wlBitBlock = wlBitBlock &~ data_.whitelistBits[i];\r\n                quantityMintable++;\r\n                _whitelistBits[i] = wlBitBlock;\r\n            }\r\n        }\r\n\r\n        require(quantityMintable >= data_.quantity, \"TOO_MANY_WL\");\r\n        uint256 price = tierWLPrice(data_.tierID);\r\n        return mintTokenBase(data_.tierID, data_.quantity, valueRemaining_, price, msgSender());\r\n    }\r\n\r\n    function getPreMintRemaingSlotsCount(uint256[] calldata whitelistBits) external view returns (uint) {\r\n        uint quantityMintable = 0;\r\n        for(uint i = 0; i < _whitelistBits.length; i++) {\r\n            uint256 wlBitBlock = _whitelistBits[i];\r\n            if(whitelistBits[i] & wlBitBlock > 0) {\r\n                quantityMintable++;\r\n            }\r\n        }\r\n        return quantityMintable;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows users to deny default approval addresses such as OpenSea\r\n     */\r\n    function toggleOpenSeaApproval(bool revoked) external {\r\n        _revokedDefaultPermissions[msg.sender] = revoked;\r\n    }\r\n\r\n    /**\r\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        override\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n        ProxyRegistry proxyRegistry = ProxyRegistry(_openSeaProxy);\r\n        if (!_revokedDefaultPermissions[owner] && address(proxyRegistry.proxies(owner)) == operator) {\r\n            return true;\r\n        }\r\n\r\n        return super.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n     * Override to handle locked presales\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view override returns (bool) {\r\n        require(_exists(tokenId), \"BAD_ID\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function withdrawEther(address recipient) external onlyOwner {\r\n        address payable _this = payable(address(this));\r\n        require(_this.balance > 0, \"NO_ETHER\");\r\n        (bool success, ) = recipient.call{value: _this.balance}(\"\");\r\n        require(success, \"SEND_FAILED\"); //Address: unable to send value, recipient may have reverted\r\n    }\r\n\r\n    function setTokenApprovalsForOwner(IToken token_) external onlyOwner {\r\n        token_.approve(owner(), ERC721.MAX_UINT);\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractMetadataURI;\r\n    }\r\n}\r\n\r\ninterface ITokenFactory {\r\n    function setBaseOptionURI(string[] memory _baseOptionURIs) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FactoryCannotMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenFactory\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINNEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_packTiers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tierIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"finneyPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextIDPlusOne\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tierCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whiteListStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"}],\"name\":\"addWhitelistBits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"factoryCanMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"factoryMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"whitelistBits\",\"type\":\"uint256[]\"}],\"name\":\"getPreMintRemaingSlotsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tierBaseURI_\",\"type\":\"string[]\"}],\"name\":\"initializeTierURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"enum purchaseType\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistBits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"freeMintIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct purchaseData[]\",\"name\":\"data_\",\"type\":\"tuple[]\"}],\"name\":\"mintTokenComplex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity_\",\"type\":\"uint256\"}],\"name\":\"mintTokenSimple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierID_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"freebieAddresses_\",\"type\":\"address[]\"}],\"name\":\"primeThePump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingItems\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wlWeiPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct remainingNFTData[]\",\"name\":\"remaining\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"whiteListStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"internalType\":\"struct webData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setAllowListSigningAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whiteListStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicStart_\",\"type\":\"uint256\"}],\"name\":\"setDropTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setOSFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tierIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"finneyPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextIDPlusOne\",\"type\":\"uint32\"}],\"internalType\":\"struct mintTier[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"}],\"name\":\"setPackTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newEndIndex\",\"type\":\"uint32\"}],\"name\":\"setReducedPackTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setTokenApprovalsForOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"name\":\"toggleOpenSeaApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Microgas721", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1000000000000000000000000000000000000000000000000000000000000001c54656e6e6973204368616d70732047656e65736973205365726965730000000000000000000000000000000000000000000000000000000000000000000000064348414d50530000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a29abfee7d6730e7fd852e2c832c12b577327c0aacc557a3bcab8a0c8d7e82f8"}]}