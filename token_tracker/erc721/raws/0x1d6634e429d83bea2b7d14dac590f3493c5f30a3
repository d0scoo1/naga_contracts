{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Elders/Elders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\"; \\r\\nimport \\\"./EldersDataStructures.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n\\r\\n//VIXED THE ISSUE IN THIS VERION\\r\\n\\r\\ncontract Elders is ERC721 {\\r\\n\\r\\n    function name() external pure returns (string memory) { return \\\"EthernalElves Elders\\\"; }\\r\\n    function symbol() external pure returns (string memory) { return \\\"ELD\\\"; }\\r\\n       \\r\\n    using EldersDataStructures for EldersDataStructures.EldersMeta;\\r\\n\\r\\n    IERC1155Lite public artifacts;\\r\\n    IEldersMetaDataHandler public eldermetaDataHandler;\\r\\n\\r\\n    bool private initialized;\\r\\n    bool public isMintOpen;\\r\\n    bool public isRevealed;    \\r\\n    address public validator;   \\r\\n    uint256 public pvConstant;\\r\\n    uint256[3][6] public baseValues;\\r\\n    uint256[3][6] public uniques;\\r\\n    uint256 uniquesCount;\\r\\n    bytes32 ketchup;\\r\\n    \\r\\n    mapping(uint256 => uint256) public eldersMeta; //memory slot for Elder Metadata\\r\\n    mapping(uint256 => address) public elderOwner; //memory slot for Owners, Timestamp and Actions    \\r\\n    mapping(address => bool)    public auth; //memory slot for Authorized addresses\\r\\n    mapping(bytes => uint256)  public usedSignatures; //memory slot for used signatures\\r\\n\\r\\n    uint256[5][6] private uniqueBodys;\\r\\n    uint256 uniqueBodyCount;\\r\\n\\r\\n    function initialize() public {\\r\\n    \\r\\n       require(!initialized, \\\"Already initialized\\\");\\r\\n       admin                = msg.sender;   \\r\\n       maxSupply            = 2222; \\r\\n       initialized          = true;\\r\\n       validator            = 0x5A5f094437df669a2ec79a99589bB0E7aa9c26Bb;\\r\\n       pvConstant           = 200;\\r\\n       baseValues[0]        = [15,20,25];\\r\\n       baseValues[1]        = [15,20,25];\\r\\n       baseValues[2]        = [20,25,15];\\r\\n       baseValues[3]        = [20,25,15];\\r\\n       baseValues[4]        = [25,15,20];\\r\\n       baseValues[5]        = [25,15,20];\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function mint(uint256 quantity) external returns (uint256 id) {\\r\\n    \\r\\n        isPlayer();\\r\\n        require(isMintOpen, \\\"Minting is closed\\\");\\r\\n        uint256 price = totalSupply <= 1800 ? 7 : 11;\\r\\n        uint256 totalCost = price * quantity;\\r\\n\\r\\n        require(artifacts.balanceOf(msg.sender, 1) >= totalCost, \\\"Not Enough Artifacts\\\");\\r\\n        require(maxSupply - quantity >= 0, \\\"No Elders Left\\\");        \\r\\n        \\r\\n        artifacts.burn(msg.sender, 1, totalCost);\\r\\n\\r\\n        return _mintElder(msg.sender, quantity);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n     function _mintElder(address _to, uint256 qty) private returns (uint16 id) {\\r\\n        ////\\r\\n        for(uint256 i = 0; i < qty; i++) {\\r\\n        \\r\\n        id = uint16(totalSupply + 1);   \\r\\n        \\r\\n        uint256 rand = _rand() + i; \\r\\n        \\r\\n        uint256 uniqueChance = uint256(_randomize(rand, \\\"Unique\\\", id)) % 10000;\\r\\n\\r\\n        EldersDataStructures.EldersMeta memory elders;        \\r\\n        \\r\\n               \\r\\n\\r\\n            elders.elderClass           = uint256(_randomize(rand, \\\"Class\\\", id)) % 6;\\r\\n            elders.strength             = baseValues[elders.elderClass][0];\\r\\n            elders.agility              = baseValues[elders.elderClass][1];\\r\\n            elders.intellegence         = baseValues[elders.elderClass][2];  \\r\\n\\r\\n            elders.healthPoints         = pvConstant+((((elders.elderClass + elders.strength))*elders.strength)/10);\\r\\n            elders.attackPoints         = (elders.agility * 65/100) + (elders.strength * 35/100);\\r\\n            elders.mana                 = pvConstant+((((elders.elderClass + elders.intellegence))*elders.intellegence)/10);\\r\\n\\r\\n            elders.primaryWeapon        = 1;\\r\\n            elders.secondaryWeapon      = 1;\\r\\n            elders.armor                = 1;\\r\\n            elders.level                = 1;\\r\\n\\r\\n            elders.head                 = uint256((uint256(_randomize(rand, \\\"head\\\", id)) % 16) + 1);            \\r\\n            elders.race                 = uint256((uint256(_randomize(rand, \\\"race\\\", id) % 4)) + 1);\\r\\n\\r\\n            uint256 uniqueId = ((rand % 2) + 3);       \\r\\n            \\r\\n           \\r\\n           \\r\\n        if(uniqueChance < (uniqueBodyCount + 1) * 35 && uniqueBodys[elders.elderClass][uniqueId] == 0) {\\r\\n\\r\\n            uniqueBodys[elders.elderClass][uniqueId] = id;\\r\\n            elders.body     = uniqueId;\\r\\n            uniqueBodyCount++;\\r\\n            //console.log(\\\"class: \\\", elders.elderClass, \\\"body: \\\", uniqueId);\\r\\n            //console.log(id);\\r\\n\\r\\n        }else{\\r\\n\\r\\n            elders.body                 = uint256((uint256(_randomize(rand, \\\"body\\\", id)) % 2) + 13);        \\r\\n\\r\\n        }\\r\\n\\r\\n            eldersMeta[id] = EldersDataStructures.setElder( elders.strength, elders.agility, elders.intellegence,  \\r\\n                                                            elders.attackPoints, elders.healthPoints, elders.mana, \\r\\n                                                            elders.primaryWeapon, elders.secondaryWeapon, elders.armor,\\r\\n                                                            elders.level, elders.head, elders.body, elders.race, \\r\\n                                                            elders.elderClass);           \\r\\n\\r\\n         _mint(_to, id);           \\r\\n\\r\\n        }\\r\\n     \\r\\n     }\\r\\n\\r\\n    function tokenURI(uint256 _id) external view returns(string memory) {\\r\\n\\r\\n      //return eldermetaDataHandler.getTokenURI(uint16(_id), eldersMeta[_id], isRevealed);\\r\\n      string memory tokenURI = 'https://ee-metadata-api.herokuapp.com/api/elders/';\\r\\n      return string(abi.encodePacked(tokenURI, Strings.toString(_id)));\\r\\n\\r\\n    }\\r\\n\\r\\n    function tokenURIOnChain(uint256 _id) external view returns(string memory) {\\r\\n\\r\\n     return eldermetaDataHandler.getTokenURI(uint16(_id), eldersMeta[_id], isRevealed);     \\r\\n\\r\\n    }\\r\\n\\r\\n    function getElder(uint256 _id) external view returns(EldersDataStructures.EldersMeta memory) {\\r\\n\\r\\n      return EldersDataStructures.getElder(eldersMeta[_id]);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function generateElderDna(\\r\\n                uint256 strength,\\r\\n                uint256 agility,\\r\\n                uint256 intellegence,\\r\\n                uint256 primaryWeapon, \\r\\n                uint256 secondaryWeapon,\\r\\n                uint256 armor,\\r\\n                uint256 level,\\r\\n                uint256 head,\\r\\n                uint256 body,\\r\\n                uint256 race,\\r\\n                uint256 elderClass\\r\\n    )\\r\\n    external view returns (uint256 elderDNA) {\\r\\n\\r\\n        EldersDataStructures.EldersMeta memory elders;             \\r\\n\\r\\n            elders.strength             = strength;\\r\\n            elders.agility              = agility;\\r\\n            elders.intellegence         = intellegence;\\r\\n            elders.healthPoints         = pvConstant+((((elderClass + strength))*strength)/10);\\r\\n            elders.attackPoints         = (agility * 65/100) + (strength * 35/100);\\r\\n            elders.mana                 = pvConstant+((((elderClass + intellegence))*intellegence)/10);\\r\\n            elders.primaryWeapon        = primaryWeapon;\\r\\n            elders.secondaryWeapon      = secondaryWeapon;\\r\\n            elders.armor                = armor;\\r\\n            elders.level                = level;\\r\\n            elders.head                 = head;                   \\r\\n            elders.body                 = body;\\r\\n            elders.race                 = race;\\r\\n            elders.elderClass           = elderClass;\\r\\n\\r\\n        elderDNA = EldersDataStructures.setElder(  elders.strength, elders.agility, elders.intellegence,  \\r\\n                                            elders.attackPoints, elders.healthPoints, elders.mana, \\r\\n                                            elders.primaryWeapon, elders.secondaryWeapon, elders.armor,\\r\\n                                            elders.level, elders.head, elders.body, elders.race, \\r\\n                                            elders.elderClass); \\r\\n        return elderDNA;\\r\\n     \\r\\n    }\\r\\n\\r\\n\\r\\n    function decodeElderDna(uint256 character) external view returns(EldersDataStructures.EldersMeta memory) {\\r\\n      return EldersDataStructures.getElder(character);\\r\\n    } \\r\\n\\r\\n\\r\\n    \\r\\n    function stake(uint256[] calldata _id) external {\\r\\n\\r\\n         isPlayer();\\r\\n          \\r\\n         for(uint256 i = 0; i < _id.length; i++) {\\r\\n         isElderOwner(_id[i]);         \\r\\n         require(ownerOf[_id[i]] != address(this));\\r\\n         _transfer(msg.sender, address(this), _id[i]);      \\r\\n         elderOwner[_id[i]] = msg.sender;\\r\\n         }\\r\\n                    \\r\\n    }\\r\\n\\r\\n     function unstake(uint256[] calldata _id, uint256[] calldata elder, bytes[] memory signatures, bytes[] memory authCodes) external {\\r\\n\\r\\n         isPlayer();\\r\\n         address owner = msg.sender;\\r\\n\\r\\n          for (uint256 index = 0; index < _id.length; index++) {  \\r\\n            isElderOwner(_id[index]);\\r\\n            require(usedSignatures[signatures[index]] == 0, \\\"Signature already used\\\");   \\r\\n            require(_isSignedByValidator(encodeSentinelForSignature(_id[index], owner, elder[index], authCodes[index]),signatures[index]), \\\"incorrect signature\\\");\\r\\n            usedSignatures[signatures[index]] = 1;\\r\\n\\r\\n            eldersMeta[_id[index]] = elder[index];//add new dna from gameplay\\r\\n            elderOwner[_id[index]] = address(0);\\r\\n            _transfer(address(this), owner, _id[index]);      \\r\\n\\r\\n            }\\r\\n                    \\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n/*\\r\\n\\r\\n\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\\r\\n\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2580\u2003\u2588\u2003\u2588\u2580\u2591\u2003\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2584\u2588\\r\\n*/\\r\\n\\r\\n    function onlyOperator() internal view {    \\r\\n       require(auth[msg.sender] == true, \\\"not operator\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    function onlyOwner() internal view {    \\r\\n        require(admin == msg.sender, \\\"not admin\\\");\\r\\n    }\\r\\n\\r\\n    function isPlayer() internal {    \\r\\n        uint256 size = 0;\\r\\n        address acc = msg.sender;\\r\\n        assembly { size := extcodesize(acc)}\\r\\n        require((msg.sender == tx.origin && size == 0));\\r\\n        ketchup = keccak256(abi.encodePacked(acc, block.coinbase));\\r\\n    }\\r\\n\\r\\n    function isElderOwner(uint256 id) internal view {    \\r\\n        require(msg.sender == elderOwner[id] || msg.sender == ownerOf[id], \\\"not your elder\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n    function _rand() internal view returns (uint256) {\\r\\n    return uint256(keccak256(abi.encodePacked(msg.sender, block.difficulty, block.timestamp, block.basefee, ketchup)));}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/*\\r\\n\u2584\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003 \u2003\u2588\u2580\u2580\u2003\u2588\u2591\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2580\u2588\u2580\u2003\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\\r\\n\u2588\u2580\u2588\u2003\u2588\u2584\u2580\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003 \u2003\u2588\u2580\u2591\u2003\u2588\u2584\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2591\u2588\u2591\u2003\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2584\u2588\\r\\n*/\\r\\n\\r\\n    function setAddresses(address _artifacts, address _inventory)  public {\\r\\n       onlyOwner();\\r\\n       \\r\\n       artifacts            = IERC1155Lite(_artifacts);\\r\\n       eldermetaDataHandler   = IEldersMetaDataHandler(_inventory);\\r\\n       \\r\\n    } \\r\\n\\r\\n    function flipMint () public {\\r\\n        onlyOwner();\\r\\n        isMintOpen = !isMintOpen;\\r\\n    }\\r\\n\\r\\n    function flipReveal () public {\\r\\n        onlyOwner();\\r\\n        isRevealed = !isRevealed;\\r\\n    }   \\r\\n\\r\\n    function setValidator(address _validator)  public {\\r\\n       onlyOwner();\\r\\n       validator = _validator;\\r\\n    }\\r\\n    \\r\\n    function setAuth(address[] calldata adds_, bool status) public {\\r\\n       onlyOwner();\\r\\n       \\r\\n        for (uint256 index = 0; index < adds_.length; index++) {\\r\\n            auth[adds_[index]] = status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function encodeSentinelForSignature(uint256 id, address owner, uint256 elder, bytes memory authCode) public pure returns (bytes32) {\\r\\n        return keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", \\r\\n                    keccak256(\\r\\n                            abi.encodePacked(id, owner, elder, authCode))\\r\\n                            )\\r\\n                        );\\r\\n    } \\r\\n\\r\\n\\r\\n    function _isSignedByValidator(bytes32 _hash, bytes memory _signature) private view returns (bool) {\\r\\n                \\r\\n                bytes32 r;\\r\\n                bytes32 s;\\r\\n                uint8 v;\\r\\n                    assembly {\\r\\n                            r := mload(add(_signature, 0x20))\\r\\n                            s := mload(add(_signature, 0x40))\\r\\n                            v := byte(0, mload(add(_signature, 0x60)))\\r\\n                        }\\r\\n                    \\r\\n                        address signer = ecrecover(_hash, v, r, s);\\r\\n                        return signer == validator;\\r\\n  \\r\\n            }\\r\\n     \\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Elders/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.12;\\r\\n\\r\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\r\\n/// including the MetaData, and partially, Enumerable extensions.\\r\\ncontract ERC721 {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                  EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address implementation_;\\r\\n    address public admin;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ERC-721 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public maxSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             VIEW FUNCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return admin;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-20-LIKE LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function transfer(address to, uint256 tokenId) external {\\r\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\r\\n\\r\\n        _transfer(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-721 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        external\\r\\n        pure\\r\\n        returns (bool supported)\\r\\n    {\\r\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 tokenId) external {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner_ || isApprovedForAll[owner_][msg.sender],\\r\\n            \\\"NOT_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[tokenId] = spender;\\r\\n\\r\\n        emit Approval(owner_, spender, tokenId);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner_ ||\\r\\n                msg.sender == getApproved[tokenId] ||\\r\\n                isApprovedForAll[owner_][msg.sender],\\r\\n            \\\"NOT_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\\r\\n        transferFrom(from, to, tokenId);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\r\\n            (, bytes memory returned) = to.staticcall(\\r\\n                abi.encodeWithSelector(\\r\\n                    0x150b7a02,\\r\\n                    msg.sender,\\r\\n                    from, \\r\\n                    tokenId,\\r\\n                    data\\r\\n                )\\r\\n            );\\r\\n\\r\\n            bytes4 selector = abi.decode(returned, (bytes4));\\r\\n\\r\\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          INTERNAL UTILS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\r\\n        \\r\\n        require(ownerOf[tokenId] == from);\\r\\n\\r\\n        balanceOf[from]--;\\r\\n        balanceOf[to]++;\\r\\n\\r\\n        delete getApproved[tokenId];\\r\\n\\r\\n        ownerOf[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\r\\n        require(totalSupply++ <= maxSupply, \\\"MAX SUPPLY REACHED\\\");\\r\\n\\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        ownerOf[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\r\\n\\r\\n        totalSupply--;\\r\\n        balanceOf[owner_]--;\\r\\n\\r\\n        delete ownerOf[tokenId];\\r\\n\\r\\n        emit Transfer(owner_, address(0), tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Elders/EldersDataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary EldersDataStructures {\\r\\n\\r\\nstruct EldersMeta {\\r\\n            uint256 strength;\\r\\n            uint256 agility;\\r\\n            uint256 intellegence;\\r\\n            uint256 healthPoints;\\r\\n            uint256 attackPoints; \\r\\n            uint256 mana;\\r\\n            uint256 primaryWeapon; \\r\\n            uint256 secondaryWeapon; \\r\\n            uint256 armor; \\r\\n            uint256 level;\\r\\n            uint256 head;                       \\r\\n            uint256 body;  \\r\\n            uint256 race;  \\r\\n            uint256 elderClass;                                     \\r\\n}\\r\\n\\r\\n  \\r\\nfunction getElder(uint256 _elder) internal pure returns(EldersMeta memory elder) {\\r\\n\\r\\n    elder.strength =         uint256(uint16(_elder));\\r\\n    elder.agility =          uint256(uint16(_elder>>16));\\r\\n    elder.intellegence =     uint256(uint16(_elder>>32));\\r\\n    elder.attackPoints =     uint256(uint16(_elder>>48));\\r\\n    elder.healthPoints =     uint256(uint16(_elder>>64));\\r\\n    elder.mana =             uint256(uint16(_elder>>80));\\r\\n    elder.primaryWeapon =    uint256(uint16(_elder>>96));\\r\\n    elder.secondaryWeapon =  uint256(uint16(_elder>>112));\\r\\n    elder.armor =            uint256(uint16(_elder>>128));\\r\\n    elder.level =            uint256(uint16(_elder>>144));\\r\\n    elder.head =             uint256(uint16(_elder>>160));\\r\\n    elder.body =             uint256(uint16(_elder>>176));\\r\\n    elder.race =             uint256(uint16(_elder>>192));\\r\\n    elder.elderClass =       uint256(uint16(_elder>>208));    \\r\\n\\r\\n} \\r\\n\\r\\nfunction setElder(\\r\\n                uint256 strength,\\r\\n                uint256 agility,\\r\\n                uint256 intellegence,                \\r\\n                uint256 attackPoints,\\r\\n                uint256 healthPoints, \\r\\n                uint256 mana,\\r\\n                uint256 primaryWeapon, \\r\\n                uint256 secondaryWeapon,\\r\\n                uint256 armor,\\r\\n                uint256 level,\\r\\n                uint256 head,\\r\\n                uint256 body,\\r\\n                uint256 race,\\r\\n                uint256 elderClass )\\r\\n\\r\\n    internal pure returns (uint256 character) {\\r\\n\\r\\n    character = uint256(strength);\\r\\n    \\r\\n    character |= agility<<16;\\r\\n    character |= intellegence<<32;\\r\\n    character |= attackPoints<<48;\\r\\n    character |= healthPoints<<64;\\r\\n    character |= mana<<80;\\r\\n    character |= primaryWeapon<<96;\\r\\n    character |= secondaryWeapon<<112;\\r\\n    character |= armor<<128;\\r\\n    character |= level<<144;\\r\\n    character |= head<<160;\\r\\n    character |= body<<176;\\r\\n    character |= race<<192;\\r\\n    character |= elderClass<<208;\\r\\n    \\r\\n    return character;\\r\\n}\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Elders/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IERC20Lite {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function burn(address from, uint256 value) external;\\r\\n    function mint(address to, uint256 value) external; \\r\\n    function approve(address spender, uint256 value) external returns (bool); \\r\\n    function balanceOf(address account) external returns (uint256); \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IElfMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IEldersMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel, bool isRevealed) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ICampaigns {\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory);\\r\\n}\\r\\n\\r\\ninterface IElves {    \\r\\n    function prismBridge(uint256[] calldata id, uint256[] calldata sentinel, address owner) external;    \\r\\n    function exitElf(uint256[] calldata ids, address owner) external;\\r\\n    function setAccountBalance(address _owner, uint256 _amount, bool _subtract, uint256 _index) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Lite {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface IERC1155Lite {\\r\\n    function burn(address from,uint256 id, uint256 value) external;\\r\\n    function balanceOf(address _owner, uint256 _id) external returns (uint256); \\r\\n}\\r\\n\\r\\n \\r\\n//1155\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n  function setApprovalForAll(address _operator, bool _approved) external;\\r\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n}\\r\\n\\r\\ninterface IERC1155Metadata {\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n  function uri(uint256 _id) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\r\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artifacts\",\"outputs\":[{\"internalType\":\"contract IERC1155Lite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"character\",\"type\":\"uint256\"}],\"name\":\"decodeElderDna\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intellegence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"race\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elderClass\",\"type\":\"uint256\"}],\"internalType\":\"struct EldersDataStructures.EldersMeta\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elderOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eldermetaDataHandler\",\"outputs\":[{\"internalType\":\"contract IEldersMetaDataHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eldersMeta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"elder\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"authCode\",\"type\":\"bytes\"}],\"name\":\"encodeSentinelForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intellegence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"race\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elderClass\",\"type\":\"uint256\"}],\"name\":\"generateElderDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"elderDNA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getElder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intellegence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"race\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elderClass\",\"type\":\"uint256\"}],\"internalType\":\"struct EldersDataStructures.EldersMeta\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pvConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artifacts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inventory\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURIOnChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniques\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"elder\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"authCodes\",\"type\":\"bytes[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Elders", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}