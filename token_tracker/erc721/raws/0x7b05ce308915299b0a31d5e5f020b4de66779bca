{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BSGGStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IBSGGStaking.sol\\\";\\n\\ncontract BSGGStaking is IBSGGStaking, ERC721, ERC721Enumerable, Pausable, Ownable {\\n    uint32 public ticketCounter;\\n    uint32 public ticketTypeCounter;\\n\\n    // Stake holders can withdraw the amounts they staked, no profit\\n    bool public emergencyMode = false;\\n\\n    // Shortlisted accounts only can by tickets\\n    bool public privilegedMode = false;\\n\\n    // Accounts which can buy tickets when privilegedMode is enbabled\\n    mapping(address => bool) public privilegedAccounts;\\n\\n    IERC20 public immutable BSGG;\\n\\n    mapping(uint => Ticket) public tickets;\\n    mapping(uint => TicketType) public ticketTypes;\\n\\n\\n    // If min / max limit mode is enabled\\n    bool public maxLimitMode = false;\\n\\n    // Limit the min volumes accounts can stake\\n    uint public minLimitAmount;\\n\\n    // Limit the max volumes accounts can stake at a time\\n    uint public maxLimitAmount;\\n    \\n\\n    // Total staked amount by the account. Limiting by the maxLimitAmount;\\n    // ticketType => address => amount\\n    mapping(uint => mapping(address => uint)) public activeStaked;\\n\\n    modifier allGood() {\\n        require(!emergencyMode, \\\"Emergency mode is enabled. Withdrawal only\\\");\\n        _;\\n    }\\n\\n    modifier alarmed() {\\n        require(emergencyMode, \\\"Emergency mode is not activated\\\");\\n        _;\\n    }\\n\\n    modifier minMaxLimit(uint _ticketTypeId, uint _amount) {\\n        if (maxLimitMode == true) {\\n            uint stakedAlready = activeStaked[_ticketTypeId][msg.sender];\\n            require((_amount + stakedAlready) <= maxLimitAmount, \\\"Max staked amount per account is reached\\\");\\n            require((stakedAlready + _amount) >= minLimitAmount, \\\"Amount is less than min allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(IERC20 _BSGG) ERC721(\\\"BSGGStaking\\\", \\\"BSGGStaking\\\") {\\n        BSGG = _BSGG;\\n    }\\n\\n    /// @notice Pause new Staking\\n    /// @return bool\\n    function pause() external onlyOwner returns (bool) {\\n        _pause();\\n        emit Paused(true);\\n        return true;\\n    }\\n\\n    /// @notice Unpause new Staking\\n    /// @return bool\\n    function unpause() external onlyOwner returns (bool){\\n        _unpause();\\n        emit Paused(false);\\n        return true;\\n    }\\n\\n    /// @notice Allocate BSGG for distribution\\n    /// @param _amount Amount of BSGG\\n    /// @param _ticketTypeId Ticket id that will be funded\\n    /// @return bool\\n    function allocateBSGG(uint _amount, uint _ticketTypeId) external onlyOwner allGood returns (bool) {\\n        require(_ticketTypeId < ticketTypeCounter, \\\"Bad ticket type\\\");\\n        require(ticketTypes[_ticketTypeId].active == true, \\\"Ticket type must be active\\\");\\n        require(_amount <= BSGG.balanceOf(msg.sender), \\\"Insuficient funds\\\");\\n        require(_amount <= BSGG.allowance(msg.sender, address(this)), \\\"Allowance required\\\");\\n        \\n        uint16 totalSeasons = uint16(ticketTypes[_ticketTypeId].seasons.length);\\n        uint16 currentSeason = this.currentSeasonId(_ticketTypeId);\\n\\n        totalSeasons -= currentSeason;\\n\\n        uint amountPerSeason = uint(_amount / totalSeasons);\\n        uint amountLeft = _amount;\\n\\n        for (uint16 i = currentSeason; i < uint16(ticketTypes[_ticketTypeId].seasons.length); i++) {\\n            uint currentSeasonAmount = amountPerSeason;\\n\\n            // Last season takes the rest amount in full\\n            if (i == (uint16(ticketTypes[_ticketTypeId].seasons.length) - 1)) {\\n                currentSeasonAmount = amountLeft;\\n            }\\n\\n            if (currentSeasonAmount > 0) {\\n                ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation += currentSeasonAmount;\\n                ticketTypes[_ticketTypeId].seasons[i].BSGGAllTimeAllocation += currentSeasonAmount;\\n\\n                amountLeft -= currentSeasonAmount;\\n            }   \\n        }\\n\\n        // Send Tokens to Staking Smart Contract\\n        bool success = BSGG.transferFrom(msg.sender, address(this), _amount);\\n        \\n        require(success == true, \\\"Transfer Failed\\\");\\n\\n        emit AllocatedNewBSGG(_amount, _ticketTypeId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Creates a new ticket type\\n    /// @param _minLockAmount Minimal amount of BSGG to stake\\n    /// @param _lockDuration Fund lock period in seconds\\n    /// @param _gainMultiplier Total reward rate per stake period (0 - 0%, 1500000 is 150%)\\n    /// @param _seasons Total number of seasons\\n    /// @return bool\\n    function addTicketType(\\n        uint128 _minLockAmount,\\n        uint32 _lockDuration,\\n        uint32 _gainMultiplier,\\n        uint16 _seasons\\n    ) external onlyOwner allGood returns (bool) {\\n        require(_minLockAmount >= 1 ether, \\\"Bad minimum lock amount\\\");\\n        require(_lockDuration >= 1 hours, \\\"Lock duration is too short\\\");\\n        require(_gainMultiplier > 0, \\\"Gain multiplier lower or equal to base\\\");\\n        require(_seasons > 0, \\\"Seasons must be equal to 1 or higher\\\");\\n\\n        ticketTypes[ticketTypeCounter].id               = ticketTypeCounter;\\n        ticketTypes[ticketTypeCounter].active           = true;\\n        ticketTypes[ticketTypeCounter].minLockAmount    = _minLockAmount;\\n        ticketTypes[ticketTypeCounter].lockDuration     = _lockDuration;\\n        ticketTypes[ticketTypeCounter].gainMultiplier   = _gainMultiplier;\\n        ticketTypes[ticketTypeCounter].APR              = uint(_gainMultiplier) * 365 * 86400 / uint(_lockDuration);\\n\\n        uint timeStart = block.timestamp;\\n\\n        // Create seasons for ticket type\\n        for (uint16 i = 0; i < _seasons; i++) {\\n            Season memory s = Season({\\n                startTime: timeStart,\\n                BSGGAllocation: 0,\\n                BSGGAllTimeAllocation: 0,\\n                BSGGTotalTokensLocked: 0\\n            });\\n\\n            ticketTypes[ticketTypeCounter].seasons.push(s);\\n            timeStart += _lockDuration;\\n        }\\n\\n        ticketTypeCounter++;\\n\\n        emit TicketTypeAdded(ticketTypeCounter);\\n\\n        return true;\\n    }\\n\\n    /// @notice Updates a ticket type, for new stake holders only\\n    /// @param _id Ticket type id\\n    /// @param _minLockAmount Minimal amount of BSGG to stake\\n    /// @param _lockDuration Fund lock period in seconds\\n    /// @param _gainMultiplier Total reward rate per stake period (0 - 0%, 1500000 is 150%)\\n    /// @return bool\\n    function updateTicketType(\\n        uint32 _id,\\n        uint128 _minLockAmount,\\n        uint32 _lockDuration,\\n        uint32 _gainMultiplier\\n    ) external onlyOwner allGood returns(bool) {\\n        require(_id < ticketTypeCounter, \\\"Invalid ticket type\\\");\\n        require(_minLockAmount >= 1 ether, \\\"Invalid minimum lock amount\\\");\\n        require(_lockDuration >= 1 hours, \\\"Lock duration is too short\\\");\\n        require(_gainMultiplier > 0, \\\"Gain multiplier is lower or equal to base\\\");\\n\\n        ticketTypes[_id].minLockAmount    = _minLockAmount;\\n        ticketTypes[_id].lockDuration     = _lockDuration;\\n        ticketTypes[_id].gainMultiplier   = _gainMultiplier;\\n        ticketTypes[_id].APR = uint(_gainMultiplier) * 365 * 86400 / uint(_lockDuration);\\n\\n        emit TicketTypeUpdated(_id);\\n\\n        return true;\\n    }\\n\\n    /// @notice Deactivate a ticket type\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return bool\\n    function deactivateTicketType(uint32 _ticketTypeId) external onlyOwner allGood returns(bool) {\\n        require( _ticketTypeId < ticketTypeCounter, \\\"Not existing ticket type id\\\");\\n        ticketTypes[_ticketTypeId].active = false;\\n\\n        emit TicketTypeUpdated(_ticketTypeId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Activate selected ticket type\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return bool\\n    function activateTicketType(uint32 _ticketTypeId) external onlyOwner allGood returns(bool) {\\n        require( _ticketTypeId < ticketTypeCounter, \\\"Not existing ticket type id\\\");\\n        ticketTypes[_ticketTypeId].active = true;\\n\\n        emit TicketTypeUpdated(_ticketTypeId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Stake and lock BSGG\\n    /// @param _amount BSGG stake amount\\n    /// @param _ticketTypeId ticket type id\\n    /// @param _to ticket receiver\\n    /// @return bool\\n    function buyTicket(\\n        uint _amount, \\n        uint32 _ticketTypeId, \\n        address _to\\n    ) external override whenNotPaused allGood minMaxLimit(_ticketTypeId, _amount) returns(bool) {\\n        require(ticketTypes[_ticketTypeId].active, \\\"Ticket is not available\\\");\\n        require(_amount >= ticketTypes[_ticketTypeId].minLockAmount, \\\"Too small stake amount\\\");\\n        require(_amount <= BSGG.balanceOf(msg.sender), \\\"Insuficient funds\\\");\\n        require(_amount <= BSGG.allowance(msg.sender, address(this)), \\\"Allowance is required\\\");\\n        \\n        uint amountToGain = (_amount * ticketTypes[_ticketTypeId].gainMultiplier) / 1e6;\\n\\n        uint16 currentSeason = this.currentSeasonId(_ticketTypeId);\\n\\n        require(amountToGain <= ticketTypes[_ticketTypeId].seasons[currentSeason].BSGGAllocation, \\\"Sold out\\\");\\n\\n        if (privilegedMode == true) {\\n            require(privilegedAccounts[msg.sender] == true, \\\"Privileged mode is enabled\\\");\\n        }\\n\\n        uint32 ticketId = ++ticketCounter;\\n\\n        tickets[ticketId].id                 = ticketId;\\n        tickets[ticketId].ticketType         = _ticketTypeId;\\n        tickets[ticketId].seasonId           = currentSeason;\\n        tickets[ticketId].mintTimestamp      = block.timestamp;\\n        tickets[ticketId].lockedToTimestamp  = block.timestamp + ticketTypes[_ticketTypeId].lockDuration;\\n        tickets[ticketId].amountLocked       = _amount;\\n        tickets[ticketId].amountToGain       = amountToGain;\\n\\n        // Re-allocate unused amount from previous seasons\\n        _reallocateSeasonUnallocated(_ticketTypeId, currentSeason);\\n\\n        ticketTypes[_ticketTypeId].seasons[currentSeason].BSGGTotalTokensLocked += _amount;\\n        ticketTypes[_ticketTypeId].seasons[currentSeason].BSGGAllocation -= tickets[ticketId].amountToGain;\\n\\n        activeStaked[_ticketTypeId][msg.sender] += _amount;\\n\\n        (bool success) = BSGG.transferFrom(msg.sender, address(this), _amount);\\n        require(success == true, \\\"Transfer Failed\\\");\\n\\n        // Mint the token\\n        _safeMint(_to, ticketId);\\n\\n        emit TicketBought(\\n            _to, \\n            ticketId, \\n            _amount,\\n            tickets[ticketId].amountToGain, \\n            ticketTypes[_ticketTypeId].lockDuration\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Unlock and send staked tokens and rewards to staker(with or without penalties depending on the time passed).\\n    /// @param _ticketId ticket type id\\n    /// @return bool\\n    function redeemTicket(uint _ticketId) external override allGood returns(bool) {\\n        require(ownerOf(_ticketId) == msg.sender, \\\"Not token owner\\\");\\n\\n        (uint pendingStakeAmountToWithdraw, uint pendingRewardTokensToClaim) = this.getPendingTokens(_ticketId);\\n        uint totalAmountToWithdraw = pendingStakeAmountToWithdraw + pendingRewardTokensToClaim;\\n\\n        require(totalAmountToWithdraw <= BSGG.balanceOf(address(this)), \\\"Insuficient funds\\\");\\n\\n        uint totalAmountToReAllocate = (tickets[_ticketId].amountToGain - pendingRewardTokensToClaim) + (tickets[_ticketId].amountLocked - pendingStakeAmountToWithdraw);\\n        \\n        ticketTypes[tickets[_ticketId].ticketType].seasons[tickets[_ticketId].seasonId].BSGGAllocation += totalAmountToReAllocate;\\n        ticketTypes[tickets[_ticketId].ticketType].seasons[tickets[_ticketId].seasonId].BSGGTotalTokensLocked -= tickets[_ticketId].amountLocked;\\n\\n        activeStaked[tickets[_ticketId].ticketType][msg.sender] -= tickets[_ticketId].amountLocked;\\n\\n        delete tickets[_ticketId];\\n        _burn(_ticketId);\\n\\n        (bool success) = BSGG.transfer(msg.sender, totalAmountToWithdraw);\\n        require(success == true, \\\"Transfer Failed\\\");\\n\\n        emit TicketRedeemed(msg.sender, _ticketId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Unlock and send staked tokens in case of emergency, staked amount only\\n    /// @param _ticketId ticket type id\\n    /// @return bool\\n    function redeemTicketEmergency(uint _ticketId) external alarmed returns(bool) {\\n        require(ownerOf(_ticketId) == msg.sender, \\\"Not token owner\\\");\\n\\n        require(tickets[_ticketId].amountLocked <= BSGG.balanceOf(address(this)), \\\"Insuficient funds\\\");\\n\\n        uint amountRedeem = tickets[_ticketId].amountLocked;\\n\\n        delete tickets[_ticketId];\\n        _burn(_ticketId);\\n\\n        (bool success) = BSGG.transfer(msg.sender, amountRedeem);\\n        require(success == true, \\\"Transfer Failed\\\");\\n\\n        emit TicketRedeemed(msg.sender, _ticketId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Get amount of staked tokens and reward\\n    /// @param _ticketId Ticket type id\\n    /// @return stakeAmount , rewardAmount\\n    function getPendingTokens(uint _ticketId) external view returns (uint stakeAmount, uint rewardAmount) {\\n        uint lockDuration = tickets[_ticketId].lockedToTimestamp - tickets[_ticketId].mintTimestamp;\\n        uint halfPeriodTimestamp = tickets[_ticketId].lockedToTimestamp - (lockDuration / 2);\\n\\n        if (block.timestamp < tickets[_ticketId].lockedToTimestamp) {\\n            stakeAmount = (tickets[_ticketId].amountLocked * 800000) / 1e6; // 20% penalty applied to staked amount\\n\\n            // If staked for at least the half of the period\\n            if (block.timestamp >= halfPeriodTimestamp){\\n                uint pendingReward = _calculatePendingRewards(\\n                    block.timestamp,\\n                    tickets[_ticketId].mintTimestamp,\\n                    tickets[_ticketId].lockedToTimestamp,\\n                    tickets[_ticketId].amountToGain\\n                );\\n                rewardAmount = pendingReward / 2; // The account can get 50% of pending rewards\\n            }\\n        } else { // Lock period is over. The account can receive all staked and reward tokens.\\n            stakeAmount = tickets[_ticketId].amountLocked;\\n            rewardAmount = tickets[_ticketId].amountToGain;\\n        }\\n    }\\n\\n    /// @notice Checks pending rewards by the date. Returns 0 in deleted ticket Id\\n    /// @param _ticketId Ticket type id\\n    /// @return amount\\n    function getPendingRewards(uint _ticketId) external view returns (uint amount) {\\n        amount = _calculatePendingRewards(\\n            block.timestamp < tickets[_ticketId].lockedToTimestamp ? block.timestamp : tickets[_ticketId].lockedToTimestamp,\\n            tickets[_ticketId].mintTimestamp,\\n            tickets[_ticketId].lockedToTimestamp,\\n            tickets[_ticketId].amountToGain\\n        );\\n    }\\n\\n    /// @notice Outputs parameters of all account tickets\\n    /// @param _account Account Address\\n    /// @return accountInfo\\n    function getAccountInfo(address _account) external view returns(AccountSet memory accountInfo) {\\n        uint countOfTicket = balanceOf(_account);\\n        Ticket[] memory accountTickets = new Ticket[](countOfTicket);\\n        uint allocatedBSGG;\\n        uint pendingBSGGEarning;\\n\\n        for (uint i = 0; i < countOfTicket; i++){\\n            uint ticketId = tokenOfOwnerByIndex(_account, i);\\n            accountTickets[i] = tickets[ticketId];\\n            allocatedBSGG += tickets[ticketId].amountLocked;\\n            pendingBSGGEarning += this.getPendingRewards(ticketId);\\n        }\\n\\n        accountInfo.accountTickets = accountTickets;\\n        accountInfo.allocatedBSGG = allocatedBSGG;\\n        accountInfo.pendingBSGGEarning = pendingBSGGEarning;\\n    }\\n\\n    /// @notice Returns all available tickets and their parameters\\n    /// @return allTicketTypes\\n    function getTicketTypes() external view returns(TicketType[] memory allTicketTypes) {\\n        allTicketTypes = new TicketType[](ticketTypeCounter);\\n        for (uint i = 0; i < ticketTypeCounter; i++) {\\n            allTicketTypes[i] = ticketTypes[i];\\n        }\\n    }\\n\\n    /// @notice TVL across all pools\\n    /// @return TVL Total Tokens Locked in all ticket types\\n    function getTVL() external view returns(uint TVL){\\n        for (uint i = 0; i < ticketTypeCounter; i++) {\\n            for (uint16 j = 0; j < ticketTypes[i].seasons.length; j++) {\\n                TVL += ticketTypes[i].seasons[j].BSGGTotalTokensLocked;\\n                TVL += ticketTypes[i].seasons[j].BSGGAllocation;\\n            }\\n        }\\n    }\\n\\n    /// @notice Get amount the account has active staked in a ticket type\\n    /// @param _ticketTypeId Ticket Type ID\\n    /// @param _account Account\\n    /// @return uint\\n    function getActiveStaked(uint _ticketTypeId, address _account) external view returns (uint) {\\n        return activeStaked[_ticketTypeId][_account];\\n    }\\n\\n    /// @notice Set emergency state\\n    /// @param code A security code. Requiered in case of unaccidentaly call of this function\\n    /// @return bool\\n    function triggerEmergency(uint code) external onlyOwner allGood returns(bool) {\\n        require(code == 111000111, \\\"You need write 111000111\\\");\\n\\n        emergencyMode = true;\\n        _pause();\\n\\n        emit EmergencyModeEnabled();\\n\\n        return true;\\n    }\\n\\n    /// @notice Enable PrivilegedMode, shortlisted accounts only can buy tickets\\n    /// @return bool\\n    function enablePrivilegedMode() external onlyOwner returns(bool) {\\n        privilegedMode = true;\\n        emit PrivilegedMode(privilegedMode);\\n\\n        return true;\\n    }\\n\\n    /// @notice Disable PrivilegedMode, all accounts can buy tickets\\n    /// @return bool\\n    function disablePrivilegedMode() external onlyOwner returns(bool) {\\n        privilegedMode = false;\\n        emit PrivilegedMode(privilegedMode);\\n\\n        return true;\\n    }\\n\\n    /// @notice Add previledged accounts\\n    /// @param _accounts Account to make privileged\\n    /// @return bool\\n    function addPrivilegedAccounts(address[] memory _accounts) external onlyOwner returns(bool) {\\n        require(_accounts.length < 400, \\\"Too many accounts to add\\\");\\n\\n        for (uint16 i = 0; i < _accounts.length; i++) {\\n            privilegedAccounts[_accounts[i]] = true;\\n        }\\n\\n        emit PrivilegedMode(privilegedMode);\\n\\n        return true;\\n    }\\n\\n    /// @notice Remove previledged accounts\\n    /// @param _accounts Account to make privileged\\n    /// @return bool\\n    function removePrivilegedAccounts(address[] memory _accounts) external onlyOwner returns(bool) {\\n        require(_accounts.length < 400, \\\"Too many accounts to remove\\\");\\n\\n        for (uint16 i = 0; i < _accounts.length; i++) {\\n            privilegedAccounts[_accounts[i]] = false;\\n        }\\n\\n        emit PrivilegedMode(privilegedMode);\\n\\n        return true;\\n    }\\n\\n    /// @notice Maximum allocation (balance) available for a season by ticket type id\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return uint256\\n    function maxAllocationSeason(uint _ticketTypeId) external view returns (uint256) {\\n        uint currentTime = block.timestamp;\\n        uint maxBalance = 0;\\n\\n        for (uint16 i = 0; i < ticketTypes[_ticketTypeId].seasons.length; i++) {\\n            if (ticketTypes[_ticketTypeId].seasons[i].startTime > currentTime) {\\n                break;\\n            }\\n\\n            maxBalance += ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation;\\n        }\\n\\n        return maxBalance;\\n    }\\n\\n    /// @notice Total staked amount (balance) by users in ticket type id\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return uint256\\n    function amountLockedSeason(uint _ticketTypeId) external view returns (uint256) {\\n        uint currentTime = block.timestamp;\\n        uint amount = 0;\\n\\n        for (uint16 i = 0; i < ticketTypes[_ticketTypeId].seasons.length; i++) {\\n            if (ticketTypes[_ticketTypeId].seasons[i].startTime > currentTime) {\\n                break;\\n            }\\n\\n            amount += ticketTypes[_ticketTypeId].seasons[i].BSGGTotalTokensLocked;\\n        }\\n\\n        return amount;\\n    }\\n\\n    /// @notice Get current season id by ticket type id\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return uint16\\n    function currentSeasonId(uint _ticketTypeId) external view returns (uint16) {\\n        uint currentTime = block.timestamp;\\n\\n        uint16 seasonId = 0;\\n\\n        for (uint16 i = 0; i < ticketTypes[_ticketTypeId].seasons.length; i++) {\\n            if (ticketTypes[_ticketTypeId].seasons[i].startTime > currentTime) {\\n                break;\\n            }\\n\\n            seasonId = i;\\n        }\\n\\n        return seasonId;\\n    }\\n\\n\\n    /// @notice Withdraw previously allocated BSGG, but only not reserved for accounts\\n    /// @param _amount Amount of BSGG to remove from allocation\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return bool\\n    function withdrawNonReservedBSGG(uint _amount, uint32 _ticketTypeId, uint16 _seasonId, address _account) external onlyOwner returns(bool) {\\n        uint withdrawAmount = ticketTypes[_ticketTypeId].seasons[_seasonId].BSGGAllocation >= _amount ? _amount : ticketTypes[_ticketTypeId].seasons[_seasonId].BSGGAllocation;\\n        \\n        require(withdrawAmount <= BSGG.balanceOf(address(this)), \\\"Insuficient funds\\\");\\n\\n        ticketTypes[_ticketTypeId].seasons[_seasonId].BSGGAllTimeAllocation -= withdrawAmount;\\n        ticketTypes[_ticketTypeId].seasons[_seasonId].BSGGAllocation -= withdrawAmount;\\n\\n        (bool success) = BSGG.transfer(_account, withdrawAmount);\\n        require(success == true, \\\"Transfer Failed\\\");\\n\\n        emit TicketTypeUpdated(_ticketTypeId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Set Max and Min amounts for staking per account\\n    /// @param _minAmount Min amount\\n    /// @param _maxAmount Max amount\\n    /// @param _status Enabled true/ false\\n    /// @return bool\\n    function changeMinMaxLimits(uint _minAmount, uint _maxAmount, bool _status) external onlyOwner returns(bool) {\\n        require(_minAmount <= _maxAmount, \\\"Invalid min and max amounts\\\");\\n\\n        maxLimitMode = _status;\\n        minLimitAmount = _minAmount;\\n        maxLimitAmount = _maxAmount;\\n\\n        emit MinMaxLimitChanged(_minAmount, _maxAmount, _status);\\n\\n        return true;\\n    }\\n\\n    /// @notice Calculates pending rewards\\n    /// @return amount amount\\n    function _calculatePendingRewards(\\n        uint timestamp,\\n        uint mintTimestamp,\\n        uint lockedToTimestamp,\\n        uint amountToGain\\n    ) pure internal returns (uint amount){\\n        return amountToGain * (timestamp - mintTimestamp) / (lockedToTimestamp - mintTimestamp);\\n    }\\n\\n    /// @notice Reuse unallocated balance from previous seasons\\n    /// @param _ticketTypeId Ticket type id\\n    /// @return amount\\n    function _reallocateSeasonUnallocated(uint _ticketTypeId, uint16 _currentSeasonId) internal returns (bool){\\n        uint reAllocationAmount = 0;\\n\\n        for (uint16 i = 0; i < ticketTypes[_ticketTypeId].seasons.length; i++) {\\n            // Season is sold out\\n            if (ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation <= 0) {\\n                continue;\\n            }\\n\\n            // Current season or seson not available yet\\n            if (i == _currentSeasonId || ticketTypes[_ticketTypeId].seasons[i].startTime >= block.timestamp) {\\n                break;\\n            }\\n\\n            reAllocationAmount += ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation;\\n            ticketTypes[_ticketTypeId].seasons[i].BSGGAllTimeAllocation -= ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation;\\n            ticketTypes[_ticketTypeId].seasons[i].BSGGAllocation = 0;\\n        }\\n\\n        if (reAllocationAmount > 0) {\\n            ticketTypes[_ticketTypeId].seasons[_currentSeasonId].BSGGAllTimeAllocation += reAllocationAmount;\\n            ticketTypes[_ticketTypeId].seasons[_currentSeasonId].BSGGAllocation += reAllocationAmount;\\n        }\\n\\n        return true;\\n    }\\n    \\n    function _beforeTokenTransfer(address from, address to, uint ticketId) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, ticketId);\\n    }\\n\\n    /// @notice The following functions are overrides required by Solidity\\n    /// @param interfaceId Interface ID\\n    /// @return bool\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBSGGStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\ninterface IBSGGStaking {\\n    struct Ticket {\\n        uint128 id;\\n        uint32 ticketType;\\n        uint16 seasonId;\\n        uint mintTimestamp;\\n        uint lockedToTimestamp;\\n        uint amountLocked;\\n        uint amountToGain;\\n    }\\n\\n    struct Season {\\n        uint startTime;\\n        uint BSGGAllocation;\\n        uint BSGGAllTimeAllocation;\\n        uint BSGGTotalTokensLocked;\\n    }\\n\\n    struct TicketType {\\n        uint32 id;\\n        bool active;\\n        uint128 minLockAmount;\\n        uint32 lockDuration;\\n        uint32 gainMultiplier;\\n        Season[] seasons;\\n        uint APR;\\n    }\\n\\n    struct AccountSet {\\n        Ticket[] accountTickets;\\n        uint allocatedBSGG;\\n        uint pendingBSGGEarning;\\n    }\\n\\n    event TicketTypeAdded(uint32 ticketTypeId);\\n    event TicketTypeUpdated(uint32 ticketTypeId);\\n    event TicketBought(address owner, uint ticketId, uint stakeAmount, uint gainAmount, uint lockDuration);\\n    event TicketRedeemed(address owner, uint ticketId);\\n    event AllocatedNewBSGG(uint amount, uint ticketTypeId);\\n    event EmergencyModeEnabled();\\n    event PrivilegedMode(bool status);\\n    event Paused(bool status);\\n    event MinMaxLimitChanged(uint minAmount, uint maxAmount, bool status);\\n\\n\\n    function allocateBSGG(uint _amount, uint _ticketTypeId) external returns(bool);\\n    function addTicketType(uint128 _minLockAmount, uint32 _lockDuration, uint32 _gainMultiplier, uint16 _seasons) external returns(bool);\\n    function updateTicketType(uint32 _id, uint128 _minLockAmount, uint32 _lockDuration,uint32 _gainMultiplier) external returns(bool);\\n    function deactivateTicketType(uint32 _ticketTypeId) external returns(bool);\\n    function activateTicketType(uint32 _ticketTypeId) external returns(bool);\\n    function buyTicket(uint _amount, uint32 _ticketTypeId, address _to) external returns(bool);\\n    function redeemTicket(uint _ticketId) external returns(bool);  \\n    function getPendingTokens(uint _ticketId) external view returns (uint, uint);\\n    function getPendingRewards(uint _ticketId) external view returns (uint);\\n    function getAccountInfo(address _account) external view returns(AccountSet memory);\\n    function getTicketTypes() external view returns(TicketType[] memory);\\n    function getTVL() external view returns(uint);\\n    function getActiveStaked(uint _ticketTypeId, address _account) external view returns (uint);\\n    function triggerEmergency(uint code) external returns(bool);\\n    function enablePrivilegedMode() external returns(bool);\\n    function disablePrivilegedMode() external returns(bool);\\n    function addPrivilegedAccounts(address[] memory _accounts) external returns(bool);\\n    function removePrivilegedAccounts(address[] memory _accounts) external returns(bool);\\n    function redeemTicketEmergency(uint _ticketId) external returns(bool);\\n    function maxAllocationSeason(uint _ticketTypeId) external view returns (uint256);\\n    function currentSeasonId(uint _ticketTypeId) external view returns (uint16);\\n    function withdrawNonReservedBSGG(uint _amount, uint32 _ticketTypeId, uint16 _seasonId, address _account) external returns(bool);\\n    function changeMinMaxLimits(uint _minAmount, uint _maxAmount, bool _status) external returns(bool);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_BSGG\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"AllocatedNewBSGG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MinMaxLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PrivilegedMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"TicketRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ticketTypeId\",\"type\":\"uint32\"}],\"name\":\"TicketTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ticketTypeId\",\"type\":\"uint32\"}],\"name\":\"TicketTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BSGG\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_ticketTypeId\",\"type\":\"uint32\"}],\"name\":\"activateTicketType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addPrivilegedAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minLockAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_gainMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_seasons\",\"type\":\"uint16\"}],\"name\":\"addTicketType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"allocateBSGG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"amountLockedSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ticketTypeId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeMinMaxLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"currentSeasonId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_ticketTypeId\",\"type\":\"uint32\"}],\"name\":\"deactivateTicketType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePrivilegedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePrivilegedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"ticketType\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"seasonId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedToTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToGain\",\"type\":\"uint256\"}],\"internalType\":\"struct IBSGGStaking.Ticket[]\",\"name\":\"accountTickets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"allocatedBSGG\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBSGGEarning\",\"type\":\"uint256\"}],\"internalType\":\"struct IBSGGStaking.AccountSet\",\"name\":\"accountInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getActiveStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"getPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"minLockAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gainMultiplier\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BSGGAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BSGGAllTimeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BSGGTotalTokensLocked\",\"type\":\"uint256\"}],\"internalType\":\"struct IBSGGStaking.Season[]\",\"name\":\"seasons\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"}],\"internalType\":\"struct IBSGGStaking.TicketType[]\",\"name\":\"allTicketTypes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"maxAllocationSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privilegedAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privilegedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"redeemTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"redeemTicketEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removePrivilegedAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketTypeCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketTypes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"minLockAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gainMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"ticketType\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"seasonId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedToTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToGain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"triggerEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"_minLockAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_gainMultiplier\",\"type\":\"uint32\"}],\"name\":\"updateTicketType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ticketTypeId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_seasonId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawNonReservedBSGG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BSGGStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000069570f3e84f51ea70b7b68055c8d667e77735a25", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}