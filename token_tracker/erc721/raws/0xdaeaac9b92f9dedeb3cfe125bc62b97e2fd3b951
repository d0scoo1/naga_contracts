{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/MKZVX.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract MKZ {\r\n  function balanceOf(address owner, uint256 id) external virtual view returns (uint256 balance);\r\n}\r\n\r\ncontract MKZVX is ERC721Enumerable, Ownable {  \r\n  MKZ private mkz;\r\n  uint constant public MAX_MKZVX = 500;\r\n  address private openSeaContract = 0x495f947276749Ce646f68AC8c248420045cb7b5e;\r\n  bool public claimIsActive = false;\r\n  uint256 public maxMKZVX;\r\n  string private baseURI;  \r\n\r\n  uint256[] private  mkzTokenId = \r\n                                [\r\n                                106927580289739319741994837130987506128463962128337696457128951090832736256001  ,\r\n                                106927580289739319741994837130987506128463962128337696457128951091932247883777\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951093031759511553\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951094131271139329\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951095230782767105\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951096330294394881\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951097429806022657\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951098529317650433\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951099628829278209\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951100728340905985\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951101827852533761\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951102927364161537\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951104026875789313\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951105126387417089\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951106225899044865\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951107325410672641\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951108424922300417\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951109524433928193\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951110623945555969\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951111723457183745\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951112822968811521\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951113922480439297\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951115021992067073\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951116121503694849\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951117221015322625\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951118320526950401\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951119420038578177\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951120519550205953\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951121619061833729\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951122718573461505\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951123818085089281\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951124917596717057\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951126017108344833\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951127116619972609\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951128216131600385\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951129315643228161\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951130415154855937\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951131514666483713\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951132614178111489\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951133713689739265\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951134813201367041\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951135912712994817\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951137012224622593\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951138111736250369\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951139211247878145\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951140310759505921\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951141410271133697\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951142509782761473\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951143609294389249\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951144708806017025\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951145808317644801\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951146907829272577\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951148007340900353\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951149106852528129\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951150206364155905\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951151305875783681\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951152405387411457\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951153504899039233\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951154604410667009\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951155703922294785\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951156803433922561\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951157902945550337\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951159002457178113\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951160101968805889\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951161201480433665\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951162300992061441\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951163400503689217\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951164500015316993\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951165599526944769\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951166699038572545\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951167798550200321\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951168898061828097\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951169997573455873\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951171097085083649\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951172196596711425\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951173296108339201\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951174395619966977\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951175495131594753\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951176594643222529\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951177694154850305\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951178793666478081\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951179893178105857\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951180992689733633\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951182092201361409\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951183191712989185\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951184291224616961\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951185390736244737\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951186490247872513\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951187589759500289\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951188689271128065\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951189788782755841\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951190888294383617\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951191987806011393\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951193087317639169\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951194186829266945\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951195286340894721\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951196385852522497\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951197485364150273\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951198584875778049\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951199684387405825\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951200783899033601\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951201883410661377\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951202982922289153\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951204082433916929\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951205181945544705\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951206281457172481\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951207380968800257\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951208480480428033\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951209579992055809\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951210679503683585\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951211779015311361\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951212878526939137\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951213978038566913\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951215077550194689\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951216177061822465\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951217276573450241\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951218376085078017\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951219475596705793\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951220575108333569\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951221674619961345\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951222774131589121\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951223873643216897\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951224973154844673\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951226072666472449\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951227172178100225\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951228271689728001\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951229371201355777\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951230470712983553\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951231570224611329\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951232669736239105\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951233769247866881\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951234868759494657\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951235968271122433\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951237067782750209\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951238167294377985\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951239266806005761\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951240366317633537\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951241465829261313\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951242565340889089\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951243664852516865\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951244764364144641\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951245863875772417\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951246963387400193\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951248062899027969\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951249162410655745\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951250261922283521\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951251361433911297\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951252460945539073\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951253560457166849\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951254659968794625\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951255759480422401\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951256858992050177\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951257958503677953\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951259058015305729\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951260157526933505\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951261257038561281\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951262356550189057\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951263456061816833\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951264555573444609\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951265655085072385\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951266754596700161\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951267854108327937\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951268953619955713\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951270053131583489\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951271152643211265\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951272252154839041\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951273351666466817\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951274451178094593\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951275550689722369\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951276650201350145\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951277749712977921\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951278849224605697\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951279948736233473\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951281048247861249\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951282147759489025\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951283247271116801\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951284346782744577\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951285446294372353\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951286545806000129\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951287645317627905\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951288744829255681\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951289844340883457\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951290943852511233\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951292043364139009\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951293142875766785\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951294242387394561\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951295341899022337\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951296441410650113\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951297540922277889\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951298640433905665\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951299739945533441\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951300839457161217\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951301938968788993\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951303038480416769\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951304137992044545\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951305237503672321\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951306337015300097\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951307436526927873\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951308536038555649\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951309635550183425\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951310735061811201\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951311834573438977\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951312934085066753\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951314033596694529\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951315133108322305\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951316232619950081\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951317332131577857\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951318431643205633\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951319531154833409\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951320630666461185\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951321730178088961\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951322829689716737\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951323929201344513\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951325028712972289\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951326128224600065\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951327227736227841\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951328327247855617\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951329426759483393\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951330526271111169\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951331625782738945\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951332725294366721\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951333824805994497\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951334924317622273\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951336023829250049\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951337123340877825\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951338222852505601\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951339322364133377\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951340421875761153\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951341521387388929\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951342620899016705\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951343720410644481\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951344819922272257\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951345919433900033\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951347018945527809\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951348118457155585\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951349217968783361\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951350317480411137\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951351416992038913\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951352516503666689\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951353616015294465\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951354715526922241\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951355815038550017\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951356914550177793\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951358014061805569\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951359113573433345\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951360213085061121\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951361312596688897\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951362412108316673\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951363511619944449\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951364611131572225\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951365710643200001\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951366810154827777\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951367909666455553\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951369009178083329\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951370108689711105\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951371208201338881\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951372307712966657\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951373407224594433\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951374506736222209\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951375606247849985\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951376705759477761\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951377805271105537\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951378904782733313\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951380004294361089\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951381103805988865\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951382203317616641\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951383302829244417\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951384402340872193\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951385501852499969\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951386601364127745\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951387700875755521\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951388800387383297\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951389899899011073\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951390999410638849\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951392098922266625\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951393198433894401\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951394297945522177\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951395397457149953\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951396496968777729\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951397596480405505\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951398695992033281\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951399795503661057\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951400895015288833\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951401994526916609\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951403094038544385\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951404193550172161\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951405293061799937\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951406392573427713\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951407492085055489\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951408591596683265\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951409691108311041\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951410790619938817\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951411890131566593\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951412989643194369\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951414089154822145\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951415188666449921\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951416288178077697\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951417387689705473\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951418487201333249\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951419586712961025\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951420686224588801\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951421785736216577\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951422885247844353\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951423984759472129\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951425084271099905\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951426183782727681\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951427283294355457\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951428382805983233\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951429482317611009\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951430581829238785\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951431681340866561\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951432780852494337\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951433880364122113\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951434979875749889\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951436079387377665\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951437178899005441\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951438278410633217\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951439377922260993\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951440477433888769\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951441576945516545\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951442676457144321\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951443775968772097\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951444875480399873\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951445974992027649\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951447074503655425\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951448174015283201\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951449273526910977\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951450373038538753\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951451472550166529\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951452572061794305\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951453671573422081\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951454771085049857\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951455870596677633\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951456970108305409\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951458069619933185\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951459169131560961\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951460268643188737\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951461368154816513\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951462467666444289\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951463567178072065\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951464666689699841\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951465766201327617\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951466865712955393\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951467965224583169\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951469064736210945\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951470164247838721\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951471263759466497\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951472363271094273\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951473462782722049\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951474562294349825\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951475661805977601\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951476761317605377\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951477860829233153\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951478960340860929\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951480059852488705\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951481159364116481\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951482258875744257\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951483358387372033\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951484457898999809\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951485557410627585\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951486656922255361\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951487756433883137\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951488855945510913\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951489955457138689\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951491054968766465\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951492154480394241\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951493253992022017\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951494353503649793\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951495453015277569\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951496552526905345\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951497652038533121\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951498751550160897\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951499851061788673\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951500950573416449\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951502050085044225\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951503149596672001\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951504249108299777\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951505348619927553\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951506448131555329\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951507547643183105\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951508647154810881\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951509746666438657\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951510846178066433\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951511945689694209\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951513045201321985\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951514144712949761\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951515244224577537\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951516343736205313\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951517443247833089\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951518542759460865\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951519642271088641\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951520741782716417\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951521841294344193\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951522940805971969\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951524040317599745\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951525139829227521\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951526239340855297\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951527338852483073\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951528438364110849\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951529537875738625\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951530637387366401\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951531736898994177\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951532836410621953\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951533935922249729\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951535035433877505\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951536134945505281\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951537234457133057\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951538333968760833\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951539433480388609\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951540532992016385\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951541632503644161\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951542732015271937\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951543831526899713\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951544931038527489\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951546030550155265\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951547130061783041\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951548229573410817\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951549329085038593\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951550428596666369\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951551528108294145\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951552627619921921\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951553727131549697\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951554826643177473\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951555926154805249\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951557025666433025\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951558125178060801\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951559224689688577\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951560324201316353\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951561423712944129\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951562523224571905\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951563622736199681\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951564722247827457\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951565821759455233\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951566921271083009\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951568020782710785\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951569120294338561\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951570219805966337\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951571319317594113\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951572418829221889\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951573518340849665\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951574617852477441\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951575717364105217\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951576816875732993\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951577916387360769\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951579015898988545\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951580115410616321\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951581214922244097\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951582314433871873\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951583413945499649\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951584513457127425\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951587811992010753\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951588911503638529\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951590011015266305\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951591110526894081\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951592210038521857\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951593309550149633\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951594409061777409\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951595508573405185\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951596608085032961\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951597707596660737\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951598807108288513\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951599906619916289\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951601006131544065\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951602105643171841\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951603205154799617\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951604304666427393\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951605404178055169\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951606503689682945\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951607603201310721\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951608702712938497\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951609802224566273\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951610901736194049\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951612001247821825\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951613100759449601\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951614200271077377\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951615299782705153\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951616399294332929\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951617498805960705\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951618598317588481\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951619697829216257\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951620797340844033\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951621896852471809\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951622996364099585\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951624095875727361\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951625195387355137\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951626294898982913\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951627394410610689\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951628493922238465\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951629593433866241\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951630692945494017\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951631792457121793\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951632891968749569\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951633991480377345\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951635090992005121\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951636190503632897\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951637290015260673\t,\r\n                                106927580289739319741994837130987506128463962128337696457128951638389526888449  ,\r\n                                106927580289739319741994837130987506128463962128337696457128951639489038516225  ,\r\n                                106927580289739319741994837130987506128463962128337696457128951640588550144001  ,\r\n                                106927580289739319741994837130987506128463962128337696457128951641688061771777\r\n                                ];\r\n\r\n\r\n  constructor() ERC721(\"MutantKongzVX\", \"MKZVX\") {\r\n    maxMKZVX = MAX_MKZVX;\r\n    mkz = MKZ(openSeaContract);\r\n  }\r\n\r\n  function _baseURI() internal view override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n  \r\n  function setBaseURI(string memory uri) public onlyOwner {\r\n    baseURI = uri;\r\n  }\r\n\r\n  function flipClaimPhaseState() public onlyOwner {\r\n    claimIsActive = !claimIsActive;\r\n  }\r\n\r\n  function canClaim(uint256 tokenId) view public returns (bool) {\r\n      return !_exists(tokenId);\r\n  }\r\n\r\n\r\n    function _ownerOf(uint256 tokenId) internal view returns (bool) {\r\n        return mkz.balanceOf(msg.sender, tokenId) != 0;\r\n    }\r\n\r\n  /**\r\n    * Claim a MutantKongz VX\r\n    */\r\n  function claimMKVX(uint256 mkzvxTokenId) public {\r\n    require(claimIsActive, \"The claim phase must be active to mint a MutantKongz VX\");\r\n    require(totalSupply() < maxMKZVX, \"The Claim action would exceed the max supply of MutantKongz VX\");\r\n    require(mkzvxTokenId < maxMKZVX + 1, \"Requested tokenId exceeds upper bound\");\r\n    uint256 mkTokenId = mkzTokenId[mkzvxTokenId-1];\r\n    require(_ownerOf(mkTokenId) == true, \"You are not the owner of the requested tokenId\");\r\n\r\n    _safeMint(msg.sender, mkzvxTokenId);\r\n  }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MKZVX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mkzvxTokenId\",\"type\":\"uint256\"}],\"name\":\"claimMKVX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipClaimPhaseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMKZVX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MKZVX", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://282afcfe7f56e1bd100a18dcebc848dbd32cf6f3993c6950c8f22ab4e4a08a6e"}]}