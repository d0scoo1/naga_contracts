{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"JellyPool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n* @title Jelly Pool V1.3:\\n*\\n*              ,,,,\\n*            g@@@@@@K\\n*           l@@@@@@@@P\\n*            $@@@@@@@\\\"                   l@@@  l@@@\\n*             \\\"*NNM\\\"                     l@@@  l@@@\\n*                                        l@@@  l@@@\\n*             ,g@@@g        ,,gg@gg,     l@@@  l@@@ ,ggg          ,ggg\\n*            @@@@@@@@p    g@@@EEEEE@@W   l@@@  l@@@  $@@g        ,@@@Y\\n*           l@@@@@@@@@   @@@P      ]@@@  l@@@  l@@@   $@@g      ,@@@Y\\n*           l@@@@@@@@@  $@@D,,,,,,,,]@@@ l@@@  l@@@   '@@@p     @@@Y\\n*           l@@@@@@@@@  @@@@EEEEEEEEEEEE l@@@  l@@@    \\\"@@@p   @@@Y\\n*           l@@@@@@@@@  l@@K             l@@@  l@@@     '@@@, @@@Y\\n*            @@@@@@@@@   %@@@,    ,g@@@  l@@@  l@@@      ^@@@@@@Y\\n*            \\\"@@@@@@@@    \\\"N@@@@@@@@E'   l@@@  l@@@       \\\"*@@@Y\\n*             \\\"J@@@@@@        \\\"**\\\"\\\"       '''   '''        @@@Y\\n*    ,gg@@g    \\\"J@@@P                                     @@@Y\\n*   @@@@@@@@p    J@@'                                    @@@Y\\n*   @@@@@@@@P    J@h                                    RNNY\\n*   'B@@@@@@     $P\\n*       \\\"JE@@@p\\\"'\\n*\\n*\\n*/\\n\\n/**\\n* @author ProfWobble\\n* @dev\\n* - Pool Contract with Staking NFTs:\\n*   - Mints NFTs on stake() which represent staked tokens\\n*          and claimable rewards in the pool.\\n*   - Supports Merkle proofs using the JellyList interface.\\n*   - External rewarder logic for multiple pools.\\n*   - NFT attributes onchain via the descriptor.\\n*\\n*/\\n\\n\\nimport \\\"IJellyAccessControls.sol\\\";\\nimport \\\"IJellyRewarder.sol\\\";\\nimport \\\"IJellyPool.sol\\\";\\nimport \\\"IJellyContract.sol\\\";\\nimport \\\"IMerkleList.sol\\\";\\nimport \\\"IDescriptor.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"Documents.sol\\\";\\nimport \\\"BoringMath.sol\\\";\\nimport \\\"JellyPoolNFT.sol\\\";\\n\\ncontract JellyPool is IJellyPool, IJellyContract, JellyPoolNFT, Documents {\\n    using SafeERC20 for OZIERC20;\\n\\n    /// @notice Jelly template id for the pool factory.\\n    /// @dev For different pool types, this must be incremented.\\n    uint256 public override constant TEMPLATE_TYPE = 2;\\n    bytes32 public override constant TEMPLATE_ID = keccak256(\\\"JELLY_POOL\\\");\\n    uint256 public constant pointMultiplier = 10e12;\\n\\n    IJellyAccessControls public accessControls;\\n    IJellyRewarder public rewardsContract;\\n    IDescriptor public descriptor;\\n\\n    /// @notice Token to stake.\\n    address public override poolToken;\\n    address public owner;\\n    struct PoolSettings {\\n        bool tokensClaimable;\\n        bool useList;\\n        bool useListAmounts;\\n        bool initialised; \\n        uint256 transferTimeout;\\n        /// @notice Address that manages approvals.\\n        address list;  \\n    }\\n    PoolSettings public poolSettings;\\n\\n    /// @notice Total tokens staked.\\n    uint256 public override stakedTokenTotal;\\n\\n    struct RewardInfo {\\n        uint48 lastUpdateTime;\\n        uint208 rewardsPerTokenPoints;\\n    }\\n\\n    /// @notice reward token address => rewardsPerTokenPoints\\n    mapping(address => RewardInfo) public poolRewards;\\n\\n    address[] public rewardTokens;\\n\\n    struct TokenRewards {\\n        uint128 rewardsEarned;\\n        uint128 rewardsReleased;\\n        uint48 lastUpdateTime;\\n        uint208 lastRewardPoints;\\n    }\\n    /// @notice Mapping from tokenId => rewards token => reward info.\\n    mapping (uint256 => mapping(address => TokenRewards)) public tokenRewards;\\n\\n    struct TokenInfo {\\n        uint128 staked;\\n        uint48 lastUpdateTime;\\n    }\\n    /// @notice Mapping from tokenId => token info.\\n    mapping (uint256 => TokenInfo) public tokenInfo;\\n\\n    struct UserPool {\\n        uint128 stakeLimit;\\n    }\\n\\n    /// @notice user address => pool details\\n    mapping(address => UserPool) public userPool;\\n\\n    /**\\n     * @notice Event emitted when claimable status is updated.\\n     * @param status True or False.\\n     */\\n    event TokensClaimable(bool status);\\n    /**\\n     * @notice Event emitted when rewards contract has been updated.\\n     * @param oldRewardsToken Address of the old reward token contract.\\n     * @param newRewardsToken Address of the new reward token contract.\\n     */\\n    event RewardsContractSet(address indexed oldRewardsToken, address newRewardsToken);\\n    /**\\n     * @notice Event emmited when a user has staked LPs.\\n     * @param owner Address of the staker.\\n     * @param amount Amount staked in LP tokens.\\n     */\\n    event Staked(address indexed owner, uint256 amount);\\n    /**\\n     * @notice Event emitted when a user claims rewards.\\n     * @param user Address of the user.\\n     * @param reward Reward amount.\\n     */\\n    event RewardsClaimed(address indexed user, uint256 reward);\\n    /**\\n     * @notice Event emitted when a user has unstaked LPs.\\n     * @param owner Address of the unstaker.\\n     * @param amount Amount unstaked in LP tokens.\\n     */\\n    event Unstaked(address indexed owner, uint256 amount);\\n    /**\\n     * @notice Event emitted when user unstaked in emergency mode.\\n     * @param user Address of the user.\\n     * @param tokenId unstaked tokenId.\\n     */\\n    event EmergencyUnstake(address indexed user, uint256 tokenId);\\n\\n    constructor() {\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Pool Config\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Admin can change rewards contract through this function.\\n     * @param _addr Address of the new rewards contract.\\n     */\\n    function setRewardsContract(address _addr) external override {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        require(_addr != address(0));\\n        emit RewardsContractSet(address(rewardsContract), _addr);\\n        rewardsContract = IJellyRewarder(_addr);\\n        rewardTokens = rewardsContract.rewardTokens(address(this));\\n\\n    }\\n\\n    /**\\n     * @notice Admin can set reward tokens claimable through this function.\\n     * @param _enabled True or False.\\n     */\\n    function setTokensClaimable(bool _enabled) external override  {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        emit TokensClaimable(_enabled);\\n        poolSettings.tokensClaimable = _enabled;\\n    }\\n\\n    /**\\n     * @notice Getter function for tokens claimable.\\n     */\\n    function tokensClaimable() external override view returns(bool) {\\n        return poolSettings.tokensClaimable;\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Jelly Pool NFTs\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Set the token URI descriptor.\\n     * @dev Only callable by the admin.\\n     */\\n    function setDescriptor(address _descriptor) external {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        descriptor = IDescriptor(_descriptor);\\n    }\\n\\n    /**\\n     * @notice Set admin details of the NFT including owner, token name and symbol.\\n     * @dev Only callable by the admin.\\n     */\\n    function setTokenDetails(string memory _name, string memory _symbol, address _owner) external {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        tokenName = _name;\\n        tokenSymbol = _symbol;\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * @notice Add a delay between updating staked position and a token transfer.\\n     * @dev Only callable by the admin.\\n     */\\n    function setTransferTimeout(uint256 _timeout) external {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        require(_timeout < block.timestamp);\\n        poolSettings.transferTimeout = _timeout;\\n    }\\n\\n    function getOwnerTokens(address _owner) public view returns (uint256[] memory) {\\n        uint256 count = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](count);\\n        for(uint i = 0; i < count; i++) {\\n            tokenIds[i] = _ownedTokens[_owner][i];\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), 'Non-existent token');\\n        return descriptor.tokenURI(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Includes a configurable delay between updating staked position and a token transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        for(uint i = 0; i < rewardTokens.length; i++) {\\n            require(tokenRewards[tokenId][rewardTokens[i]].lastUpdateTime <= block.timestamp - uint256(poolSettings.transferTimeout), \\\"Staked value recently updated\\\");\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Verify\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Whitelisted staking\\n     * @param _merkleRoot List identifier.\\n     * @param _index User index.\\n     * @param _user User address.\\n     * @param _stakeLimit Max amount of tokens stakable by user, set in proof.\\n     * @param _data Bytes array to send to the list contract.\\n     */\\n    function verify(bytes32 _merkleRoot, uint256 _index, address _user, uint256 _stakeLimit, bytes32[] calldata _data ) public {\\n        UserPool storage _userPool =  userPool[_user];\\n        require(_stakeLimit > 0, \\\"Limit must be > 0\\\");\\n\\n        if (_stakeLimit > uint256(_userPool.stakeLimit)) {\\n            uint256 merkleAmount = IMerkleList(poolSettings.list).tokensClaimable(_merkleRoot, _index, _user, _stakeLimit, _data );\\n            require(merkleAmount > 0, \\\"Incorrect merkle proof\\\");\\n            _userPool.stakeLimit = BoringMath.to128(merkleAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function for verifying whitelist, staking and minting a Staking NFT\\n     * @param _amount Number of tokens in merkle proof.\\n     * @param _merkleRoot Merkle root.\\n     * @param _index Merkle index.\\n     * @param _stakeLimit Max amount of tokens stakable by user, set in proof.\\n     * @param _data Bytes array to send to the list contract.\\n\\n     */\\n    function verifyAndStake(uint256 _amount, bytes32 _merkleRoot, uint256 _index, uint256 _stakeLimit, bytes32[] calldata _data ) \\n        external\\n    {       \\n        verify(_merkleRoot, _index, msg.sender, _stakeLimit, _data );\\n        _stake(msg.sender, _amount);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Stake\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Deposits tokens into the JellyPool and mints a Staking NFT \\n     * @param _amount Number of tokens deposited into the pool.\\n     */\\n    function stake(uint256 _amount) \\n        external\\n    {       \\n            _stake(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Internal staking function called by both verifyAndStake() and stake().\\n     * @param _user Stakers address.\\n     * @param _amount Number of tokens to deposit.\\n     */\\n    function _stake(\\n        address _user,\\n        uint256 _amount\\n    )\\n        internal\\n    {\\n        require(\\n            _amount > 0,\\n            \\\"Amount must be > 0\\\"\\n        );    \\n\\n        /// @dev If a whitelist is set, this checks user balance. \\n        if (poolSettings.useList) {\\n            if (poolSettings.useListAmounts) {\\n                require(_amount < userPool[_user].stakeLimit);\\n            } else {\\n                require(userPool[_user].stakeLimit > 0);\\n            }\\n        }\\n\\n        /// @dev Mints a Staking NFT if the user doesnt already have one. \\n        if (balanceOf(_user) == 0) {\\n            // Mints new Staking NFT\\n            uint256 _tokenId = _safeMint(_user);\\n            // Sets initial rewards points\\n            for(uint i = 0; i < rewardTokens.length; i++) {\\n                address rewardToken = rewardTokens[i];\\n                if(tokenRewards[_tokenId][rewardToken].lastRewardPoints == 0) {\\n                    tokenRewards[_tokenId][rewardToken].lastRewardPoints = poolRewards[rewardToken].rewardsPerTokenPoints;\\n                }\\n            }\\n        }\\n        /// We always add balance to the users first token. \\n        uint256 tokenId = _ownedTokens[_user][0];\\n\\n        /// Updates internal accounting and stakes tokens\\n        snapshot(tokenId);\\n        tokenInfo[tokenId] = TokenInfo(tokenInfo[tokenId].staked + BoringMath.to128(_amount)\\n                                        , BoringMath.to48(block.timestamp) );\\n        stakedTokenTotal += BoringMath.to128(_amount);\\n        OZIERC20(poolToken).safeTransferFrom(\\n            address(_user),\\n            address(this),\\n            _amount\\n        );\\n        emit Staked(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens staked for a tokenID.\\n     * @param _tokenId TokenID to be checked.\\n     */\\n    function stakedBalance(uint256 _tokenId) external view override returns(uint256){\\n        return tokenInfo[_tokenId].staked;\\n    }\\n\\n    //--------------------------------------------------------\\n    // Rewards\\n    //--------------------------------------------------------\\n\\n    /// @dev Updates the rewards accounting onchain for a specific tokenID.\\n    function snapshot(\\n        uint256 _tokenId\\n    ) \\n        public\\n    {\\n        require(_exists(_tokenId), 'Non-existent token');\\n        IJellyRewarder rewarder = rewardsContract;\\n        rewarder.updateRewards();\\n        uint256 sTotal = stakedTokenTotal;\\n        for(uint i = 0; i < rewardTokens.length; i++) {\\n            address rewardToken = rewardTokens[i];\\n            RewardInfo storage rInfo = poolRewards[rewardTokens[i]];\\n            /// Get total pool rewards from rewarder\\n            uint208 currentRewardPoints;\\n            if (sTotal == 0) {\\n                currentRewardPoints = rInfo.rewardsPerTokenPoints;\\n            } else {\\n                uint256 currentRewards = rewarder.poolRewards(address(this), rewardToken, uint256(rInfo.lastUpdateTime), block.timestamp);\\n\\n                /// Convert to reward points\\n                currentRewardPoints = rInfo.rewardsPerTokenPoints + BoringMath.to208(currentRewards * 1e18 * pointMultiplier / sTotal); \\n            }\\n            /// Update reward info\\n            rInfo.rewardsPerTokenPoints = currentRewardPoints;\\n            rInfo.lastUpdateTime = BoringMath.to48(block.timestamp) ;\\n\\n            _updateTokenRewards(_tokenId, rewardToken, currentRewardPoints);\\n        }\\n    }\\n\\n    function _updateTokenRewards(uint256 _tokenId, address _rewardToken, uint208 currentRewardPoints) internal  {\\n\\n        TokenRewards storage _tokenRewards = tokenRewards[_tokenId][_rewardToken];\\n        // update token rewards \\n        _tokenRewards.rewardsEarned += BoringMath.to128(tokenInfo[_tokenId].staked * uint256(currentRewardPoints -_tokenRewards.lastRewardPoints)\\n                                                            / 1e18\\n                                                            / pointMultiplier);\\n        // Update token details \\n        _tokenRewards.lastUpdateTime = BoringMath.to48(block.timestamp);\\n        _tokenRewards.lastRewardPoints = currentRewardPoints;\\n\\n    }\\n\\n    //--------------------------------------------------------\\n    // Claim\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Claim rewards for all Staking NFTS owned by the sender.\\n     */\\n    function claim()  external {\\n        require(\\n            poolSettings.tokensClaimable == true,\\n            \\\"Not yet claimable\\\"\\n        );\\n        uint256[] memory tokenIds = getOwnerTokens(msg.sender);\\n\\n        if (tokenIds.length > 0) {\\n            for(uint i = 0; i < tokenIds.length; i++) {\\n                snapshot(tokenIds[i]);\\n            }\\n            for(uint j = 0; j < rewardTokens.length; j++) {\\n                _claimRewards(tokenIds, rewardTokens[j], msg.sender);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claiming rewards on behalf of a token ID.\\n     * @param _tokenId Token ID.\\n     */\\n    function fancyClaim(uint256 _tokenId) public {\\n        claimRewards(_tokenId, rewardTokens);\\n    }\\n\\n    /**\\n     * @notice Claiming rewards for user for specific rewards.\\n     * @param _tokenId Token ID.\\n     */\\n    function claimRewards(uint256 _tokenId, address[] memory _rewardTokens) public {\\n        require(\\n            poolSettings.tokensClaimable == true,\\n            \\\"Not yet claimable\\\"\\n        );\\n        snapshot(_tokenId);\\n        uint256[] memory tokenIds = new uint256[](1);\\n        tokenIds[0] = _tokenId;\\n        address recipient = ownerOf(_tokenId);\\n        for(uint i = 0; i < _rewardTokens.length; i++) {\\n            _claimRewards(tokenIds, _rewardTokens[i], recipient);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claiming rewards for user.\\n     * @param _tokenIds Array of Token IDs.\\n     */\\n    function _claimRewards(uint256[] memory _tokenIds, address _rewardToken, address _recipient) internal {\\n        uint256 payableAmount;\\n        uint128 rewards;\\n        for(uint i = 0; i < _tokenIds.length; i++) {\\n            TokenRewards storage _tokenRewards = tokenRewards[_tokenIds[i]][_rewardToken];\\n            rewards = _tokenRewards.rewardsEarned - _tokenRewards.rewardsReleased;\\n            payableAmount += uint256(rewards);\\n            _tokenRewards.rewardsReleased += rewards;\\n        }\\n\\n        OZIERC20(_rewardToken).safeTransfer(_recipient, payableAmount);\\n        emit RewardsClaimed(_recipient, payableAmount);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Unstake\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Function for unstaking exact amount of tokens, claims all rewards.\\n     * @param _amount amount of tokens to unstake.\\n     */\\n\\n    function unstake(uint256 _amount) external  {\\n        uint256[] memory tokenIds = getOwnerTokens(msg.sender);\\n        uint256 unstakeAmount;\\n        require(tokenIds.length > 0, \\\"Nothing to unstake\\\");\\n        for(uint i = 0; i < tokenIds.length; i++) {\\n            if (_amount > 0) {\\n                unstakeAmount = tokenInfo[tokenIds[i]].staked;\\n                if (unstakeAmount > _amount) {\\n                    unstakeAmount = _amount;\\n                }\\n                _amount = _amount - unstakeAmount;\\n                fancyClaim(tokenIds[i]);\\n                _unstake(msg.sender, tokenIds[i], unstakeAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Function for unstaking exact amount of tokens, for a specific NFT token id.\\n     * @param _tokenId TokenID to be unstaked\\n     * @param _amount amount of tokens to unstake.\\n     */\\n    function unstakeToken(uint256 _tokenId, uint256 _amount) external  {\\n        require(\\n            ownerOf(_tokenId) == msg.sender,\\n            \\\"Must own tokenId\\\"\\n        );\\n        fancyClaim(_tokenId);\\n        _unstake(msg.sender, _tokenId, _amount);\\n    }\\n\\n    /**\\n     * @notice Function that executes the unstaking.\\n     * @param _user Stakers address.\\n     * @param _tokenId Number of tokens to unstake.\\n     * @param _amount amount of tokens to unstake.\\n     */\\n    function _unstake(address _user, uint256 _tokenId, uint256 _amount) internal {        \\n        tokenInfo[_tokenId] = TokenInfo(tokenInfo[_tokenId].staked - BoringMath.to128(_amount)\\n                                        , BoringMath.to48(block.timestamp) );\\n        stakedTokenTotal -= BoringMath.to128(_amount);\\n\\n        if (tokenInfo[_tokenId].staked == 0) {\\n            delete tokenInfo[_tokenId];  \\n            _burn(_tokenId);\\n        }\\n\\n        uint256 tokenBal = OZIERC20(poolToken).balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            _amount = tokenBal;       \\n        } \\n        OZIERC20(poolToken).safeTransfer(address(_user), _amount);\\n        emit Unstaked(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake without rewards. EMERGENCY ONLY.\\n     */\\n    function emergencyUnstake(uint256 _tokenId) external {\\n        require(\\n            ownerOf(_tokenId) == msg.sender,\\n            \\\"Must own tokenId\\\"\\n        );\\n        _unstake(msg.sender, _tokenId, tokenInfo[_tokenId].staked);\\n        emit EmergencyUnstake(msg.sender, _tokenId);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // List\\n    //--------------------------------------------------------\\n    /**\\n     * @notice Address used for whitelist if activated\\n     */\\n    function list() external view returns (address) {\\n        return poolSettings.list;\\n    }\\n\\n    function setList(address _list) external {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        if (_list != address(0)) {\\n            poolSettings.list = _list;\\n        }\\n    }\\n\\n    function enableList(bool _useList, bool _useListAmounts) public {\\n        require(accessControls.hasAdminRole(msg.sender));\\n        poolSettings.useList = _useList;\\n        poolSettings.useListAmounts = _useListAmounts;\\n\\n    }\\n\\n    //--------------------------------------------------------\\n    // Documents\\n    //--------------------------------------------------------\\n\\n    function setDocument(string calldata _name, string calldata _data) external {\\n        require(accessControls.hasAdminRole(msg.sender) );\\n        if (bytes(_data).length > 0) {\\n            _setDocument( _name, _data);\\n        } else {\\n            _removeDocument(_name);\\n        }\\n    }\\n\\n    //--------------------------------------------------------\\n    // Factory\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Initializes main contract variables.\\n     * @dev Init function.\\n     * @param _poolToken Address of the pool token.\\n     * @param _accessControls Access controls interface.\\n\\n     */\\n    function initJellyPool(\\n        address _poolToken,\\n        address _accessControls\\n    ) public \\n    {\\n        require(!poolSettings.initialised);\\n        poolToken = _poolToken;\\n        accessControls = IJellyAccessControls(_accessControls);\\n        poolSettings.initialised = true;\\n    }\\n\\n    function init(bytes calldata _data) external override payable {}\\n\\n    function initContract(\\n        bytes calldata _data\\n    ) external override {\\n        (\\n        address _poolToken,\\n        address _accessControls\\n        ) = abi.decode(_data, (address, address));\\n\\n        initJellyPool(\\n                        _poolToken,\\n                        _accessControls\\n                    );\\n    }\\n}\\n\"\r\n    },\r\n    \"IJellyAccessControls.sol\": {\r\n      \"content\": \"\\npragma solidity 0.8.6;\\n\\ninterface IJellyAccessControls {\\n    function hasAdminRole(address _address) external  view returns (bool);\\n    function addAdminRole(address _address) external;\\n    function removeAdminRole(address _address) external;\\n    function hasMinterRole(address _address) external  view returns (bool);\\n    function addMinterRole(address _address) external;\\n    function removeMinterRole(address _address) external;\\n    function hasOperatorRole(address _address) external  view returns (bool);\\n    function addOperatorRole(address _address) external;\\n    function removeOperatorRole(address _address) external;\\n    function initAccessControls(address _admin) external ;\\n\\n}\\n\"\r\n    },\r\n    \"IJellyRewarder.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\ninterface IJellyRewarder {\\n\\n    // function setRewards( \\n    //     uint256[] memory rewardPeriods, \\n    //     uint256[] memory amounts\\n    // ) external;\\n    // function setBonus(\\n    //     uint256 poolId,\\n    //     uint256[] memory rewardPeriods,\\n    //     uint256[] memory amounts\\n    // ) external;\\n    function updateRewards() external returns(bool);\\n    // function updateRewards(address _pool) external returns(bool);\\n\\n    function totalRewards(address _poolAddress) external view returns (uint256 rewards);\\n    function totalRewards() external view returns (address[] memory, uint256[] memory);\\n    // function poolRewards(uint256 _pool, uint256 _from, uint256 _to) external view returns (uint256 rewards);\\n    function poolRewards(address _pool, address _rewardToken, uint256 _from, uint256 _to) external view returns (uint256 rewards);\\n\\n    function rewardTokens() external view returns (address[] memory rewards);\\n    function rewardTokens(address _pool) external view returns (address[] memory rewards);\\n\\n    function poolCount() external view returns (uint256);\\n\\n    function setPoolPoints(address _poolAddress, uint256 _poolPoints) external;\\n\\n    function setVault(address _addr) external;\\n    function addRewardsToPool(\\n        address _poolAddress,\\n        address _rewardAddress,\\n        uint256 _startTime,\\n        uint256 _duration,\\n        uint256 _amount\\n\\n    ) external ;\\n\\n}   \\n\"\r\n    },\r\n    \"IJellyPool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\ninterface IJellyPool {\\n\\n    function setRewardsContract(address _addr) external;\\n    function setTokensClaimable(bool _enabled) external;\\n\\n    function stakedTokenTotal() external view returns(uint256);\\n    function stakedBalance(uint256 _tokenId) external view returns(uint256);\\n    function tokensClaimable() external view returns(bool);\\n    function poolToken() external view returns(address);\\n\\n}\\n\"\r\n    },\r\n    \"IJellyContract.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\nimport \\\"IMasterContract.sol\\\";\\n\\ninterface IJellyContract is IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n\\n    function TEMPLATE_ID() external view returns(bytes32);\\n    function TEMPLATE_TYPE() external view returns(uint256);\\n    function initContract( bytes calldata data ) external;\\n\\n}\\n\"\r\n    },\r\n    \"IMasterContract.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"IMerkleList.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\ninterface IMerkleList {\\n    function tokensClaimable(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof ) external view returns (bool);\\n    function tokensClaimable(bytes32 _merkleRoot, uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof ) external view returns (uint256);\\n    function currentMerkleURI() external view returns (string memory);\\n    function initMerkleList(address accessControl) external ;\\n    function addProof(bytes32 _merkleRoot, string memory _merkleURI) external;\\n\\n}\\n\"\r\n    },\r\n    \"IDescriptor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\ninterface IDescriptor {\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view returns (string memory);\\n\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"OZIERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        OZIERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        OZIERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        OZIERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        OZIERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        OZIERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(OZIERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"OZIERC20.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface OZIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"insufficient balance for call\\\");\\n        require(isContract(target), \\\"call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Documents.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n// pragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Standard implementation of ERC1643 Document management\\n */\\ncontract Documents {\\n\\n    struct Document {\\n        uint32 docIndex;    // Store the document name indexes\\n        uint64 lastModified; // Timestamp at which document details was last modified\\n        string data; // data of the document that exist off-chain\\n    }\\n\\n    // mapping to store the documents details in the document\\n    mapping(string => Document) internal _documents;\\n    // mapping to store the document name indexes\\n    mapping(string => uint32) internal _docIndexes;\\n    // Array use to store all the document name present in the contracts\\n    string[] _docNames;\\n\\n    // Document Events\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data) internal {\\n        require(bytes(_name).length > 0); // dev: Zero name is not allowed\\n        require(bytes(_data).length > 0); // dev: Zero data is not allowed\\n        // Document storage document = _documents[_name];\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(block.timestamp), _data);\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n\\n    function _removeDocument(string calldata _name) internal {\\n        require(_documents[_name].lastModified != uint64(0)); // dev: Document should exist\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1; \\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (string[] memory) {\\n        return _docNames;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index) external view returns (string memory) {\\n        require(_index < _docNames.length); // dev: Index out of bounds\\n        return _docNames[_index];\\n    }\\n\\n}\"\r\n    },\r\n    \"BoringMath.sol\": {\r\n      \"content\": \"\\npragma solidity 0.8.6;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"BoringMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"BoringMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to208(uint256 a) internal pure returns (uint208 c) {\\n        require(a <= type(uint208).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint208(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to48(uint256 a) internal pure returns (uint48 c) {\\n        require(a <= type(uint48).max);\\n        c = uint48(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max);\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= type(uint16).max);\\n        c = uint16(a);\\n    }\\n\\n    function to8(uint256 a) internal pure returns (uint8 c) {\\n        require(a <= type(uint8).max);\\n        c = uint8(a);\\n    }\\n\\n}\\n\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary BoringMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary BoringMath208 {\\n    function add(uint208 a, uint208 b) internal pure returns (uint224 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint208 a, uint208 b) internal pure returns (uint224 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint48.\\nlibrary BoringMath48 {\\n    function add(uint48 a, uint48 b) internal pure returns (uint48 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint48 a, uint48 b) internal pure returns (uint48 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint8.\\nlibrary BoringMath8 {\\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint8 a, uint8 b) internal pure returns (uint8 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"JellyPoolNFT.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\nimport \\\"ERC721SemiNumerable.sol\\\";\\nimport \\\"Counters.sol\\\";\\n\\n\\ncontract JellyPoolNFT is ERC721SemiNumerable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter internal _tokenIdTracker;\\n\\n    constructor() ERC721(\\\"JellyPool NFT\\\",\\\"JPOOL\\\") {\\n\\n    }\\n\\n    function _safeMint(address _user) internal returns (uint256){\\n        uint256 _tokenId = _tokenIdTracker.current();\\n        _safeMint(_user, _tokenId);\\n        _tokenIdTracker.increment();\\n        return _tokenId;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"ERC721SemiNumerable.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC721.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721SemiNumerable is ERC721 {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) internal _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"Index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"ERC721.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string internal tokenName;\\n\\n    // Token symbol\\n    string internal tokenSymbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        tokenName = name_;\\n        tokenSymbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0));\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0));\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"Non-existent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"Approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"Not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"Non-existent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId));\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"Non ERC721Receiver\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"Non-existent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"Non ERC721Receiver\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0));\\n        require(!_exists(tokenId));\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"Not owner of token\\\");\\n        require(to != address(0));\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0);\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"Counters.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"libraries\": {\r\n      \"JellyPool.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardsToken\",\"type\":\"address\"}],\"name\":\"RewardsContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TokensClaimable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TEMPLATE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEMPLATE_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract IJellyAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract IDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useListAmounts\",\"type\":\"bool\"}],\"name\":\"enableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fancyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"initJellyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRewards\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastUpdateTime\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"rewardsPerTokenPoints\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokensClaimable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useListAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initialised\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"transferTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"list\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"contract IJellyRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"}],\"name\":\"setList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTokensClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setTransferTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokenTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"staked\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdateTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardsEarned\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsReleased\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdateTime\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"lastRewardPoints\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakeLimit\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_data\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_data\",\"type\":\"bytes32[]\"}],\"name\":\"verifyAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JellyPool", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}