{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/duckylemon/2022-q2/DuckylemonGenesis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"../../core/OmmgArtistContract.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n//   ____             _          _                               ____                      _\\n//  |  _ \\\\ _   _  ___| | ___   _| | ___ _ __ ___   ___  _ __    / ___| ___ _ __   ___  ___(_)___\\n//  | | | | | | |/ __| |/ / | | | |/ _ \\\\ '_ ` _ \\\\ / _ \\\\| '_ \\\\  | |  _ / _ \\\\ '_ \\\\ / _ \\\\/ __| / __|\\n//  | |_| | |_| | (__|   <| |_| | |  __/ | | | | | (_) | | | | | |_| |  __/ | | |  __/\\\\__ \\\\ \\\\__ \\\\\\n//  |____/ \\\\__,_|\\\\___|_|\\\\_\\\\\\\\__, |_|\\\\___|_| |_| |_|\\\\___/|_| |_|  \\\\____|\\\\___|_| |_|\\\\___||___/_|___/\\n//                         |___/\\n\\n/// @title DuckylemonGenesis\\n/// @author OMMG\\ncontract DuckylemonGenesis is OmmgArtistContract {\\n    string public constant Artist = \\\"Duckylemon\\\";\\n\\n    constructor(ArtistContractConfig memory config)\\n        OmmgArtistContract(config)\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/core/OmmgArtistContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// implementations\\nimport \\\"./impl/ERC721OmmgSnapshot.sol\\\";\\nimport \\\"./impl/OmmgAccessControl.sol\\\";\\nimport \\\"./impl/ERC721Ommg.sol\\\";\\n\\n// interfaces\\nimport \\\"./interfaces/IERC721OmmgEnumerable.sol\\\";\\nimport \\\"./interfaces/IERC721OmmgMetadata.sol\\\";\\nimport \\\"./interfaces/IERC721OmmgMetadataFreezable.sol\\\";\\n\\nimport \\\"./interfaces/IOmmgAcquirable.sol\\\";\\nimport \\\"./interfaces/IOmmgAcquirableWithToken.sol\\\";\\nimport \\\"./interfaces/IOmmgEmergencyTokenRecoverable.sol\\\";\\nimport \\\"./interfaces/IOmmgWithdrawable.sol\\\";\\n\\nimport \\\"./interfaces/IOmmgProvenanceHash.sol\\\";\\nimport \\\"./interfaces/IOmmgMutablePrice.sol\\\";\\nimport \\\"./interfaces/IOmmgSalePausable.sol\\\";\\nimport \\\"./interfaces/IOmmgSupplyCap.sol\\\";\\nimport \\\"./interfaces/IOmmgFrontEnd.sol\\\";\\n\\nimport \\\"./def/ArtistContractConfig.sol\\\";\\nimport \\\"./def/CustomErrors.sol\\\";\\n\\n// utility\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\ncontract OmmgArtistContract is\\n    IOmmgFrontEnd,\\n    OmmgAccessControl,\\n    ERC721Ommg,\\n    ERC721OmmgSnapshot,\\n    IERC721OmmgEnumerable,\\n    IERC721OmmgMetadata,\\n    IERC721OmmgMetadataFreezable,\\n    IOmmgSalePausable,\\n    IOmmgSupplyCap,\\n    IOmmgMutablePrice,\\n    IOmmgProvenanceHash,\\n    IOmmgAcquirable,\\n    IOmmgAcquirableWithToken,\\n    IOmmgEmergencyTokenRecoverable,\\n    IOmmgWithdrawable\\n{\\n    using Strings for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The identifying hash of the state administrator role. The state\\n    /// administrator role empowers the accounts that hold it to change state variables.\\n    /// @dev is just keccak256(\\\"CONTRACT_STATE_ADMIN\\\")\\n    bytes32 public constant CONTRACT_STATE_ADMIN_ROLE =\\n        0x7e69b879a040173b938f56bb64bfa62bcd758c08ae6ed7cfdf7da6d7dba92708;\\n\\n    /// @notice The identifying hash of the withdrawal administrator role. The\\n    /// role empowers the accounts that hold it to withdraw eth.\\n    /// @dev is just keccak256(\\\"CONTRACT_WITHDRAW_ADMIN\\\")\\n    bytes32 public constant CONTRACT_WITHDRAW_ADMIN_ROLE =\\n        0x7c13537556c77ef3fb98601c3356887ddbe5991e86dc065741ce77e1dd2554a3;\\n\\n    /// @notice The identifying hash of the free acquire role. The role empowers\\n    /// the accounts that hold it to mint tokens for free, for example for marketing purposes.\\n    /// @dev is just keccak256(\\\"CONTRACT_FREE_ACQUIRE\\\")\\n    bytes32 public constant CONTRACT_FREE_ACQUIRE_ROLE =\\n        0xfdd7b2ba629c0a0b84029cda831836222e5708c95d3e782c0762066b472dad0e;\\n\\n    /// @dev the immutable max supply cap of this token\\n    uint256 private immutable _supplyCap;\\n    /// @dev the mutable public mint price of this token\\n    uint256 private _price;\\n    /// @dev the total number of shares held by all shareholders\\n    uint256 private _totalShares;\\n\\n    /// @dev indicates whether the token metadata is revealed\\n    bool private _revealed;\\n    /// @dev indicates whether the public sale is active\\n    bool private _saleIsActive;\\n    /// @dev indicates whether the token metadata is frozen\\n    bool private _metadataFrozen;\\n    /// @dev indicates whether the provenance hash is frozen\\n    bool private _provenanceFrozen;\\n\\n    /// @dev the name of the token contract\\n    string private _name;\\n    /// @dev the symbol of the token contract\\n    string private _symbol;\\n    /// @dev the base URI of the token metadata which is prepended to the tokenID,\\n    /// unless overridden for a token. Only shows when the token is revealed\\n    string private _baseURI;\\n    /// @dev the URI of the token metadata for the unrevealed state\\n    string private _unrevealedTokenURI;\\n    /// @dev the provenance hash\\n    string private _provenanceHash;\\n\\n    /// @dev optional mapping for token URIs to override the default behavior\\n    mapping(uint256 => string) private _tokenURIs;\\n    /// @dev whether the token URI for this item is a full override or simply gets appended to the `_baseURI`\\n    mapping(uint256 => bool) private _overrideFullURI;\\n    /// @dev Optional mapping for token reveal override, to indicate if an individual token has been revealed\\n    mapping(uint256 => bool) private _tokenRevealed;\\n\\n    /// @dev the list of all shareholders who will receive eth when `withdraw` is called\\n    Shareholder[] private _shareholders;\\n\\n    /// @dev the list of all configured tokens for the token discount mechanic\\n    IERC721[] private _configuredTokens;\\n    /// @dev a shorthand way to check if a token is configured\\n    mapping(IERC721 => bool) _tokenConfigured;\\n    /// @dev a mapping per configured token to indicate whether a specific token of that token contract has been used as\\n    /// a discount token already or not. It goes as follows: `_tokenIdsUsed[address][version][tokenId]`\\n    mapping(IERC721 => mapping(uint256 => mapping(uint256 => bool))) _tokenIdsUsed;\\n    /// @dev a mapping per configured token to its tokenIdsUsed version, needed for resets.\\n    mapping(IERC721 => uint256) _tokensUsedVersion;\\n    /// @dev a mapping per configured token to its used number.\\n    mapping(IERC721 => uint256) _tokensUsedNumber;\\n    /// @dev the configurations (price, active state) of a token discount\\n    mapping(IERC721 => TokenDiscountConfig) _tokenConfigurations;\\n\\n    /// @notice Initializes the contract with the given configuration.\\n    /// @dev The config is the 'magic' behind this contract and the core of it's flexibility\\n    /// @param config the config of this contract as an {ArtistContractConfig} struct\\n    /// `config.name` will be the name of the contract.\\n    /// `config.symbol` will be the symbol.\\n    /// `config.withdrawAdmins` can be a list of users who will be assigned the `CONTRACT_WITHDRAW_ADMIN_ROLE` on construction.\\n    /// `config.stateAdmins` can be a list of users who will be assigned the `CONTRACT_STATE_ADMIN_ROLE` on construction.\\n    /// `config.mintForFree` can be a list of users who will be assigned the `CONTRACT_FREE_ACQUIRE_ROLE` on construction.\\n    /// `config.initialPrice` is the initial value assigned to the mutable price property.\\n    /// `config.supplyCap` is the immutable supply cap.\\n    /// `config.maxBatchSize` is the maximum number of tokens mintable in one transaction.\\n    /// `config.shareholders` is a list of the shareholders (see {Shareholder} struct).\\n    /// `config.tokenDiscounts` is a list of token discounts (see {TokenDiscount} struct) which will be usable to mint tokens.\\n    constructor(ArtistContractConfig memory config)\\n        ERC721Ommg(config.maxBatchSize)\\n    {\\n        _name = config.name;\\n        _symbol = config.symbol;\\n        _price = config.initialPrice;\\n        _supplyCap = config.supplyCap;\\n\\n        _addRoleToAll(config.withdrawAdmins, CONTRACT_WITHDRAW_ADMIN_ROLE);\\n        _addRoleToAll(config.stateAdmins, CONTRACT_STATE_ADMIN_ROLE);\\n        _addRoleToAll(config.mintForFree, CONTRACT_FREE_ACQUIRE_ROLE);\\n\\n        uint256 amount = config.shareholders.length;\\n        for (uint256 i = 0; i < config.shareholders.length; i++) {\\n            _addShareholder(config.shareholders[i]);\\n        }\\n\\n        amount = config.tokenDiscounts.length;\\n        for (uint256 i = 0; i < amount; i++) {\\n            _addTokenDiscount(\\n                config.tokenDiscounts[i].tokenAddress,\\n                config.tokenDiscounts[i].config\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc ERC721Ommg\\n    function maxBatchSize()\\n        public\\n        view\\n        override(ERC721Ommg, IOmmgFrontEnd)\\n        returns (uint256)\\n    {\\n        return super.maxBatchSize();\\n    }\\n\\n    function tokensAvailable()\\n        external\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        return supplyCap() - _currentIndex();\\n    }\\n\\n    /// @dev little helper function to add `role` to all accounts supplied\\n    function _addRoleToAll(address[] memory accounts, bytes32 role) private {\\n        uint256 len = accounts.length;\\n        if (len > 0) {\\n            for (uint256 i = 0; i < len; i++) {\\n                grantRole(role, accounts[i]);\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgWithdrawable //////////////////////////////////////////////\\n\\n    /// @dev Only callable by the contract owner or someone with the\\n    /// `CONTRACT_STATE_ADMIN_ROLE`.\\n    /// @inheritdoc IOmmgWithdrawable\\n    function addShareholder(address walletAddress, uint256 shares)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _addShareholder(Shareholder(walletAddress, shares));\\n    }\\n\\n    /// @dev Only callable by the contract owner or someone with the\\n    /// `CONTRACT_STATE_ADMIN_ROLE`.\\n    /// @inheritdoc IOmmgWithdrawable\\n    function removeShareholder(address walletAddress)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        if (walletAddress == address(0)) revert NullAddress();\\n        uint256 length = _shareholders.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_shareholders[i].addr == walletAddress) {\\n                _removeShareholderAt(i);\\n                return;\\n            }\\n        }\\n        revert ShareholderDoesNotExist(walletAddress);\\n    }\\n\\n    /// @dev Only callable by the contract owner or someone with the\\n    /// `CONTRACT_STATE_ADMIN_ROLE`.\\n    /// @inheritdoc IOmmgWithdrawable\\n    function updateShareholder(address walletAddress, uint256 updatedShares)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        if (walletAddress == address(0)) revert NullAddress();\\n        uint256 length = _shareholders.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_shareholders[i].addr == walletAddress) {\\n                _shareholders[i].shares = updatedShares;\\n                emit ShareholderUpdated(walletAddress, updatedShares);\\n                return;\\n            }\\n        }\\n        revert ShareholderDoesNotExist(walletAddress);\\n    }\\n\\n    /// @dev Only callable by the contract owner or someone with the\\n    /// `CONTRACT_STATE_ADMIN_ROLE`. Reverts if the address is the null address,\\n    /// or if a shareholder with this address does not exist.\\n    /// @inheritdoc IOmmgWithdrawable\\n    function shares(address walletAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 length = _shareholders.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_shareholders[i].addr == walletAddress) {\\n                return _shareholders[i].shares;\\n            }\\n        }\\n        revert ShareholderDoesNotExist(walletAddress);\\n    }\\n\\n    /// @inheritdoc IOmmgWithdrawable\\n    function shareholders()\\n        external\\n        view\\n        override\\n        returns (Shareholder[] memory)\\n    {\\n        return _shareholders;\\n    }\\n\\n    /// @inheritdoc IOmmgWithdrawable\\n    function totalShares() external view override returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    function emergencyWithdraw()\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        uint256 balance = address(this).balance;\\n        payable(_msgSender()).transfer(balance);\\n        emit EmergencyWithdrawn(msg.sender, balance);\\n    }\\n\\n    /// @inheritdoc IOmmgWithdrawable\\n    function withdraw()\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_WITHDRAW_ADMIN_ROLE)\\n    {\\n        uint256 balance = address(this).balance;\\n        uint256 totalShares_ = _totalShares;\\n        uint256 length = _shareholders.length;\\n        if (totalShares_ == 0 || length == 0) revert ZeroShares();\\n        uint256 amountPerShare = balance / totalShares_;\\n        for (uint256 i = 0; i < length; i++) {\\n            Shareholder memory sh = _shareholders[i];\\n            uint256 shareholderAmount = sh.shares * amountPerShare;\\n            payable(sh.addr).transfer(shareholderAmount);\\n            emit PaidOut(_msgSender(), sh.addr, shareholderAmount);\\n        }\\n        emit Withdrawn(_msgSender(), amountPerShare * _totalShares);\\n    }\\n\\n    function _removeShareholderAt(uint256 index) private {\\n        uint256 length = _shareholders.length;\\n        Shareholder memory sh = _shareholders[index];\\n        for (uint256 i = index; i < length - 1; i++) {\\n            _shareholders[i] = _shareholders[i + 1];\\n        }\\n        _shareholders.pop();\\n        _totalShares -= sh.shares;\\n        emit ShareholderRemoved(sh.addr, sh.shares);\\n    }\\n\\n    function _addShareholder(Shareholder memory shareholder) internal {\\n        if (shareholder.shares == 0) revert ZeroShares();\\n        if (shareholder.addr == address(0)) revert NullAddress();\\n        uint256 length = _shareholders.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_shareholders[i].addr == shareholder.addr)\\n                revert ShareholderAlreadyExists(shareholder.addr);\\n        }\\n        _shareholders.push(shareholder);\\n        _totalShares += shareholder.shares;\\n        emit ShareholderAdded(shareholder.addr, shareholder.shares);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgEmergencyTokenRecoverable /////////////////////////////////\\n\\n    /// @inheritdoc IOmmgEmergencyTokenRecoverable\\n    function emergencyRecoverTokens(\\n        IERC20 token,\\n        address receiver,\\n        uint256 amount\\n    ) public virtual override onlyOwnerOrRole(CONTRACT_WITHDRAW_ADMIN_ROLE) {\\n        if (receiver == address(0)) revert NullAddress();\\n        token.safeTransfer(receiver, amount);\\n        emit TokensRecovered(token, receiver, amount);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgAcquirableWithToken //////////////////////////////////////\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function acquireWithToken(IERC721 token, uint256[] memory tokenIds)\\n        external\\n        payable\\n        override(IOmmgAcquirableWithToken, IOmmgFrontEnd)\\n    {\\n        uint256 amount = tokenIds.length;\\n        if (amount == 0) revert InvalidAmount(0, 1, maxBatchSize());\\n        _checkSupplyCapAndMaxBatch(amount);\\n        _revertIfTokenNotActive(token);\\n        uint256 price_ = _getTokenDiscountInfo(token).price;\\n        if (msg.value != price_ * amount) {\\n            revert InvalidMessageValue(msg.value, price_ * amount);\\n        }\\n        _checkTokenElegibility(msg.sender, token, tokenIds);\\n        _setTokensUsedForDiscount(token, tokenIds);\\n        _safeMint(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function tokenDiscounts()\\n        external\\n        view\\n        override(IOmmgAcquirableWithToken, IOmmgFrontEnd)\\n        returns (TokenDiscountOutput[] memory)\\n    {\\n        uint256 len = _configuredTokens.length;\\n        IERC721[] memory localCopy = _configuredTokens;\\n        TokenDiscountOutput[] memory td = new TokenDiscountOutput[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            address addr = address(localCopy[i]);\\n            td[i] = TokenDiscountOutput(\\n                IERC721(addr),\\n                _getRemoteNameOrEmpty(address(addr)),\\n                _getRemoteSymbolOrEmpty(address(addr)),\\n                _tokensUsedNumber[localCopy[i]],\\n                _tokenConfigurations[localCopy[i]]\\n            );\\n        }\\n        return td;\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function addTokenDiscount(\\n        IERC721 tokenAddress,\\n        TokenDiscountConfig memory config\\n    ) public onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE) {\\n        _addTokenDiscount(tokenAddress, config);\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function setTokenDiscountActive(IERC721 tokenAddress, bool active)\\n        external\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        if (_tokenConfigurations[tokenAddress].active != active) {\\n            _tokenConfigurations[tokenAddress].active = active;\\n            emit TokenDiscountUpdated(\\n                tokenAddress,\\n                _tokenConfigurations[tokenAddress]\\n            );\\n        }\\n    }\\n\\n    function _getRemoteNameOrEmpty(address remote)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        try IERC721Metadata(remote).name() returns (string memory name_) {\\n            return name_;\\n        } catch {\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    function _getRemoteSymbolOrEmpty(address remote)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        try IERC721Metadata(remote).symbol() returns (string memory symbol_) {\\n            return symbol_;\\n        } catch {\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function tokensUsedForDiscount(\\n        IERC721 tokenAddress,\\n        uint256[] memory tokenIds\\n    )\\n        external\\n        view\\n        virtual\\n        override(IOmmgAcquirableWithToken, IOmmgFrontEnd)\\n        returns (bool[] memory used)\\n    {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        uint256 length = tokenIds.length;\\n        bool[] memory arr = new bool[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = _tokenIdsUsed[tokenAddress][\\n                _tokensUsedVersion[tokenAddress]\\n            ][tokenIds[i]];\\n        }\\n        return arr;\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function removeTokenDiscount(IERC721 tokenAddress)\\n        external\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        uint256 length = _configuredTokens.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_configuredTokens[i] == tokenAddress) {\\n                _tokenConfigured[tokenAddress] = false;\\n                _popTokenConfigAt(i);\\n                emit TokenDiscountRemoved(tokenAddress);\\n                return;\\n            }\\n        }\\n        revert TokenNotConfigured(tokenAddress);\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function tokenDiscountInfo(IERC721 tokenAddress)\\n        external\\n        view\\n        returns (TokenDiscountOutput memory)\\n    {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        return\\n            TokenDiscountOutput(\\n                tokenAddress,\\n                _getRemoteNameOrEmpty(address(tokenAddress)),\\n                _getRemoteSymbolOrEmpty(address(tokenAddress)),\\n                _tokensUsedNumber[tokenAddress],\\n                _getTokenDiscountInfo(tokenAddress)\\n            );\\n    }\\n\\n    function _getTokenDiscountInfo(IERC721 tokenAddress)\\n        internal\\n        view\\n        returns (TokenDiscountConfig memory)\\n    {\\n        return _tokenConfigurations[tokenAddress];\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function updateTokenDiscount(\\n        IERC721 tokenAddress,\\n        TokenDiscountConfig memory config\\n    ) external override onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE) {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        _tokenConfigurations[tokenAddress] = config;\\n        emit TokenDiscountUpdated(tokenAddress, config);\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirableWithToken\\n    function resetTokenDiscountUsed(IERC721 tokenAddress)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _revertIfTokenNotConfigured(tokenAddress);\\n        _tokensUsedVersion[tokenAddress]++;\\n        _tokensUsedNumber[tokenAddress] = 0;\\n        emit TokenDiscountReset(tokenAddress);\\n    }\\n\\n    function _checkTokenElegibility(\\n        address account,\\n        IERC721 tokenAddress,\\n        uint256[] memory tokenIds\\n    ) internal view {\\n        uint256 length = tokenIds.length;\\n        if (\\n            _tokensUsedNumber[tokenAddress] + length >\\n            _tokenConfigurations[tokenAddress].supply\\n        )\\n            revert TokenSupplyExceeded(\\n                tokenAddress,\\n                _tokenConfigurations[tokenAddress].supply\\n            );\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // try catch for reverts in ownerOf\\n            try tokenAddress.ownerOf(tokenId) returns (address owner) {\\n                if (owner != account)\\n                    revert TokenNotOwned(tokenAddress, tokenId);\\n            } catch {\\n                revert TokenNotOwned(tokenAddress, tokenId);\\n            }\\n            if (\\n                _tokenIdsUsed[tokenAddress][_tokensUsedVersion[tokenAddress]][\\n                    tokenId\\n                ]\\n            ) revert TokenAlreadyUsed(tokenAddress, tokenId);\\n        }\\n    }\\n\\n    function _popTokenConfigAt(uint256 index) private {\\n        uint256 length = _configuredTokens.length;\\n        if (index >= length) return;\\n        for (uint256 i = index; i < length - 1; i++) {\\n            _configuredTokens[i] = _configuredTokens[i + 1];\\n        }\\n        _configuredTokens.pop();\\n    }\\n\\n    // no checks\\n    function _setTokensUsedForDiscount(\\n        IERC721 token,\\n        uint256[] memory tokenIds\\n    ) internal {\\n        uint256 length = tokenIds.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenIdsUsed[token][_tokensUsedVersion[token]][\\n                tokenIds[i]\\n            ] = true;\\n            emit TokenUsedForDiscount(msg.sender, token, tokenIds[i]);\\n        }\\n        _tokensUsedNumber[token] += length;\\n    }\\n\\n    function _addTokenDiscount(\\n        IERC721 tokenAddress,\\n        TokenDiscountConfig memory config\\n    ) internal {\\n        if (address(tokenAddress) == address(0)) revert NullAddress();\\n        if (_tokenConfigured[tokenAddress])\\n            revert TokenAlreadyConfigured(tokenAddress);\\n        _tokenConfigured[tokenAddress] = true;\\n        _tokensUsedVersion[tokenAddress]++;\\n        _tokenConfigurations[tokenAddress] = config;\\n        _configuredTokens.push(tokenAddress);\\n        emit TokenDiscountAdded(tokenAddress, config);\\n    }\\n\\n    function _revertIfTokenNotConfigured(IERC721 tokenAddress) internal view {\\n        if (address(tokenAddress) == address(0)) revert NullAddress();\\n        if (!_tokenConfigured[tokenAddress])\\n            revert TokenNotConfigured(tokenAddress);\\n    }\\n\\n    function _revertIfTokenNotActive(IERC721 tokenAddress) internal view {\\n        if (!_tokenConfigured[tokenAddress])\\n            revert TokenNotConfigured(tokenAddress);\\n        if (!_tokenConfigurations[tokenAddress].active)\\n            revert TokenNotActive(tokenAddress);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgProvenanceHash ///////////////////////////////////////////\\n\\n    function whenProvenanceIsNotFrozen() private view {\\n        if (_provenanceFrozen) revert ProvenanceHashIsFrozen();\\n    }\\n\\n    /// @inheritdoc IOmmgProvenanceHash\\n    function provenanceHash() public view override returns (string memory) {\\n        return _provenanceHash;\\n    }\\n\\n    /// @inheritdoc IOmmgProvenanceHash\\n    function provenanceFrozen() public view override returns (bool) {\\n        return _provenanceFrozen;\\n    }\\n\\n    /// @inheritdoc IOmmgProvenanceHash\\n    function setProvenanceHash(string memory provenanceHash_)\\n        public\\n        virtual\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        whenProvenanceIsNotFrozen();\\n        _provenanceHash = provenanceHash_;\\n        emit ProvenanceHashSet(_provenanceHash);\\n    }\\n\\n    /// @inheritdoc IOmmgProvenanceHash\\n    function freezeProvenance()\\n        public\\n        virtual\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        whenProvenanceIsNotFrozen();\\n        _provenanceFrozen = true;\\n        emit ProvenanceHashFrozen();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgMutablePrice //////////////////////////////////////////////\\n\\n    /// @inheritdoc IOmmgMutablePrice\\n    function price()\\n        public\\n        view\\n        override(IOmmgMutablePrice, IOmmgFrontEnd)\\n        returns (uint256)\\n    {\\n        return _price;\\n    }\\n\\n    /// @inheritdoc IOmmgMutablePrice\\n    function setPrice(uint256 price)\\n        public\\n        virtual\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _price = price;\\n        emit PriceChanged(_price);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgSupplyCap /////////////////////////////////////////////////\\n\\n    /// @inheritdoc IOmmgSupplyCap\\n    function supplyCap()\\n        public\\n        view\\n        virtual\\n        override(IOmmgSupplyCap, IOmmgFrontEnd)\\n        returns (uint256)\\n    {\\n        return _supplyCap;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgSalePausable //////////////////////////////////////////////\\n\\n    /// @inheritdoc IOmmgSalePausable\\n    function saleIsActive()\\n        public\\n        view\\n        override(IOmmgSalePausable, IOmmgFrontEnd)\\n        returns (bool)\\n    {\\n        return _saleIsActive;\\n    }\\n\\n    /// @inheritdoc IOmmgSalePausable\\n    function setSaleIsActive(bool newValue)\\n        public\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _saleIsActive = newValue;\\n        emit SaleIsActiveSet(_saleIsActive);\\n    }\\n\\n    modifier whenSaleIsActive() {\\n        if (!_saleIsActive) {\\n            revert SaleNotActive();\\n        }\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IOmmgAcquirable ////////////////////////////////////////////////\\n\\n    /// @inheritdoc IOmmgAcquirable\\n    function acquireForCommunity(address receiver, uint256 amount)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_FREE_ACQUIRE_ROLE)\\n    {\\n        _checkSupplyCapAndMaxBatch(amount);\\n        _safeMint(receiver, amount);\\n    }\\n\\n    /// @inheritdoc IOmmgAcquirable\\n    function acquire(uint256 amount)\\n        external\\n        payable\\n        override(IOmmgAcquirable, IOmmgFrontEnd)\\n        whenSaleIsActive\\n    {\\n        _checkSupplyCapAndMaxBatch(amount);\\n        if (msg.value != price() * amount) {\\n            revert InvalidMessageValue(msg.value, price() * amount);\\n        }\\n\\n        _safeMint(msg.sender, amount);\\n    }\\n\\n    function _checkSupplyCapAndMaxBatch(uint256 amount) private view {\\n        if (amount > maxBatchSize() || amount == 0) {\\n            revert InvalidAmount(amount, 1, maxBatchSize());\\n        }\\n        if (_currentIndex() + amount > supplyCap()) {\\n            // +1 because 0 based index\\n            revert AmountExceedsCap(\\n                amount,\\n                supplyCap() - _currentIndex(),\\n                supplyCap()\\n            );\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IERC721OmmgEnumerable //////////////////////////////////////////\\n\\n    /// @inheritdoc IERC721Enumerable\\n    function totalSupply() public view override returns (uint256) {\\n        return _currentIndex() - _burned();\\n    }\\n\\n    /// @inheritdoc IERC721Enumerable\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (index >= totalSupply())\\n            revert IndexOutOfBounds(index, totalSupply());\\n        if (_burned() == 0) return index + 1;\\n        uint256 j = 0;\\n        uint256 maxIndex = _currentIndex();\\n        for (uint256 i = 0; i < maxIndex; i++) {\\n            if (j == index) return i;\\n            if (_exists(i)) j++;\\n        }\\n        revert OperationFailed();\\n    }\\n\\n    /// @inheritdoc IERC721Enumerable\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (index > balanceOf(owner))\\n            revert IndexOutOfBounds(index, balanceOf(owner));\\n\\n        uint256 limit = _currentIndex();\\n        uint256 tokenIdsIdx = 0;\\n        for (uint256 i = 0; i < limit; i++) {\\n            if (_exists(i)) {\\n                if (_ownershipOf(i).addr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert OperationFailed();\\n    }\\n\\n    /// @inheritdoc IERC721OmmgEnumerable\\n    function exists(uint256 tokenId) public view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IERC721OmmgMetadata ////////////////////////////////////////////\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(IERC721Metadata, IOmmgFrontEnd)\\n        returns (string memory)\\n    {\\n        return _name;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(IERC721Metadata, IOmmgFrontEnd)\\n        returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function revealed() public view returns (bool) {\\n        return _revealed;\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function tokenRevealed(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        return _tokenRevealed[tokenId] || _revealed;\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function overridesFullURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        return _overrideFullURI[tokenId];\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory _base = _baseURI;\\n\\n        if (!_revealed && !_tokenRevealed[tokenId]) {\\n            return _unrevealedTokenURI;\\n        } else {\\n            if (bytes(_tokenURI).length > 0) {\\n                if (_overrideFullURI[tokenId]) return _tokenURI;\\n                else return string(abi.encodePacked(_base, _tokenURI));\\n            } else {\\n                if (bytes(_baseURI).length > 0)\\n                    return string(abi.encodePacked(_base, tokenId.toString()));\\n                else return _tokenURI;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function reveal()\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _revealed = true;\\n        emit Revealed();\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function revealToken(uint256 tokenId)\\n        external\\n        override\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        _tokenRevealed[tokenId] = true;\\n        emit TokenRevealed(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function setTokenURI(\\n        uint256 tokenId,\\n        bool overrideBaseURI,\\n        bool overrideReveal,\\n        string memory _tokenURI\\n    )\\n        external\\n        override\\n        whenMetadataIsNotFrozen\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        _tokenURIs[tokenId] = _tokenURI;\\n        _overrideFullURI[tokenId] = overrideBaseURI;\\n        if (overrideReveal && !_tokenRevealed[tokenId]) {\\n            _tokenRevealed[tokenId] = true;\\n            emit TokenRevealed(tokenId);\\n        }\\n        emit SetTokenUri(tokenId, false, false, _tokenURI);\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function setUnrevealedTokenURI(string memory unrevealedTokenURI)\\n        external\\n        override\\n        whenMetadataIsNotFrozen\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _unrevealedTokenURI = unrevealedTokenURI;\\n        emit UnrevealedTokenUriSet(_unrevealedTokenURI);\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadata\\n    function setBaseURI(string memory baseURI)\\n        external\\n        override\\n        whenMetadataIsNotFrozen\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _baseURI = baseURI;\\n        emit SetBaseUri(baseURI);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IERC721OmmgMetadataFreezable ///////////////////////////////////\\n\\n    modifier whenMetadataIsNotFrozen() {\\n        if (_metadataFrozen) revert MetadataIsFrozen();\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadataFreezable\\n    function metadataFrozen() public view returns (bool) {\\n        return _metadataFrozen;\\n    }\\n\\n    /// @inheritdoc IERC721OmmgMetadataFreezable\\n    function freezeMetadata()\\n        public\\n        virtual\\n        whenMetadataIsNotFrozen\\n        onlyOwnerOrRole(CONTRACT_STATE_ADMIN_ROLE)\\n    {\\n        _metadataFrozen = true;\\n        emit MetadataFrozen();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    /////////// IERC165 ////////////////////////////////////////////////////////\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721Ommg, ERC721OmmgSnapshot, OmmgAccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOmmgEmergencyTokenRecoverable).interfaceId ||\\n            interfaceId == type(IERC721OmmgMetadataFreezable).interfaceId ||\\n            interfaceId == type(IOmmgAcquirableWithToken).interfaceId ||\\n            interfaceId == type(IERC721OmmgEnumerable).interfaceId ||\\n            interfaceId == type(IERC721OmmgMetadata).interfaceId ||\\n            interfaceId == type(IOmmgProvenanceHash).interfaceId ||\\n            interfaceId == type(IOmmgMutablePrice).interfaceId ||\\n            interfaceId == type(IOmmgWithdrawable).interfaceId ||\\n            interfaceId == type(IOmmgSalePausable).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            interfaceId == type(IOmmgAcquirable).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IOmmgSupplyCap).interfaceId ||\\n            interfaceId == type(IOmmgFrontEnd).interfaceId ||\\n            interfaceId == type(IOmmgOwnable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/impl/ERC721OmmgSnapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Ommg.sol\\\";\\nimport \\\"../interfaces/IOmmgSnapshot.sol\\\";\\n\\nabstract contract ERC721OmmgSnapshot is IOmmgSnapshot, ERC721Ommg {\\n    function snapshot() external view returns (TokenInfo[] memory) {\\n        uint256 curIndex = _currentIndex();\\n        TokenInfo[] memory tokenInfo = new TokenInfo[](curIndex);\\n        for (uint256 i = 1; i <= curIndex; i++) {\\n            if (_exists(i)) {\\n                tokenInfo[i - 1] = TokenInfo(i, TokenStatus.OWNED, ownerOf(i));\\n            } else {\\n                tokenInfo[i - 1] = TokenInfo(\\n                    i,\\n                    TokenStatus.BURNED,\\n                    address(this)\\n                );\\n            }\\n        }\\n        return tokenInfo;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOmmgSnapshot).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/impl/OmmgAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./OmmgOwnable.sol\\\";\\nimport \\\"../interfaces/IOmmgAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/// @dev custom role access / ownable\\nabstract contract OmmgAccessControl is OmmgOwnable, IOmmgAccessControl {\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    /// @dev Reverts if called by any account other than the owner or `role`\\n    /// @param role The role which is allowed access\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (owner() != _msgSender() && !_roles[role].members[_msgSender()])\\n            revert Unauthorized(_msgSender(), role);\\n        _;\\n    }\\n\\n    /// @dev Reverts if called by any account other than the owner or `role`\\n    /// @param role The role which is allowed access\\n    modifier onlyRole(bytes32 role) {\\n        if (!_roles[role].members[_msgSender()])\\n            revert Unauthorized(_msgSender(), role);\\n        _;\\n    }\\n\\n    /// @dev Returns `true` if `account` has been granted `role`.\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _roles[role].members[account];\\n    }\\n\\n    /// @dev Grants `role` to `account`.\\n    function grantRole(bytes32 role, address account)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Revokes `role` from the calling account.\\n    function renounceRole(bytes32 role) public override {\\n        _revokeRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!_roles[role].members[account]) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (_roles[role].members[account]) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOmmgAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/impl/ERC721Ommg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../def/CustomErrors.sol\\\";\\n\\nabstract contract ERC721Ommg is Context, ERC165, IERC721 {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 private currentIndex = 1;\\n    uint256 private burned;\\n\\n    uint256 private immutable _maxBatchSize;\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) private _ownerOf;\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _balanceOf;\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(uint256 maxBatchSize_) {\\n        _maxBatchSize = maxBatchSize_;\\n    }\\n\\n    function _currentIndex() internal view returns (uint256) {\\n        return currentIndex - 1;\\n    }\\n\\n    function _burned() internal view returns (uint256) {\\n        return burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function maxBatchSize() public view virtual returns (uint256) {\\n        return _maxBatchSize;\\n    }\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert NullAddress();\\n        return _balanceOf[owner].balance;\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    function _ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n\\n        uint256 lowestTokenToCheck;\\n        if (tokenId >= _maxBatchSize) {\\n            lowestTokenToCheck = tokenId - _maxBatchSize + 1;\\n        }\\n\\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n            TokenOwnership memory ownership = _ownerOf[curr];\\n            if (ownership.addr != address(0)) return ownership;\\n        }\\n        revert OperationFailed();\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert SafeTransferFailed(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external {\\n        address owner = ownerOf(tokenId);\\n        // is in ownerOf\\n        // if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        if (to == owner) revert ApprovalInvalid(_msgSender(), tokenId);\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\\n            revert ApprovalUnauthorized(owner, to, tokenId, _msgSender());\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        returns (address operator)\\n    {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override\\n    {\\n        if (operator == _msgSender())\\n            revert ApprovalForAllInvalid(_msgSender(), approved);\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            tokenId > 0 &&\\n            tokenId < currentIndex &&\\n            _ownerOf[tokenId].addr != address(this);\\n    }\\n\\n    // function _hasBeenMinted(uint256 tokenId) internal view returns (bool) {\\n    //     return tokenId < currentIndex;\\n    // }\\n\\n    // function _ownerAddress(uint256 tokenId) internal view returns (address) {\\n    //     return _ownerOf[tokenId].addr;\\n    // }\\n\\n    function _burn(uint256 tokenId) internal {\\n        if (!_exists(tokenId)) revert TokenDoesNotExist(tokenId);\\n\\n        TokenOwnership memory owner = _ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(owner.addr, address(this), tokenId, 1);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId, owner.addr);\\n\\n        _balanceOf[owner.addr].balance -= 1;\\n        _ownerOf[tokenId].addr = address(this);\\n        burned++;\\n        uint256 nextTokenId = tokenId + 1;\\n        if (_ownerOf[nextTokenId].addr == address(0)) {\\n            if (_exists(nextTokenId)) {\\n                _ownerOf[nextTokenId] = TokenOwnership(\\n                    owner.addr,\\n                    owner.startTimestamp\\n                );\\n            }\\n        }\\n        emit Transfer(owner.addr, address(this), tokenId);\\n\\n        _afterTokenTransfers(owner.addr, address(this), tokenId, 1);\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` cannot be larger than the max batch size.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory data\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        if (to == address(0)) revert NullAddress();\\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n        // TODO can this even happen?\\n        // if (_exists(startTokenId)) revert TokenAlreadyExists(startTokenId);\\n\\n        if (quantity > _maxBatchSize || quantity == 0)\\n            revert InvalidAmount(quantity, 1, _maxBatchSize);\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        AddressData memory oldData = _balanceOf[to];\\n        _balanceOf[to] = AddressData(\\n            oldData.balance + uint128(quantity),\\n            oldData.numberMinted + uint128(quantity)\\n        );\\n        _ownerOf[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n        uint256 updatedIndex = startTokenId;\\n        for (uint256 i = 0; i < quantity; i++) {\\n            emit Transfer(address(0), to, updatedIndex);\\n            if (!_checkOnERC721Received(address(0), to, updatedIndex, data))\\n                revert SafeTransferFailed(address(0), to, updatedIndex);\\n            updatedIndex++;\\n        }\\n        currentIndex = updatedIndex;\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        if (to == address(0)) revert NullAddress();\\n\\n        TokenOwnership memory prevOwner = _ownershipOf(tokenId);\\n\\n        if (prevOwner.addr != from)\\n            revert TransferUnauthorized(\\n                _msgSender(),\\n                from,\\n                to,\\n                tokenId,\\n                prevOwner.addr\\n            );\\n\\n        if (\\n            _msgSender() != prevOwner.addr &&\\n            getApproved(tokenId) != _msgSender() &&\\n            !isApprovedForAll(prevOwner.addr, _msgSender())\\n        )\\n            revert TransferUnauthorized(\\n                _msgSender(),\\n                from,\\n                to,\\n                tokenId,\\n                prevOwner.addr\\n            );\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwner.addr);\\n\\n        _balanceOf[from].balance -= 1;\\n        _balanceOf[to].balance += 1;\\n        _ownerOf[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n        uint256 nextTokenId = tokenId + 1;\\n        if (_ownerOf[nextTokenId].addr == address(0)) {\\n            if (_exists(nextTokenId)) {\\n                _ownerOf[nextTokenId] = TokenOwnership(\\n                    prevOwner.addr,\\n                    prevOwner.startTimestamp\\n                );\\n            }\\n        }\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TargetNonERC721Receiver(to);\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IERC721OmmgEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IERC721OmmgEnumerable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves as an extension to {IERC721Enumerable} and adds\\n/// functionality to check if a token exists.\\ninterface IERC721OmmgEnumerable is IERC721Enumerable {\\n    /// @notice Returns whether the token `tokenId` exists.\\n    /// @param tokenId the token id to check\\n    /// @return exists whether the token exists\\n    function exists(uint256 tokenId) external view returns (bool exists);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IERC721OmmgMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IERC721OmmgMetadata\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves as an extension to {IERC721Metadata} and adds\\n/// functionality to reveal tokens as well as add more logic to the token uri.\\ninterface IERC721OmmgMetadata is IERC721Metadata {\\n    /// @notice Triggers when the base uri is updated.\\n    /// @param baseURI the new base uri\\n    event SetBaseUri(string indexed baseURI);\\n\\n    /// @notice Triggers when the URI for a token is overridden.\\n    /// @param tokenId the token where the URI is overridden\\n    /// @param fullOverride fullOverride whether the override overrides the base URI or is appended\\n    /// @param tokenRevealedOverride whether the token should be individually revealed\\n    /// @param tokenURI the override token URI\\n    event SetTokenUri(\\n        uint256 indexed tokenId,\\n        bool fullOverride,\\n        bool tokenRevealedOverride,\\n        string indexed tokenURI\\n    );\\n    /// @notice Triggers when the unrevealed token uri is updated.\\n    /// @param unrevealedTokenURI the new unrevealed token uri\\n    event UnrevealedTokenUriSet(string indexed unrevealedTokenURI);\\n\\n    /// @notice Triggers when the collection is revealed.\\n    event Revealed();\\n\\n    /// @notice Triggers when a singular token is revealed.\\n    /// @param tokenId the token which is revealed\\n    event TokenRevealed(uint256 indexed tokenId);\\n\\n    /// @notice Returns whether the collection as a whole is revealed.\\n    /// @param revealed whether the collection is revealed\\n    function revealed() external view returns (bool revealed);\\n\\n    /// @notice Reveals the collection. Emits {Revealed}.\\n    function reveal() external;\\n\\n    /// @notice Reveals an individual token. Fails if the token does not exist.\\n    /// Emits {TokenRevealed}.\\n    /// @param tokenId the id of the revealed token\\n    function revealToken(uint256 tokenId) external;\\n\\n    /// @notice Overrides the token URI for an individual token and optionally sets whether the base uri\\n    /// should be overridden too, and whether the token should be revealed individually. Emits {SetTokenUri}\\n    /// and {TokenRevealed} if it is revealed in the process.\\n    /// @param tokenId the id of the token to override these things for\\n    /// @param overrideBaseURI whether the base URI should be overridden or `_tokenURI` should be\\n    /// appended to it\\n    /// @param overrideReveal whether the token should be individually revealed\\n    /// @param _tokenURI the new token URI\\n    function setTokenURI(\\n        uint256 tokenId,\\n        bool overrideBaseURI,\\n        bool overrideReveal,\\n        string memory _tokenURI\\n    ) external;\\n\\n    /// @notice Sets the unrevealed token uri. Emits {UnrevealedTokenUriSet}.\\n    /// @param unrevealedTokenURI the new unrevealed token URI\\n    function setUnrevealedTokenURI(string memory unrevealedTokenURI) external;\\n\\n    /// @notice Sets the base URI. Emits {SetBaseURI}.\\n    /// @param baseURI the new base uri\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /// @notice Returns whether the token `tokenId` overrides the full base URI.\\n    /// @param tokenId the id of the token to check\\n    /// @return overridesBaseURI whether the token overrides the full base URI\\n    function overridesFullURI(uint256 tokenId)\\n        external\\n        view\\n        returns (bool overridesBaseURI);\\n\\n    /// @notice Returns whether the token `tokenId` is revealed.\\n    /// @param tokenId the id of the token to check\\n    /// @return revealed whether the token is revealed\\n    function tokenRevealed(uint256 tokenId)\\n        external\\n        view\\n        returns (bool revealed);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IERC721OmmgMetadataFreezable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IERC721OmmgMetadataFreezable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves as an extension to {IERC721OmmgMetadata} and adds\\n/// functionality to freeze the metadata, effectively making it immutable.\\ninterface IERC721OmmgMetadataFreezable {\\n    error MetadataIsFrozen();\\n    /// @notice Triggers when the metadata is frozen\\n    event MetadataFrozen();\\n\\n    /// @notice Returns whether the metadata is frozen.\\n    /// @return frozen whether the metadata is frozen or not\\n    function metadataFrozen() external view returns (bool frozen);\\n\\n    /// @notice Freezes the metadata to effectively turn it immutable. Emits {MetadataFrozen}.\\n    /// Fails if the metadata is already frozen.\\n    function freezeMetadata() external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgAcquirable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgAcquirable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves for the simple minting functionality of the OMMG Artist Contracts.\\ninterface IOmmgAcquirable {\\n    /// @notice Mints `amount` NFTs of this contract. The more minted at once, the cheaper gas is for each token.\\n    /// However, the upper limit for `amount` can be queried via `maxBatchSize`. Fails if the user does not provide\\n    /// the correct amount of eth, if sale is paused, if the supply catch is reached, or if `maxBatchSize` is exceeded.\\n    /// @param amount the amount of NFTs to mint.\\n    function acquire(uint256 amount) external payable;\\n\\n    /// @notice Mints `amount` NFTs of this contract to `receiver`. The more minted at once, the cheaper gas is for each token.\\n    /// However, the upper limit for `amount` can be queried via `maxBatchSize`. Fails if the supply catch is reached,\\n    /// or if `maxBatchSize` is exceeded.\\n    /// @param receiver the receiver of the NFTs.\\n    /// @param amount the amount of NFTs to mint.\\n    function acquireForCommunity(address receiver, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgAcquirableWithToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../def/TokenDiscount.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgAcquirableWithToken\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves for the extended minting functionality of the Ommg Artist Contracts.\\n/// The general functionality is that special prices can be configured for users to mint if they hold other\\n/// NFTs. Each NFT can only be used once to receive this discount, unless specifically reset.\\ninterface IOmmgAcquirableWithToken {\\n    error TokenNotOwned(IERC721 token, uint256 tokenIds);\\n    error TokenAlreadyUsed(IERC721 token, uint256 tokenId);\\n    error TokenNotConfigured(IERC721 token);\\n    error TokenNotActive(IERC721 token);\\n    error TokenAlreadyConfigured(IERC721 token);\\n    error TokenSupplyExceeded(IERC721 token, uint256 supplyCap);\\n\\n    /// @notice Triggers when a token discount is added.\\n    /// @param tokenAddress the addres of the added NFT contract for discounts\\n    /// @param config a tuple [uint256 price, uint256 limit, bool active] that represents the configuration for\\n    /// the discount\\n    event TokenDiscountAdded(\\n        IERC721 indexed tokenAddress,\\n        TokenDiscountConfig config\\n    );\\n    /// @notice Triggers when a token discount is updated.\\n    /// @param tokenAddress the addres of the added NFT contract for discounts\\n    /// @param config a tuple [uint256 price, uint256 limit, bool active] that represents the new configuration for\\n    /// the discount\\n    event TokenDiscountUpdated(\\n        IERC721 indexed tokenAddress,\\n        TokenDiscountConfig config\\n    );\\n    /// @notice Triggers when a token discount is removed.\\n    /// @param tokenAddress the addres of the NFT contract\\n    event TokenDiscountRemoved(IERC721 indexed tokenAddress);\\n    /// @notice Triggers when a token discount is reset - meaning all token usage data is reset and all tokens\\n    /// are marked as unused again.\\n    /// @param tokenAddress the addres of the NFT contract\\n    event TokenDiscountReset(IERC721 indexed tokenAddress);\\n    /// @notice Triggers when a token discount is used for a discount and then marked as used\\n    /// @param sender the user who used the token\\n    /// @param tokenAddress the addres of the NFT contract\\n    /// @param tokenId the id of the NFT used for the discount\\n    event TokenUsedForDiscount(\\n        address indexed sender,\\n        IERC721 indexed tokenAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    /// @notice Adds an NFT contract and thus all of it's tokens to the discount list.\\n    /// Emits a {TokenDiscountAdded} event and fails if `tokenAddress` is the zero address\\n    /// or is already configured.\\n    /// @param tokenAddress the address of the NFT contract\\n    /// @param config the initial configuration as [uint256 price, uint256 limit, bool active]\\n    function addTokenDiscount(\\n        IERC721 tokenAddress,\\n        TokenDiscountConfig memory config\\n    ) external;\\n\\n    /// @notice Removes an NFT contract from the discount list.\\n    /// Emits a {TokenDiscountRemoved} event and fails if `tokenAddress` is the zero address\\n    /// or is not already configured.\\n    /// @param tokenAddress the address of the NFT contract\\n    function removeTokenDiscount(IERC721 tokenAddress) external;\\n\\n    /// @notice Updates an NFT contracts configuration of the discount.\\n    /// Emits a {TokenDiscountUpdated} event and fails if `tokenAddress` is the zero address\\n    /// or is not already configured.\\n    /// @param tokenAddress the address of the NFT contract\\n    /// @param config the new configuration as [uint256 price, uint256 limit, bool active]\\n    function updateTokenDiscount(\\n        IERC721 tokenAddress,\\n        TokenDiscountConfig memory config\\n    ) external;\\n\\n    /// @notice Resets the usage state of all NFTs of the contract at `tokenAddress`. This allows all token ids\\n    /// to be used again.\\n    /// Emits a {TokenDiscountReset} event and fails if `tokenAddress` is the zero address\\n    /// or is not already configured.\\n    /// @param tokenAddress the address of the NFT contract\\n    function resetTokenDiscountUsed(IERC721 tokenAddress) external;\\n\\n    /// @notice Returns the current configuration of the token discount of `tokenAddress`\\n    /// @return config the configuration as [uint256 price, uint256 limit, bool active]\\n    function tokenDiscountInfo(IERC721 tokenAddress)\\n        external\\n        view\\n        returns (TokenDiscountOutput memory config);\\n\\n    /// @notice Returns a list of all current tokens configured for discounts and their configurations.\\n    /// @return discounts the configuration as [IERC721 tokenAddress, [uint256 price, uint256 limit, bool active]]\\n    function tokenDiscounts()\\n        external\\n        view\\n        returns (TokenDiscountOutput[] memory discounts);\\n\\n    /// @notice Acquires an NFT of this contract by proving ownership of the tokens in `tokenIds` belonging to\\n    /// a contract `tokenAddress` that has a configured discount. This way cheaper prices can be achieved for OMMG holders\\n    /// and potentially other partners. Emits {TokenUsedForDiscount} and requires the user to send the correct amount of\\n    /// eth as well as to own the tokens within `tokenIds` from `tokenAddress`, and for `tokenAddress` to be a configured token for discounts.\\n    /// @param tokenAddress the address of the contract which is the reference for `tokenIds`\\n    /// @param tokenIds the token ids which are to be used to get the discount\\n    function acquireWithToken(IERC721 tokenAddress, uint256[] memory tokenIds)\\n        external\\n        payable;\\n\\n    /// @notice Sets the active status of the token discount of `tokenAddress`.\\n    /// Fails if `tokenAddress` is the zero address or is not already configured.\\n    /// @param tokenAddress the configured token address\\n    /// @param active the new desired activity state\\n    function setTokenDiscountActive(IERC721 tokenAddress, bool active)\\n        external;\\n\\n    /// @notice Returns whether the tokens `tokenIds` of `tokenAddress` have already been used for a discount.\\n    /// Fails if `tokenAddress` is the zero address or is not already configured.\\n    /// @param tokenAddress the address of the token contract\\n    /// @param tokenIds the ids to check\\n    /// @return used if the tokens have already been used, each index corresponding to the\\n    /// token id index in the array\\n    function tokensUsedForDiscount(\\n        IERC721 tokenAddress,\\n        uint256[] memory tokenIds\\n    ) external view returns (bool[] memory used);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgEmergencyTokenRecoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgEmergencyTokenRecoverable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for emergency ERC20 token recovery. This is needed\\n/// in the case that someone accidentally sent ERC20 tokens to this contract.\\ninterface IOmmgEmergencyTokenRecoverable {\\n    /// @notice Triggers when ERC20 tokens are recovered\\n    /// @param token The address of the ERC20 token contract\\n    /// @param receiver The recipient of the tokens\\n    /// @param amount the amount of tokens recovered\\n    event TokensRecovered(\\n        IERC20 indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    /// @notice Recovers ERC20 tokens\\n    /// @param token The address of the ERC20 token contract\\n    /// @param receiver The recipient of the tokens\\n    /// @param amount the amount of tokens to recover\\n    function emergencyRecoverTokens(\\n        IERC20 token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"../def/Shareholder.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgWithdrawable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for automatic distribution of the contract balance\\n/// to shareholders based on their held shares\\ninterface IOmmgWithdrawable {\\n    /// @notice triggers whenever a shareholder is added to the contract\\n    /// @param addr the address of the shareholder\\n    /// @param shares the number of shares held by the holder\\n    event ShareholderAdded(address indexed addr, uint256 shares);\\n    /// @notice triggers whenever a shareholder is added to the contract\\n    /// @param addr the address of the former shareholder\\n    /// @param shares the number of shares that was held by the former holder\\n    event ShareholderRemoved(address indexed addr, uint256 shares);\\n    /// @notice triggers whenever a shareholder is updated\\n    /// @param addr the address of the shareholder\\n    /// @param shares the new number of shares held by the holder\\n    event ShareholderUpdated(address indexed addr, uint256 shares);\\n    /// @notice triggers whenever funds are withdrawn\\n    /// @param txSender the sender of the transaction\\n    /// @param amount the amount of eth withdrawn\\n    event Withdrawn(address indexed txSender, uint256 amount);\\n    /// @notice triggers whenever an emergency withdraw is executed\\n    /// @param txSender the transaction sender\\n    /// @param amount the amount of eth withdrawn\\n    event EmergencyWithdrawn(address indexed txSender, uint256 amount);\\n    /// @notice triggers whenever a shareholder receives their share of a withdrawal\\n    /// @param txSender the address that initiated the withdrawal\\n    /// @param to the address of the shareholder receiving this part of the withdrawal\\n    /// @param amount the amount of eth received by `to`\\n    event PaidOut(\\n        address indexed txSender,\\n        address indexed to,\\n        uint256 amount\\n    );\\n    /// @notice fires whenever a shareholder already exists but is attempted to be added\\n    /// @param addr the address already added\\n    error ShareholderAlreadyExists(address addr);\\n    /// @notice fires whenever a shareholder does not exist but an access is attempted\\n    /// @param addr the address of the attempted shareholder acces\\n    error ShareholderDoesNotExist(address addr);\\n\\n    /// @notice withdraws the current balance from this contract and distributes it to shareholders\\n    /// according to their held shares. Triggers a {Withdrawn} event and a {PaidOut} event per shareholder.\\n    function withdraw() external;\\n\\n    /// @notice withdraws the current balance from this contract and sends it to the\\n    /// initiator of the transaction. Triggers an {EmergencyWithdrawn} event.\\n    function emergencyWithdraw() external;\\n\\n    /// @notice Adds a shareholder to the contract. When `withdraw` is called,\\n    /// the shareholder will receive an amount of native tokens proportional to\\n    /// their shares. Triggers a {ShareholderAdded} event.\\n    /// Requires `walletAddress` to not be the ZeroAddress and for the shareholder to not already exist,\\n    /// as well as for `shares` to be greater than 0.\\n    /// @param walletAddress the address of the shareholder\\n    /// @param shares the number of shares assigned to that shareholder\\n    function addShareholder(address walletAddress, uint256 shares) external;\\n\\n    /// @notice Removes a shareholder from the contract. Triggers a {ShareholderRemoved} event.\\n    /// Requires `walletAddress` to not be the ZeroAddress and for the shareholder to exist.\\n    /// @param walletAddress the address of the shareholder to remove\\n    function removeShareholder(address walletAddress) external;\\n\\n    /// @notice Updates a shareholder of the contract. Triggers a {ShareholderUpdated} event.\\n    /// Requires `walletAddress` to not be the ZeroAddress and for the shareholder to exist.\\n    /// @param walletAddress the address of the shareholder to remove\\n    /// @param updatedShares the new amount of shares the shareholder will have\\n    function updateShareholder(address walletAddress, uint256 updatedShares)\\n        external;\\n\\n    /// @notice returns a list of all shareholders with their shares\\n    /// @return shareholders An array of tuples [address, shares], see the {Shareholder} struct\\n    function shareholders()\\n        external\\n        view\\n        returns (Shareholder[] memory shareholders);\\n\\n    /// @notice returns the total amount of shares that exist\\n    /// @return shares the total number of shares in the contract\\n    function totalShares() external view returns (uint256 shares);\\n\\n    /// @notice returns the number of shares held by `shareholderAddress`\\n    /// @return shares the number of shares held by `shareholderAddress`\\n    function shares(address shareholderAddress)\\n        external\\n        view\\n        returns (uint256 shares);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgProvenanceHash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgProvenanceHash\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for a freezable provenance hash, to enable full trust that\\n/// the metadata of the underlying token is not predetermined or tampered with.\\ninterface IOmmgProvenanceHash {\\n    /// @notice Triggers when an attempt is made to change the provenance\\n    /// hash after it has been frozen\\n    error ProvenanceHashIsFrozen();\\n    /// @notice Triggers when the provenance hash is set to a new value.\\n    /// @param provenanceHash the new provenance hash.\\n    event ProvenanceHashSet(string indexed provenanceHash);\\n    /// @notice Triggers when the provenance hash is frozen.\\n    event ProvenanceHashFrozen();\\n\\n    /// @notice Returns the current provenance hash. The idea is for this to be\\n    /// the proof that the order of token metada has not been tampered with and\\n    /// that it has not been predetermined.\\n    /// @return provenanceHash the provenance hash\\n    function provenanceHash()\\n        external\\n        view\\n        returns (string memory provenanceHash);\\n\\n    /// @notice Returns a boolean value indicating whether the provenance hash\\n    /// has been frozen or not. A frozen provenance hash is immutable.\\n    /// @return isFrozen whether it is frozen or not\\n    function provenanceFrozen() external view returns (bool isFrozen);\\n\\n    /// @notice Updates the provenance hash to the new value `provenanceHash`.\\n    /// Also triggers the event {ProvenanceHashSet} and reverts if the provenance\\n    /// hash has already been frozen.\\n    function setProvenanceHash(string memory provenanceHash) external;\\n\\n    /// @notice freezes the provenance hash and thus makes it immutable.\\n    /// Triggers a {ProvenanceHashFrozen} event and reverts if the hash is already frozen.\\n    function freezeProvenance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgMutablePrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgMutablePrice\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for a simple mutable price implementation.\\ninterface IOmmgMutablePrice {\\n    /// @notice Triggers when the price gets changes.\\n    /// @param newPrice the new price\\n    event PriceChanged(uint256 newPrice);\\n\\n    /// @notice Returns the current price.\\n    /// @return price the current price\\n    function price() external view returns (uint256 price);\\n\\n    /// @notice Sets the price to `price`.\\n    function setPrice(uint256 price) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgSalePausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgSalePausable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for a simple mutable sale state on any contract\\ninterface IOmmgSalePausable {\\n    error SaleNotActive();\\n    /// @notice This event gets triggered whenever the sale state changes\\n    /// @param newValue the new sale state\\n    event SaleIsActiveSet(bool newValue);\\n\\n    /// @notice This function returns a boolean value indicating whether\\n    /// the public sale is currently active or not\\n    /// returns currentState whether the sale is active or not\\n    function saleIsActive() external view returns (bool currentState);\\n\\n    /// @notice This function can be used to change the sale state to `newValue`.\\n    /// Triggers a {SaleIsActiveSet} event.\\n    /// @param newValue the desired new value for the sale state\\n    function setSaleIsActive(bool newValue) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgSupplyCap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgSupplyCap\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for a supply cap on any contract\\ninterface IOmmgSupplyCap {\\n    /// @notice this returns the supply cap of the token\\n    /// @return supplyCap the supply cap of the token\\n    function supplyCap() external view returns (uint256 supplyCap);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgFrontEnd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../def/TokenDiscount.sol\\\";\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgFrontEnd\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface is for the minting front end\\ninterface IOmmgFrontEnd {\\n    /// @notice Returns a list of all current tokens configured for discounts and their configurations.\\n    /// @return discounts the configuration as [IERC721 tokenAddress, [uint256 price, uint256 limit, bool active]]\\n    function tokenDiscounts()\\n        external\\n        view\\n        returns (TokenDiscountOutput[] memory discounts);\\n\\n    /// @notice Returns the maximum number of tokens mintable in one transaction\\n    /// @return maxBatch the maximum amount\\n    function maxBatchSize() external view returns (uint256 maxBatch);\\n\\n    /// @notice Acquires an NFT of this contract by proving ownership of the tokens in `tokenIds` belonging to\\n    /// a contract `tokenAddress` that has a configured discount. This way cheaper prices can be achieved for OMMG holders\\n    /// and potentially other partners. Emits {TokenUsedForDiscount} and requires the user to send the correct amount of\\n    /// eth as well as to own the tokens within `tokenIds` from `tokenAddress`, and for `tokenAddress` to be a configured token for discounts.\\n    /// @param tokenAddress the address of the contract which is the reference for `tokenIds`\\n    /// @param tokenIds the token ids which are to be used to get the discount\\n    function acquireWithToken(IERC721 tokenAddress, uint256[] memory tokenIds)\\n        external\\n        payable;\\n\\n    /// @notice Returns whether the tokens `tokenIds` of `tokenAddress` have already been used for a discount.\\n    /// Fails if `tokenAddress` is the zero address or is not already configured.\\n    /// @param tokenAddress the address of the token contract\\n    /// @param tokenIds the ids to check\\n    /// @return used if the tokens have already been used, each index corresponding to the\\n    /// token id index in the array\\n    function tokensUsedForDiscount(\\n        IERC721 tokenAddress,\\n        uint256[] memory tokenIds\\n    ) external view returns (bool[] memory used);\\n\\n    /// @notice Mints `amount` NFTs of this contract. The more minted at once, the cheaper gas is for each token.\\n    /// However, the upper limit for `amount` can be queried via `maxBatchSize`. Fails if the user does not provide\\n    /// the correct amount of eth, if sale is paused, if the supply catch is reached, or if `maxBatchSize` is exceeded.\\n    /// @param amount the amount of NFTs to mint.\\n    function acquire(uint256 amount) external payable;\\n\\n    /// @notice this returns the supply cap of the token\\n    /// @return supplyCap the supply cap of the token\\n    function supplyCap() external view returns (uint256 supplyCap);\\n\\n    /// @notice Returns the current price.\\n    /// @return price the current price\\n    function price() external view returns (uint256 price);\\n\\n    /// @notice This function returns a boolean value indicating whether\\n    /// the public sale is currently active or not\\n    /// returns currentState whether the sale is active or not\\n    function saleIsActive() external view returns (bool currentState);\\n\\n    /// @notice This function returns the total amount of tokens still available\\n    /// of the total supply\\n    function tokensAvailable() external view returns (uint256 amount);\\n\\n    // docs are in IERC721Metadata\\n    function name() external view returns (string memory name);\\n\\n    // docs are in IERC721Metadata\\n    function symbol() external view returns (string memory name);\\n}\\n\"\r\n    },\r\n    \"contracts/core/def/ArtistContractConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"../def/Shareholder.sol\\\";\\nimport \\\"../def/TokenDiscount.sol\\\";\\n\\nstruct ArtistContractConfig {\\n    string name;\\n    string symbol;\\n    address[] withdrawAdmins;\\n    address[] stateAdmins;\\n    address[] mintForFree;\\n    uint256 initialPrice;\\n    uint256 supplyCap;\\n    uint256 maxBatchSize;\\n    Shareholder[] shareholders;\\n    TokenDiscountInput[] tokenDiscounts;\\n}\\n\"\r\n    },\r\n    \"contracts/core/def/CustomErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/// @dev triggered when an address is the null address\\nerror NullAddress();\\n\\nerror TokenDoesNotExist(uint256 tokenId);\\nerror TokenAlreadyExists(uint256 tokenId);\\n\\nerror SafeTransferFailed(address from, address to, uint256 tokenId);\\n\\nerror TargetNonERC721Receiver(address target);\\n\\nerror TransferUnauthorized(\\n    address sender,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    address tokenOwner\\n);\\n\\nerror IndexOutOfBounds(uint256 index, uint256 max);\\n\\nerror ApprovalForAllInvalid(address target, bool targetState);\\nerror ApprovalInvalid(address account, uint256 tokenId);\\nerror ApprovalUnauthorized(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    address sender\\n);\\nerror OperationFailed();\\n\\nerror InvalidAmount(uint256 amount, uint256 minAmount, uint256 maxAmount);\\nerror AmountExceedsCap(uint256 amount, uint256 available, uint256 cap);\\nerror InvalidMessageValue(uint256 value, uint256 needed);\\nerror ZeroShares();\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgSnapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title ISnapshottable\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for simple snapshots of all tokens\\ninterface IOmmgSnapshot {\\n    enum TokenStatus {\\n        OWNED,\\n        BURNED\\n    }\\n    struct TokenInfo {\\n        uint256 tokenId;\\n        TokenStatus status;\\n        address owner;\\n    }\\n\\n    /// @notice Returns an array of tuples [tokenId, tokenStatus, owner] with the\\n    /// current state of each minted token. A tokenStatus of 0 means it exists, 1 signals that\\n    /// the token has been burned.\\n    /// @return tokenStates the states of all minted tokens\\n    function snapshot() external view returns (TokenInfo[] memory tokenStates);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/impl/OmmgOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IOmmgOwnable.sol\\\";\\nimport \\\"../def/CustomErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\npragma solidity ^0.8.11;\\n\\nabstract contract OmmgOwnable is IOmmgOwnable, Context, ERC165 {\\n    address private _owner;\\n\\n    /// @dev Initializes the contract setting the deployer as the initial owner.\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    ///@dev Reverts if called by any account other than the owner\\n    modifier onlyOwner() {\\n        if (owner() != _msgSender())\\n            revert OwnershipUnauthorized(_msgSender());\\n        _;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /// @dev Leaves the contract without owner. It will not be possible to call\\n    /// `onlyOwner` functions anymore. Can only be called by the current owner\\n    function renounceOwnershipPermanently() public override onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        if (newOwner == address(0)) revert NullAddress();\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOmmgOwnable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgAccessControl\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice This interface serves for a lightweight custom implementation of role based permissions.\\ninterface IOmmgAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n    }\\n\\n    /// @notice Triggers when an unauthorized address attempts\\n    /// a restricted action\\n    /// @param account initiated the unauthorized action\\n    /// @param missingRole the missing role identifier\\n    error Unauthorized(address account, bytes32 missingRole);\\n\\n    /// @notice Emitted when `account` is granted `role`\\n    /// @param role the role granted\\n    /// @param account the account that is granted `role`\\n    /// @param sender the address that initiated this action\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /// @notice Emitted when `account` is revoked `role`\\n    /// @param role the role revoked\\n    /// @param account the account that is revoked `role`\\n    /// @param sender the address that initiated this action\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /// @notice Returns `true` if `account` has been granted `role`.\\n    /// @param role the role identifier\\n    /// @param account the account to check\\n    /// @return hasRole whether `account` has `role` or not.\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool hasRole);\\n\\n    /// @notice Grants `role` to `account`. Emits {RoleGranted}.\\n    /// @param role the role identifier\\n    /// @param account the account to grant `role` to\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /// @notice Grants `role` to `account`. Emits {RoleRevoked}.\\n    /// @param role the role identifier\\n    /// @param account the account to revoke `role` from\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /// @notice Rennounces `role` from the calling account. Emits {RoleRevoked}.\\n    /// @param role the role identifier of the role to rennounce\\n    function renounceRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOmmgOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n//  .----------------.  .----------------.  .----------------.  .----------------.\\n// | .--------------. || .--------------. || .--------------. || .--------------. |\\n// | |     ____     | || | ____    ____ | || | ____    ____ | || |    ______    | |\\n// | |   .'    `.   | || ||_   \\\\  /   _|| || ||_   \\\\  /   _|| || |  .' ___  |   | |\\n// | |  /  .--.  \\\\  | || |  |   \\\\/   |  | || |  |   \\\\/   |  | || | / .'   \\\\_|   | |\\n// | |  | |    | |  | || |  | |\\\\  /| |  | || |  | |\\\\  /| |  | || | | |    ____  | |\\n// | |  \\\\  `--'  /  | || | _| |_\\\\/_| |_ | || | _| |_\\\\/_| |_ | || | \\\\ `.___]  _| | |\\n// | |   `.____.'   | || ||_____||_____|| || ||_____||_____|| || |  `._____.'   | |\\n// | |              | || |              | || |              | || |              | |\\n// | '--------------' || '--------------' || '--------------' || '--------------' |\\n//  '----------------'  '----------------'  '----------------'  '----------------'\\n\\n/// @title IOmmgProvenanceHash\\n/// @author NotAMeme aka nxlogixnick\\n/// @notice An interface for a custom implementation of Ownable contracts.\\ninterface IOmmgOwnable {\\n    /// @dev Triggers when an unauthorized address attempts\\n    /// a restricted action\\n    /// @param account initiated the unauthorized action\\n    error OwnershipUnauthorized(address account);\\n    /// @dev Triggers when the ownership is transferred\\n    /// @param previousOwner the previous owner of the contract\\n    /// @param newOwner the new owner of the contract\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Returns the current owner address.\\n    /// @return owner the address of the current owner\\n    function owner() external view returns (address owner);\\n\\n    /// @notice Leaves the contract without owner. It will not be possible to call\\n    /// `onlyOwner` functions anymore. Can only be called by the current owner.\\n    /// Triggers the {OwnershipTransferred} event.\\n    function renounceOwnershipPermanently() external;\\n\\n    /// @notice Transfers the ownership to `newOwner`.\\n    /// Triggers the {OwnershipTransferred} event.\\n    /// `newOwner` can not be the zero address.\\n    /// @param newOwner the new owner of the contract\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/def/TokenDiscount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nstruct TokenDiscountConfig {\\n    uint256 price;\\n    uint256 supply;\\n    bool active;\\n}\\nstruct TokenDiscountInput {\\n    IERC721 tokenAddress;\\n    TokenDiscountConfig config;\\n}\\nstruct TokenDiscountOutput {\\n    IERC721 tokenAddress;\\n    string name;\\n    string symbol;\\n    uint256 usedAmount;\\n    TokenDiscountConfig config;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/core/def/Shareholder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nstruct Shareholder {\\n    address addr;\\n    uint256 shares;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"withdrawAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stateAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"mintForFree\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct Shareholder[]\",\"name\":\"shareholders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenDiscountInput[]\",\"name\":\"tokenDiscounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ArtistContractConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"AmountExceedsCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"targetState\",\"type\":\"bool\"}],\"name\":\"ApprovalForAllInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ApprovalUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InvalidMessageValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataIsFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnershipUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProvenanceHashIsFrozen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ShareholderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ShareholderDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetNonERC721Receiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"TokenNotOwned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"name\":\"TokenSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"TransferUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"missingRole\",\"type\":\"bytes32\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProvenanceHashFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provenanceHash\",\"type\":\"string\"}],\"name\":\"ProvenanceHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"SaleIsActiveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"SetBaseUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fullOverride\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokenRevealedOverride\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"SetTokenUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ShareholderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ShareholderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ShareholderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"TokenDiscountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenDiscountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenDiscountReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"TokenDiscountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUsedForDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"unrevealedTokenURI\",\"type\":\"string\"}],\"name\":\"UnrevealedTokenUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Artist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_FREE_ACQUIRE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_STATE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_WITHDRAW_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquire\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireForCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"acquireWithToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"addShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addTokenDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"overridesFullURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenanceFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenanceHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"removeShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnershipPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"resetTokenDiscountUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revealToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provenanceHash_\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSaleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setTokenDiscountActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overrideBaseURI\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideReveal\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"unrevealedTokenURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct Shareholder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IOmmgSnapshot.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IOmmgSnapshot.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenDiscountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenDiscountOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDiscounts\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenDiscountOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"tokensUsedForDiscount\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"used\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updatedShares\",\"type\":\"uint256\"}],\"name\":\"updateShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct TokenDiscountConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"updateTokenDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DuckylemonGenesis", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000001aa535d3d0c00000000000000000000000000000000000000000000000000000000000000000096000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000124475636b796c656d6f6e2047656e6573697300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003444c4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b25269b24c367beb9eb7102d569b10d86a3b1a440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b25269b24c367beb9eb7102d569b10d86a3b1a440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b25269b24c367beb9eb7102d569b10d86a3b1a440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b5651a4a8c4ce095f56558a08a1fd1defd2fc6b700000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f7cf6747c81829585f18e8021d267fd4866e5189000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000000000000000008c0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}