{"status": "1", "message": "OK", "result": [{"SourceCode": "// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u289b\u28c9\u2800\u2800\u28e4\u28f4\u28f6\u2844\u2800\u2800\u2800\u2809\u2819\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2820\u28fe\u28ff\u28ff\u28f6\u28b6\u28ff\u28ff\u28ff\u28f7\u28c4\u2840\u2800\u28c0\u28ff\u28f7\u28e4\u2848\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u281f\u2800\u2800\u2800\u2808\u28bf\u285f\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u28ff\u28e6\u2848\u28bf\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u280f\u2880\u2800\u2800\u2800\u2800\u28fe\u28ff\u28e4\u28e0\u28fc\u28ff\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u2847\u2800\u2800\u28fb\u28ff\u2844\u28bb\u28ff\u28ff\r\n// \u28ff\u287f\u2800\u28ff\u28e6\u28e4\u28e4\u28fe\u28ff\u28ff\u28ff\u28ff\u281f\u2801\u2800\u2800\u2800\u2800\u2819\u28ff\u28ff\u28ff\u28f6\u28f6\u28ff\u28ff\u28f7\u2800\u28bf\u28ff\r\n// \u28ff\u2847\u28b8\u283f\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u285f\u280b\u2809\u2809\u283b\u28ff\u2846\u28b8\u28ff\r\n// \u28ff\u28e7\u2800\u2800\u2800\u28ff\u28ff\u287f\u280b\u2809\u281b\u28ff\u28e7\u2840\u2800\u2800\u2800\u2800\u28e0\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u280b\u2880\u28fe\u28ff\r\n// \u28ff\u28ff\u28f7\u28c4\u2848\u281b\u283b\u2807\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28f7\u28f6\u28f6\u28ff\u28ff\u287f\u283f\u2837\u2800\u2800\u28c0\u28e4\u28f6\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28f6\u28f6\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28f4\u28b6\u28f6\u28f6\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28e6\u28e4\u28e4\u28e4\u28f4\u28f6\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n// shout outs:\r\n// to dom, timshel, loot community and goblenz for the inspiration\r\n// to msc18, 124, SHZ, og mushroomers and cool guys from thai and nigeria\r\n// to mushrooms \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n// =========================\r\n// for the web3 frens with love\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n// File: ECDSA.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n// File: Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: Payment.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\r\n * that the Ether will be split in this way, since it is handled transparently by the contract.\r\n *\r\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\r\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\r\n * an amount proportional to the percentage of total shares they were assigned.\r\n *\r\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\r\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\r\n * function.\r\n *\r\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\r\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\r\n * to run tests before sending real value to this contract.\r\n */\r\ncontract Payment is Context {\r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalReleased;\r\n\r\n    mapping(address => uint256) private _shares;\r\n    mapping(address => uint256) private _released;\r\n    address[] private _payees;\r\n\r\n    /**\r\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\r\n     * the matching position in the `shares` array.\r\n     *\r\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\r\n     * duplicates in `payees`.\r\n     */\r\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\r\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\r\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\r\n\r\n        for (uint256 i = 0; i < payees.length; i++) {\r\n            _addPayee(payees[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive() external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by an account.\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to a payee.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Getter for the address of the payee number `index`.\r\n     */\r\n    function payee(uint256 index) public view returns (address) {\r\n        return _payees[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\r\n     * total shares and their previous withdrawals.\r\n     */\r\n    function release(address payable account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = address(this).balance + totalReleased();\r\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _released[account] += payment;\r\n        _totalReleased += payment;\r\n\r\n        Address.sendValue(account, payment);\r\n        emit PaymentReleased(account, payment);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\r\n     * already released amounts.\r\n     */\r\n    function _pendingPayment(\r\n        address account,\r\n        uint256 totalReceived,\r\n        uint256 alreadyReleased\r\n    ) private view returns (uint256) {\r\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new payee to the contract.\r\n     * @param account The address of the payee to add.\r\n     * @param shares_ The number of shares owned by the payee.\r\n     */\r\n    function _addPayee(address account, uint256 shares_) private {\r\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\r\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\r\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\r\n\r\n        _payees.push(account);\r\n        _shares[account] = shares_;\r\n        _totalShares = _totalShares + shares_;\r\n        emit PayeeAdded(account, shares_);\r\n    }\r\n}\r\n// File: IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n// File: IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n// File: IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n// File: IERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n// File: IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n// File: ERC721A.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    uint256 internal currentIndex;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        require(index < totalSupply(), 'ERC721A: global index out of bounds');\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx;\r\n        address currOwnershipAddr;\r\n\r\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\r\n        unchecked {\r\n            for (uint256 i; i < numMintedSoFar; i++) {\r\n                TokenOwnership memory ownership = _ownerships[i];\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    if (tokenIdsIdx == index) {\r\n                        return i;\r\n                    }\r\n                    tokenIdsIdx++;\r\n                }\r\n            }\r\n        }\r\n\r\n        revert('ERC721A: unable to get token of owner by index');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), 'ERC721A: balance query for the zero address');\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(owner != address(0), 'ERC721A: number minted query for the zero address');\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');\r\n\r\n        unchecked {\r\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n            }\r\n        }\r\n\r\n        revert('ERC721A: unable to determine the owner of token');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, 'ERC721A: approval to current owner');\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            'ERC721A: approve caller is not owner nor approved for all'\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != _msgSender(), 'ERC721A: approve to caller');\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            'ERC721A: transfer to non ERC721Receiver implementer'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = currentIndex;\r\n        require(to != address(0), 'ERC721A: mint to the zero address');\r\n        require(quantity != 0, 'ERC721A: quantity must be greater than 0');\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\r\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint128(quantity);\r\n            _addressData[to].numberMinted += uint128(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (safe) {\r\n                    require(\r\n                        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n                        'ERC721A: transfer to non ERC721Receiver implementer'\r\n                    );\r\n                }\r\n\r\n                updatedIndex++;\r\n            }\r\n\r\n            currentIndex = updatedIndex;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');\r\n\r\n        require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');\r\n        require(to != address(0), 'ERC721A: transfer to the zero address');\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            _ownerships[tokenId].addr = to;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                if (_exists(nextTokenId)) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert('ERC721A: transfer to non ERC721Receiver implementer');\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\n/// @title ERC-5050 Token Interaction Standard\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-xxx\r\ninterface IERC5050Sender {\r\n    /// @notice Send an action to the target address\r\n    /// @dev The action's `fromContract` is automatically set to `address(this)`,\r\n    /// and the `from` parameter is set to `msg.sender`.\r\n    /// @param action The action to send\r\n    function sendAction(Action memory action) external payable;\r\n\r\n    /// @notice Check if an action is valid based on its hash and nonce\r\n    /// @dev When an action passes through all three possible contracts\r\n    /// (`fromContract`, `to`, and `state`) the `state` contract validates the\r\n    /// action with the initating `fromContract` using a nonced action hash.\r\n    /// This hash is calculated and saved to storage on the `fromContract` before\r\n    /// action handling is initiated. The `state` contract calculates the hash\r\n    /// and verifies it and nonce with the `fromContract`.\r\n    /// @param _hash The hash to validate\r\n    /// @param _nonce The nonce to validate\r\n    function isValid(bytes32 _hash, uint256 _nonce) external returns (bool);\r\n\r\n    /// @notice Retrieve list of actions that can be sent.\r\n    /// @dev Intended for use by off-chain applications to query compatible contracts,\r\n    /// and to advertise functionality in human-readable form.\r\n    function sendableActions() external view returns (string[] memory);\r\n\r\n    /// @notice Change or reaffirm the approved address for an action\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the `_account`, or an authorized\r\n    ///  operator of the `_account`.\r\n    /// @param _account The account of the account-action pair to approve\r\n    /// @param _action The action of the account-action pair to approve\r\n    /// @param _approved The new approved account-action controller\r\n    function approveForAction(\r\n        address _account,\r\n        bytes4 _action,\r\n        address _approved\r\n    ) external returns (bool);\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to conduct\r\n    ///  all actions on behalf of `msg.sender`\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  an unbounded number of operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAllActions(address _operator, bool _approved)\r\n        external;\r\n\r\n    /// @notice Get the approved address for an account-action pair\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _account The account of the account-action to find the approved address for\r\n    /// @param _action The action of the account-action to find the approved address for\r\n    /// @return The approved address for this account-action, or the zero address if\r\n    ///  there is none\r\n    function getApprovedForAction(address _account, bytes4 _action)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _account The address on whose behalf actions are performed\r\n    /// @param _operator The address that acts on behalf of the account\r\n    /// @return True if `_operator` is an approved operator for `_account`, false otherwise\r\n    function isApprovedForAllActions(address _account, address _operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev This emits when an action is sent (`sendAction()`)\r\n    event SendAction(\r\n        bytes4 indexed name,\r\n        address _from,\r\n        address indexed _fromContract,\r\n        uint256 _tokenId,\r\n        address indexed _to,\r\n        uint256 _toTokenId,\r\n        address _state,\r\n        bytes _data\r\n    );\r\n\r\n    /// @dev This emits when the approved address for an account-action pair\r\n    ///  is changed or reaffirmed. The zero address indicates there is no\r\n    ///  approved address.\r\n    event ApprovalForAction(\r\n        address indexed _account,\r\n        bytes4 indexed _action,\r\n        address indexed _approved\r\n    );\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an account.\r\n    ///  The operator can conduct all actions on behalf of the account.\r\n    event ApprovalForAllActions(\r\n        address indexed _account,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n}\r\n\r\ninterface IERC5050Receiver {\r\n    /// @notice Handle an action\r\n    /// @dev Both the `to` contract and `state` contract are called via\r\n    /// `onActionReceived()`.\r\n    /// @param action The action to handle\r\n    function onActionReceived(Action calldata action, uint256 _nonce)\r\n        external\r\n        payable;\r\n\r\n    /// @notice Retrieve list of actions that can be received.\r\n    /// @dev Intended for use by off-chain applications to query compatible contracts,\r\n    /// and to advertise functionality in human-readable form.\r\n    function receivableActions() external view returns (string[] memory);\r\n\r\n    /// @dev This emits when a valid action is received.\r\n    event ActionReceived(\r\n        bytes4 indexed name,\r\n        address _from,\r\n        address indexed _fromContract,\r\n        uint256 _tokenId,\r\n        address indexed _to,\r\n        uint256 _toTokenId,\r\n        address _state,\r\n        bytes _data\r\n    );\r\n}\r\n\r\n/// @param _address The address of the interactive object\r\n/// @param tokenId The token that is interacting (optional)\r\nstruct Object {\r\n    address _address;\r\n    uint256 _tokenId;\r\n}\r\n\r\n/// @param selector The bytes4(keccack256()) encoding of the action string\r\n/// @param user The address of the sender\r\n/// @param from The initiating object\r\n/// @param to The receiving object\r\n/// @param state The state contract\r\n/// @param data Additional data with no specified format\r\nstruct Action {\r\n    bytes4 selector;\r\n    address user;\r\n    Object from;\r\n    Object to;\r\n    address state;\r\n    bytes data;\r\n}\r\n\r\n// Barely modified version of OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary ActionsSet {\r\n    struct Set {\r\n        // Storage of action names\r\n        string[] _names;\r\n        // Storage of action selectors\r\n        bytes4[] _selectors;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes4 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Set storage set, string memory name) internal returns (bool) {\r\n        bytes4 selector = bytes4(keccak256(bytes(name)));\r\n        if (!contains(set, selector)) {\r\n            set._selectors.push(selector);\r\n            set._names.push(name);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[selector] = set._selectors.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Set storage set, bytes4 value) internal returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _selectors array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._selectors.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes4 lastValue = set._selectors[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._selectors[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._selectors.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Set storage set, bytes4 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(Set storage set) internal view returns (uint256) {\r\n        return set._selectors.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Set storage set, uint256 index) internal view returns (bytes4) {\r\n        return set._selectors[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set of action names\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function names(Set storage set) internal view returns (string[] memory) {\r\n        return set._names;\r\n    }\r\n    \r\n    /**\r\n     * @dev Return the entire set of action selectors\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function selectors(Set storage set) internal view returns (bytes4[] memory) {\r\n        return set._selectors;\r\n    }\r\n    \r\n    \r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\ninterface IControllable {\r\n    event ControllerApproval(\r\n        address indexed _controller,\r\n        bytes4 indexed _action\r\n    );\r\n    \r\n    event ControllerApprovalForAll(\r\n        address indexed _controller,\r\n        bool _approved\r\n    );\r\n    \r\n    function approveController(address _controller, bytes4 _action)\r\n        external;\r\n\r\n    function setControllerApprovalForAll(address _controller, bool _approved)\r\n        external;\r\n\r\n    function isApprovedController(address _controller, bytes4 _action)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\ncontract Controllable is IControllable {\r\n    mapping(address => mapping(bytes4 => bool)) private _actionControllers;\r\n    mapping(address => bool) private _universalControllers;\r\n\r\n    function approveController(address _controller, bytes4 _action)\r\n        external\r\n        virtual\r\n    {\r\n        _actionControllers[_controller][_action] = true;\r\n        emit ControllerApproval(\r\n            _controller,\r\n            _action\r\n        );\r\n    }\r\n    \r\n    function setControllerApprovalForAll(address _controller, bool _approved)\r\n        external\r\n        virtual\r\n    {\r\n        _universalControllers[_controller] = _approved;\r\n        emit ControllerApprovalForAll(\r\n            _controller,\r\n            _approved\r\n        );\r\n    }\r\n\r\n    function isApprovedController(address _controller, bytes4 _action)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isApprovedController(_controller, _action);\r\n    }\r\n\r\n    function _isApprovedController(address _controller, bytes4 _action)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_universalControllers[_controller]) {\r\n            return true;\r\n        }\r\n        return _actionControllers[_controller][_action];\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\ncontract ERC5050Sender is Controllable, IERC5050Sender {\r\n    using Address for address;\r\n    using ActionsSet for ActionsSet.Set;\r\n\r\n    ActionsSet.Set _sendableActions;\r\n\r\n    uint256 private _nonce;\r\n    bytes32 private _hash;\r\n\r\n    mapping(address => mapping(bytes4 => address)) actionApprovals;\r\n    mapping(address => mapping(address => bool)) operatorApprovals;\r\n\r\n    function sendAction(Action memory action)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n    {\r\n        _sendAction(action);\r\n    }\r\n\r\n    function isValid(bytes32 actionHash, uint256 nonce)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return actionHash == _hash && nonce == _nonce;\r\n    }\r\n\r\n    function sendableActions() external view returns (string[] memory) {\r\n        return _sendableActions.names();\r\n    }\r\n\r\n    modifier onlySendableAction(Action memory action) {\r\n        if (_isApprovedController(msg.sender, action.selector)) {\r\n            return;\r\n        }\r\n        require(\r\n            _sendableActions.contains(action.selector),\r\n            \"ERC5050: invalid action\"\r\n        );\r\n        require(\r\n            _isApprovedOrSelf(action.user, action.selector),\r\n            \"ERC5050: unapproved sender\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function approveForAction(\r\n        address _account,\r\n        bytes4 _action,\r\n        address _approved\r\n    ) public virtual override returns (bool) {\r\n        require(_approved != _account, \"ERC5050: approve to caller\");\r\n\r\n        require(\r\n            msg.sender == _account ||\r\n                isApprovedForAllActions(_account, msg.sender),\r\n            \"ERC5050: approve caller is not account nor approved for all\"\r\n        );\r\n\r\n        actionApprovals[_account][_action] = _approved;\r\n        emit ApprovalForAction(_account, _action, _approved);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setApprovalForAllActions(address _operator, bool _approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(msg.sender != _operator, \"ERC5050: approve to caller\");\r\n\r\n        operatorApprovals[msg.sender][_operator] = _approved;\r\n\r\n        emit ApprovalForAllActions(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApprovedForAction(address _account, bytes4 _action)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return actionApprovals[_account][_action];\r\n    }\r\n\r\n    function isApprovedForAllActions(address _account, address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return operatorApprovals[_account][_operator];\r\n    }\r\n\r\n    function _sendAction(Action memory action) internal {\r\n        if (!_isApprovedController(msg.sender, action.selector)) {\r\n            action.from._address = address(this);\r\n            bool toIsContract = action.to._address.isContract();\r\n            bool stateIsContract = action.state.isContract();\r\n            address next;\r\n            if (toIsContract) {\r\n                next = action.to._address;\r\n            } else if (stateIsContract) {\r\n                next = action.state;\r\n            }\r\n            uint256 nonce;\r\n            if (toIsContract && stateIsContract) {\r\n                _validate(action);\r\n                nonce = _nonce;\r\n            }\r\n            if (next.isContract()) {\r\n                try\r\n                    IERC5050Receiver(next).onActionReceived{value: msg.value}(\r\n                        action,\r\n                        nonce\r\n                    )\r\n                {} catch Error(string memory err) {\r\n                    revert(err);\r\n                } catch (bytes memory returnData) {\r\n                    if (returnData.length > 0) {\r\n                        revert(string(returnData));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        emit SendAction(\r\n            action.selector,\r\n            action.user,\r\n            action.from._address,\r\n            action.from._tokenId,\r\n            action.to._address,\r\n            action.to._tokenId,\r\n            action.state,\r\n            action.data\r\n        );\r\n    }\r\n\r\n    function _validate(Action memory action) internal {\r\n        ++_nonce;\r\n        _hash = bytes32(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    action.selector,\r\n                    action.user,\r\n                    action.from._address,\r\n                    action.from._tokenId,\r\n                    action.to._address,\r\n                    action.to._tokenId,\r\n                    action.state,\r\n                    action.data,\r\n                    _nonce\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function _isApprovedOrSelf(address account, bytes4 action)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (msg.sender == account ||\r\n            isApprovedForAllActions(account, msg.sender) ||\r\n            getApprovedForAction(account, action) == msg.sender);\r\n    }\r\n\r\n    function _registerSendable(string memory action) internal {\r\n        _sendableActions.add(action);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\n\r\ncontract ERC5050Receiver is Controllable, IERC5050Receiver {\r\n    using Address for address;\r\n    using ActionsSet for ActionsSet.Set;\r\n\r\n    ActionsSet.Set _receivableActions;\r\n\r\n    modifier onlyReceivableAction(Action calldata action, uint256 nonce) {\r\n        if (_isApprovedController(msg.sender, action.selector)) {\r\n            return;\r\n        }\r\n        require(\r\n            action.to._address == address(this),\r\n            \"ERC5050: invalid receiver\"\r\n        );\r\n        require(\r\n            _receivableActions.contains(action.selector),\r\n            \"ERC5050: invalid action\"\r\n        );\r\n        require(\r\n            action.from._address == address(0) ||\r\n                action.from._address == msg.sender,\r\n            \"ERC5050: invalid sender\"\r\n        );\r\n        require(\r\n            (action.from._address != address(0) && action.user == tx.origin) ||\r\n                action.user == msg.sender,\r\n            \"ERC5050: invalid sender\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function receivableActions() external view returns (string[] memory) {\r\n        return _receivableActions.names();\r\n    }\r\n\r\n    function onActionReceived(Action calldata action, uint256 nonce)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        onlyReceivableAction(action, nonce)\r\n    {\r\n        _onActionReceived(action, nonce);\r\n    }\r\n\r\n    function _onActionReceived(Action calldata action, uint256 nonce)\r\n        internal\r\n        virtual\r\n    {\r\n        if (!_isApprovedController(msg.sender, action.selector)) {\r\n            if (action.state != address(0)) {\r\n                require(action.state.isContract(), \"ERC5050: invalid state\");\r\n                try\r\n                    IERC5050Receiver(action.state).onActionReceived{\r\n                        value: msg.value\r\n                    }(action, nonce)\r\n                {} catch (bytes memory reason) {\r\n                    if (reason.length == 0) {\r\n                        revert(\"ERC5050: call to non ERC5050Receiver\");\r\n                    } else {\r\n                        assembly {\r\n                            revert(add(32, reason), mload(reason))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        emit ActionReceived(\r\n            action.selector,\r\n            action.user,\r\n            action.from._address,\r\n            action.from._tokenId,\r\n            action.to._address,\r\n            action.to._tokenId,\r\n            action.state,\r\n            action.data\r\n        );\r\n    }\r\n\r\n    function _registerReceivable(string memory action) internal {\r\n        _receivableActions.add(action);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**********************************************************\\\r\n* Author: alxi <chitch@alxi.nl> (https://twitter.com/0xalxi)\r\n* EIP-5050 Token Interaction Standard: [tbd]\r\n*\r\n* Implementation of an interactive token protocol.\r\n/**********************************************************/\r\n\r\ncontract ERC5050 is ERC5050Sender, ERC5050Receiver {\r\n    function _registerAction(string memory action) internal {\r\n        _registerReceivable(action);\r\n        _registerSendable(action);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IToken {\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract terrariumClub is ERC721A, ERC5050, Ownable, ReentrancyGuard {  \r\n    using Strings for uint256;\r\n    string public _shroomies;\r\n    string public _magicShroomies;\r\n    string public mycelianTruth = unicode\"\u3064\u25d5_\u25d5\u3064 \ud83c\udf44\";\r\n    bool public mushroomization = false;\r\n    uint256 public mushrooms = 10000;\r\n    uint256 public royalSpores = 10;\r\n    uint256 public myceliumMana = 420;\r\n    uint256 public grewUpOnTheDead = 0;\r\n    uint256 public shroomsMintLimit = 24;\r\n    bool public teamMinted = false;\r\n    mapping(address => bool) public claimStatuses;\r\n    mapping(address => uint256) public mushroomCounter;\r\n    mapping(uint256 => bool) public sporeMushrooms;\r\n    mapping(uint256 => bool) public magicMushrooms;\r\n    mapping(uint256 => uint256) public eatCooldown;\r\n    mapping(uint256 => bool) public isRoyal;\r\n\r\n    address spells;\r\n\r\n    bytes4 public constant CAST_SELECTOR = bytes4(keccak256(\"cast\"));\r\n    bytes4 public constant EAT_SHROOM_SELECTOR = bytes4(keccak256(\"eat_shroom\"));\r\n\r\n    uint256 constant MUSHROOM_PRICE = 0.0420 ether;\r\n    uint256 constant LEET_PRICE = 0.31337 ether;\r\n\r\n\r\n    event MushroomEaten(uint shroomId);\r\n\r\n\tconstructor() ERC721A(\"terrariumClub\", \"SHROOM\") {\r\n        _registerReceivable(\"cast\");\r\n        _registerReceivable(\"eat_shroom\");\r\n    }\r\n\r\n    address constant internal fertile_ground = 0x000000000000000000000000000000000000dEaD;\r\n    address constant internal goblintown_address = 0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e;\r\n    address constant internal hyperloot_address = 0x0290d49f53A8d186973B82faaFdaFe696B29AcBb;\r\n    address constant internal loot_address = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\r\n    address constant internal genesis_adventurers_address = 0x8dB687aCEb92c66f013e1D614137238Cc698fEdb;\r\n    address constant internal cryptoadz_address = 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6;\r\n    address constant internal blitnauts_address = 0x448f3219CF2A23b0527A7a0158e7264B87f635Db;\r\n    address constant internal chainrunners_address = 0x97597002980134beA46250Aa0510C9B90d87A587;\r\n    address constant internal nouns_address = 0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03;\r\n    address constant internal wagdie_address = 0x659A4BdaAaCc62d2bd9Cb18225D9C89b5B697A5A;\r\n    address constant internal grugs_lair_address = 0xFA9Ed22ca5D329eCaee9347F72E18C1fC291471b;\r\n\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _shroomies;\r\n    }\r\n\r\n    function _magicURI() internal view virtual returns (string memory) {\r\n        return _magicShroomies;\r\n    }\r\n\r\n\r\n    // for cc0 frens \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n \tfunction claimMushroom() external nonReentrant {\r\n  \t    uint256 shroomId = totalSupply();\r\n        require(mushroomization, \"Mushroomization isn't started\");\r\n        require(shroomId < mushrooms, \"No spores left...\");\r\n        require(msg.sender == tx.origin);\r\n    \trequire(!claimStatuses[msg.sender], \"Mushroom already claimed\");\r\n        require(\r\n            IToken(goblintown_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(hyperloot_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(loot_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(genesis_adventurers_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(cryptoadz_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(blitnauts_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(chainrunners_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(nouns_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(wagdie_address).balanceOf(msg.sender) > 0 ||\r\n            IToken(grugs_lair_address).balanceOf(msg.sender) > 0,\r\n            \"u dont l00k l1k3 cc0 / fren =_=\"\r\n        );\r\n        _safeMint(msg.sender, 1);\r\n        claimStatuses[msg.sender] = true;\r\n        sporeMushrooms[shroomId] = true;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\ud83d\ude4f\r\n    function mintMushrooms(uint256 _mushrooms) external payable nonReentrant mintConditions(_mushrooms) {\r\n        uint256 mintedMushrooms = mushroomCounter[msg.sender];\r\n        require(mintedMushrooms + _mushrooms <= shroomsMintLimit, \"User max mint limit\");\r\n        require(msg.value >= (MUSHROOM_PRICE * _mushrooms), unicode\"Wow, pls attach 0.0420 ether per mushroom \u3064\u25d5_\u25d5\u3064\");\r\n        _safeMint(msg.sender, _mushrooms);\r\n        mushroomCounter[msg.sender] = (mintedMushrooms + _mushrooms);\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\ud83d\udc80\r\n    function rebirthTheDead() external nonReentrant mintConditions(1) {\r\n    \trequire(!claimStatuses[msg.sender], \"Mushroom already claimed\");\r\n        require(\r\n            grewUpOnTheDead < IToken(wagdie_address).balanceOf(fertile_ground),\r\n            \"All the dead already reborn.\"\r\n        );\r\n        _safeMint(msg.sender, 1);\r\n        grewUpOnTheDead += 1;\r\n        claimStatuses[msg.sender] = true;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\ud83d\udc51\r\n    function mintRoyal() external payable nonReentrant {\r\n        uint256 shroomId = totalSupply();\r\n        require(mushroomization, \"Mushroomization isn't started\");\r\n        require(royalSpores > 0, \"No more leet spores...\");\r\n        require(shroomId < mushrooms, \"No spores left...\");\r\n        require(msg.sender == tx.origin);\r\n        require(msg.value >= LEET_PRICE, unicode\"Royal Shrooms requiring \u3064\u25d5_\u25d5\u3064 0.31337 ether\");\r\n        _safeMint(msg.sender, 1);\r\n        royalSpores -= 1;\r\n        isRoyal[shroomId] = true;\r\n\r\n    }\r\n\r\n    // in case of mushroomed ser want to send a shroom to fren \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n    function dropSporeToFren(address fren, uint256 shroomId) external nonReentrant mintConditions(1) {\r\n        require(msg.sender != fren);\r\n        require(ownerOf(shroomId) == msg.sender);\r\n        require(sporeMushrooms[shroomId], \"no spores in ur shroom\");\r\n        _safeMint(fren, 1);\r\n        sporeMushrooms[shroomId] = false;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83d\udd2e\r\n    function onActionReceived(Action calldata action, uint256 _nonce)\r\n        external\r\n        payable\r\n        override\r\n        onlyReceivableAction(action, _nonce)\r\n    {\r\n        require(action.selector == CAST_SELECTOR || action.selector == EAT_SHROOM_SELECTOR, \"Mushrooms: invalid action.selector\");\r\n        if (action.selector == CAST_SELECTOR){\r\n            require(action.from._address == spells, \"Mushrooms: invalid action.from\");\r\n            require(action.user == ownerOf(action.to._tokenId), \"Mushrooms: sender not owner of this mushroom\");\r\n            require(!magicMushrooms[action.to._tokenId], \"Only one cast per tokenID\");\r\n            require(myceliumMana > 0, \"No mana left\");\r\n            magicMushrooms[action.to._tokenId] = true;\r\n            myceliumMana -= 1;\r\n        }\r\n        if (action.selector == EAT_SHROOM_SELECTOR){\r\n            require(action.user == ownerOf(action.to._tokenId), \"Mushrooms: sender not owner of this mushroom\");\r\n            require(eatCooldown[action.to._tokenId] - block.number < 5000, \"You can eat mushrooms only once per 5000 blocks\");\r\n            emit MushroomEaten(action.to._tokenId);\r\n            eatCooldown[action.to._tokenId] = block.number;\r\n        }\r\n        _onActionReceived(action, _nonce);\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83d\udcac\r\n    function broadcastMycelialMessage (uint256 shroomId, string calldata message) public {\r\n        require(msg.sender == ownerOf(shroomId), \"Mushrooms: sender not owner\");\r\n        require(isRoyal[shroomId], \"Mushroom isn't royal\");\r\n        mycelianTruth = message;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n \tfunction teamHarvest(uint256 _mushrooms) public onlyOwner {\r\n        require(!teamMinted);\r\n  \t    uint256 totalmushrooms = totalSupply();\r\n\t    require(totalmushrooms + _mushrooms <= mushrooms);\r\n        _safeMint(msg.sender, _mushrooms);\r\n        teamMinted = true;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n    function startMushroomization(bool _mushroomization) external onlyOwner {\r\n        mushroomization = _mushroomization;\r\n    }\r\n\r\n     // \u3064\u25d5_\u25d5\u3064 \ud83c\udf44\r\n    function visualize(string memory link) external onlyOwner {\r\n        _shroomies = link;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 \ud83d\udd2e\r\n    function doSomethingMagic(string memory magicLink) external onlyOwner {\r\n        _magicShroomies = magicLink;\r\n    }\r\n\r\n    // \u3064\u25d5_\u25d5\u3064 thought to rename but deployed to blockchain how it was in goblintown\r\n    function sumthinboutfunds() public payable onlyOwner {\r\n\t(bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n\t\trequire(success);\r\n\t}\r\n\r\n    function somethingAboutTokens(address token) external onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function setSpellsAddress(address _spells) external onlyOwner {\r\n        spells = _spells;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        string memory magicURI = _magicURI();\r\n        if (magicMushrooms[_tokenId] && bytes(magicURI).length != 0) {\r\n            return string(abi.encodePacked(magicURI, _tokenId.toString()));\r\n        }\r\n        else {\r\n            return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _tokenId.toString())) : '';\r\n        }\r\n    }\r\n\r\n    modifier mintConditions(uint256 _mushrooms) {\r\n        require(mushroomization, \"Mushroomization isn't started\");\r\n        require(totalSupply() + _mushrooms <= mushrooms, \"No spores left...\");\r\n        require(tx.origin == msg.sender, unicode\"\u0ca0_\u0ca0\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"name\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_state\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ActionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"}],\"name\":\"ApprovalForAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAllActions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"}],\"name\":\"ControllerApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ControllerApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shroomId\",\"type\":\"uint256\"}],\"name\":\"MushroomEaten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"name\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_state\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"SendAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EAT_SHROOM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_magicShroomies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shroomies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"}],\"name\":\"approveController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"}],\"name\":\"approveForAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shroomId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"broadcastMycelialMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMushroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimStatuses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"magicLink\",\"type\":\"string\"}],\"name\":\"doSomethingMagic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fren\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shroomId\",\"type\":\"uint256\"}],\"name\":\"dropSporeToFren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eatCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"}],\"name\":\"getApprovedForAction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grewUpOnTheDead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"}],\"name\":\"isApprovedController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAllActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRoyal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"magicMushrooms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mushrooms\",\"type\":\"uint256\"}],\"name\":\"mintMushrooms\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRoyal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mushroomCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mushroomization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mushrooms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mycelianTruth\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myceliumMana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Object\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Object\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"state\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Action\",\"name\":\"action\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"onActionReceived\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebirthTheDead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivableActions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalSpores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Object\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Object\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"state\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"name\":\"sendAction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendableActions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setControllerApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spells\",\"type\":\"address\"}],\"name\":\"setSpellsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shroomsMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"somethingAboutTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sporeMushrooms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mushroomization\",\"type\":\"bool\"}],\"name\":\"startMushroomization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumthinboutfunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mushrooms\",\"type\":\"uint256\"}],\"name\":\"teamHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"}],\"name\":\"visualize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "terrariumClub", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d0908a0a7508346349dac082e182c5f0af4b7587b78a7139da0117d0a3d79ac"}]}