{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ScumbugsNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./ScumbugsMetadata.sol\\\";\\r\\nimport \\\"./OpenseaProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n* @notice Smart contract for Scumbugs.\\r\\n* \u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u256e\u2571\u256d\u2533\u2501\u256e\u256d\u2501\u2533\u2501\u2501\u256e\u256d\u256e\u2571\u256d\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u256e\\r\\n* \u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\u2503\u2571\u2503\u2503\u2503\u2570\u256f\u2503\u2503\u256d\u256e\u2503\u2503\u2503\u2571\u2503\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\\r\\n* \u2503\u2570\u2501\u2501\u252b\u2503\u2571\u2570\u252b\u2503\u2571\u2503\u2503\u256d\u256e\u256d\u256e\u2503\u2570\u256f\u2570\u252b\u2503\u2571\u2503\u2503\u2503\u2571\u2570\u252b\u2570\u2501\u2501\u256e\\r\\n* \u2570\u2501\u2501\u256e\u2503\u2503\u2571\u256d\u252b\u2503\u2571\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u256d\u2501\u256e\u2503\u2503\u2571\u2503\u2503\u2503\u256d\u2501\u254b\u2501\u2501\u256e\u2503\\r\\n* \u2503\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2503\u2503\u2503\u2503\u2503\u2503\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2503\u2570\u253b\u2501\u2503\u2570\u2501\u256f\u2503\\r\\n* \u2570\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u256f\u2570\u256f\u2570\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u256f\\r\\n*/\\r\\ncontract ScumbugsNFT is ERC721A, Pausable, ScumbugsMetadata {\\r\\n\\r\\n    // ---------------------- Variables ----------------------\\r\\n    address private proxyRegistryAddress;\\r\\n    uint256 public unitPrice = 0.069 ether;\\r\\n    uint32 public constant supply = 15341;\\r\\n    uint16 public constant maxAmount = 20;\\r\\n    bool private isOpenSeaProxyActive = true;\\r\\n\\r\\n    \\r\\n    // ---------------------- Constructor ----------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     */\\r\\n    constructor(bytes32 _siteUrl, address _ScumbugsValues, address _proxyRegistryAddress) \\r\\n    ERC721A(\\\"Scumbugs\\\", \\\"SCUMBUGS\\\")\\r\\n    ScumbugsMetadata(_siteUrl, _ScumbugsValues)\\r\\n    {\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n        _safeMint(msg.sender, 341);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the tokenId of the last minted Scumbug.\\r\\n     */\\r\\n    function currentTokenId() view external returns (uint256) {\\r\\n        return _currentIndex - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints new NFT(s).\\r\\n     */\\r\\n    function mintNFT(uint16 amount) external payable whenNotPaused {\\r\\n        require(amount <= maxAmount, \\\"Can't mint more than max amount\\\");\\r\\n        require(msg.value >= (unitPrice * amount), \\\"Value should be equal or greater than unit price * amount\\\");\\r\\n        require((_currentIndex + amount - 1) < supply, \\\"Can't mint that amount of NFTs\\\");\\r\\n        _safeMint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the funds in the contract and sends them to the contract's owner\\r\\n     */\\r\\n    function withdraw() external {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generates and stores metadata for given token id\\r\\n     * @param metadataInput The data of the generated Scumbug\\r\\n     */\\r\\n    function generateMetadata_w1o(MetadataInput memory metadataInput) external onlyOwner {\\r\\n        uint256 tokenId = metadataInput.tokenId;\\r\\n        bool generated = isGenerated(tokenId);\\r\\n        require(!generated, \\\"Metadata already generated for tokenId\\\");\\r\\n        require(_currentIndex > tokenId, \\\"NFT with tokenId does not exist\\\");\\r\\n        delete generated;\\r\\n        attributesMap[tokenId] = Attributes({\\r\\n            hand: metadataInput.hand,\\r\\n            body: metadataInput.body,\\r\\n            eyes: metadataInput.eyes,\\r\\n            head: metadataInput.head,\\r\\n            mouth: metadataInput.mouth,\\r\\n            background_color: metadataInput.background_color,\\r\\n            bug_type: metadataInput.bug_type,\\r\\n            birthday: metadataInput.birthday\\r\\n        });\\r\\n        txhashes[tokenId] = metadataInput.txHash;\\r\\n        mediaIds1[tokenId] = metadataInput.mediaId1;\\r\\n        mediaIds2[tokenId] = metadataInput.mediaId2;\\r\\n        mediaBdayIds1[tokenId] = metadataInput.mediaBdayId1;\\r\\n        mediaBdayIds2[tokenId] = metadataInput.mediaBdayId2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets siteUrl new value\\r\\n     */\\r\\n    function setSiteUrl(bytes32 _siteUrl) external onlyOwner {\\r\\n        siteUrl = _siteUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the unit price\\r\\n     */\\r\\n    function setUnitPrice(uint256 _unitPrice) external onlyOwner whenPaused {\\r\\n        unitPrice = _unitPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override tokenURI to return json instead of URI.\\r\\n     * Taken from GenesisRepot: https://etherscan.io/address/0x5d4683ba64ee6283bb7fdb8a91252f6aab32a110#code\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\r\\n        return _render(tokenId);\\r\\n    }\\r\\n\\r\\n    // function to disable gasless listings for security in case\\r\\n    // opensea ever shuts down or is compromised\\r\\n    // from CryptoCoven https://etherscan.io/address/0x5180db8f5c931aae63c74266b211f580155ecac8#code\\r\\n    function setIsOpenSeaProxyActive(bool _isOpenSeaProxyActive) public onlyOwner {\\r\\n        isOpenSeaProxyActive = _isOpenSeaProxyActive;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override isApprovedForAll to allowlist user's OpenSea proxy accounts to enable gas-less listings.\\r\\n     * Taken from CryptoCoven: https://etherscan.io/address/0x5180db8f5c931aae63c74266b211f580155ecac8#code\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Get a reference to OpenSea's proxy registry contract by instantiating\\r\\n        // the contract using the already existing address.\\r\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n\\r\\n        if (isOpenSeaProxyActive && address(proxyRegistry.proxies(owner)) == operator) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return super.isApprovedForAll(owner, operator);\\r\\n    }\\r\\n \\r\\n}\"\r\n    },\r\n    \"/contracts/ScumbugsValues.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Scumbugs Data Values\\r\\n */\\r\\ncontract ScumbugsValues {\\r\\n\\r\\n    mapping(uint8 => bytes32) public handMap;\\r\\n    mapping(uint8 => bytes32) public bodyMap;\\r\\n    mapping(uint8 => bytes32) public eyesMap;\\r\\n    mapping(uint8 => bytes32) public headMap;\\r\\n    mapping(uint8 => bytes32) public mouthMap;\\r\\n    mapping(uint8 => bytes32) public backgroundMap;\\r\\n    mapping(uint8 => bytes32) public bugTypeMap;\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        // Initialize hand map\\r\\n        handMap[0] = bytes32(\\\"No traits\\\");\\r\\n        handMap[1] = bytes32(\\\"Bug You\\\");\\r\\n        handMap[2] = bytes32(\\\"Smoke\\\");\\r\\n        handMap[3] = bytes32(\\\"Money Talk\\\");\\r\\n        handMap[4] = bytes32(\\\"Bug Spray\\\");\\r\\n        handMap[5] = bytes32(\\\"Camcorder\\\");\\r\\n        handMap[6] = bytes32(\\\"Golf Club\\\");\\r\\n        handMap[7] = bytes32(\\\"Spicey\\\");\\r\\n        handMap[8] = bytes32(\\\"Genius\\\");\\r\\n        handMap[9] = bytes32(\\\"All In\\\");\\r\\n        handMap[10] = bytes32(\\\"Fishing Rod\\\");\\r\\n        handMap[11] = bytes32(\\\"Lactose Intolerant\\\");\\r\\n        handMap[12] = bytes32(\\\"Pizza\\\");\\r\\n        handMap[13] = bytes32(\\\"Scum Drink\\\");\\r\\n        handMap[14] = bytes32(\\\"Selfie Stick\\\");\\r\\n        handMap[15] = bytes32(\\\"Fake Watch\\\");\\r\\n        handMap[16] = bytes32(\\\"Rings\\\");\\r\\n        handMap[17] = bytes32(\\\"Boujee\\\");\\r\\n        handMap[18] = bytes32(\\\"Scissorhands\\\");\\r\\n        handMap[19] = bytes32(\\\"Artist\\\");\\r\\n        handMap[20] = bytes32(\\\"Graffiti\\\");\\r\\n        handMap[21] = bytes32(\\\"Lasso\\\");\\r\\n        handMap[22] = bytes32(\\\"Mic\\\");\\r\\n        handMap[23] = bytes32(\\\"Wood\\\");\\r\\n        handMap[24] = bytes32(\\\"Spy\\\");\\r\\n        handMap[25] = bytes32(\\\"Lettuce Finger\\\");\\r\\n        handMap[26] = bytes32(\\\"Baller\\\");\\r\\n        handMap[27] = bytes32(\\\"Katana\\\");\\r\\n        handMap[28] = bytes32(\\\"Scary Puppet\\\");\\r\\n        handMap[29] = bytes32(\\\"Sippin\\\");\\r\\n        handMap[30] = bytes32(\\\"Shroom\\\");\\r\\n        handMap[31] = bytes32(\\\"Banana Gun\\\");\\r\\n        handMap[32] = bytes32(\\\"Flask\\\");\\r\\n        handMap[33] = bytes32(\\\"Boombox\\\");\\r\\n        handMap[34] = bytes32(\\\"Larry SB\\\");\\r\\n        handMap[35] = bytes32(\\\"Wonderful gm\\\");\\r\\n        handMap[36] = bytes32(\\\"Slingshot\\\");\\r\\n        handMap[37] = bytes32(\\\"Skateboard\\\");\\r\\n        handMap[38] = bytes32(\\\"Glow Stick\\\");\\r\\n        handMap[39] = bytes32(\\\"Sadomaso\\\");\\r\\n        handMap[40] = bytes32(\\\"Demi God\\\");\\r\\n        handMap[41] = bytes32(\\\"I Can Point This\\\");\\r\\n\\r\\n        // Initialize body map\\r\\n        bodyMap[0] = bytes32(\\\"No traits\\\");\\r\\n        bodyMap[1] = bytes32(\\\"Logo T\\\");\\r\\n        bodyMap[2] = bytes32(\\\"System B\\\");\\r\\n        bodyMap[3] = bytes32(\\\"Daddy's Rich\\\");\\r\\n        bodyMap[4] = bytes32(\\\"McScumin\\\");\\r\\n        bodyMap[5] = bytes32(\\\"Stunt Bug\\\");\\r\\n        bodyMap[6] = bytes32(\\\"Bug Squad\\\");\\r\\n        bodyMap[7] = bytes32(\\\"Track Jacket\\\");\\r\\n        bodyMap[8] = bytes32(\\\"Polo\\\");\\r\\n        bodyMap[9] = bytes32(\\\"Boomer\\\");\\r\\n        bodyMap[10] = bytes32(\\\"Turtleneck\\\");\\r\\n        bodyMap[11] = bytes32(\\\"Coconut Bra\\\");\\r\\n        bodyMap[12] = bytes32(\\\"Tie-dye\\\");\\r\\n        bodyMap[13] = bytes32(\\\"Life Jacket\\\");\\r\\n        bodyMap[14] = bytes32(\\\"Down Jacket\\\");\\r\\n        bodyMap[15] = bytes32(\\\"Perfecto\\\");\\r\\n        bodyMap[16] = bytes32(\\\"Thunder Fleece\\\");\\r\\n        bodyMap[17] = bytes32(\\\"Spandex\\\");\\r\\n        bodyMap[18] = bytes32(\\\"Bugs Racing\\\");\\r\\n        bodyMap[19] = bytes32(\\\"Scum Bag\\\");\\r\\n        bodyMap[20] = bytes32(\\\"Trailer Park Bugs\\\");\\r\\n        bodyMap[21] = bytes32(\\\"Disco Shirt\\\");\\r\\n        bodyMap[22] = bytes32(\\\"Knit\\\");\\r\\n        bodyMap[23] = bytes32(\\\"Gloves Jacket\\\");\\r\\n        bodyMap[24] = bytes32(\\\"Sherpa Fleece\\\");\\r\\n        bodyMap[25] = bytes32(\\\"Velvet Hoodie\\\");\\r\\n        bodyMap[26] = bytes32(\\\"Hoodie Up\\\");\\r\\n        bodyMap[27] = bytes32(\\\"Denim Jacket\\\");\\r\\n        bodyMap[28] = bytes32(\\\"Biker Vest\\\");\\r\\n        bodyMap[29] = bytes32(\\\"Sherling Jacket\\\");\\r\\n        bodyMap[30] = bytes32(\\\"V God\\\");\\r\\n        bodyMap[31] = bytes32(\\\"Trench Coat\\\");\\r\\n        bodyMap[32] = bytes32(\\\"Tuxedo\\\");\\r\\n        bodyMap[33] = bytes32(\\\"Dragon Shirt\\\");\\r\\n        bodyMap[34] = bytes32(\\\"Scammer\\\");\\r\\n        bodyMap[35] = bytes32(\\\"B.W.A.\\\");\\r\\n        bodyMap[36] = bytes32(\\\"Punk Jacket\\\");\\r\\n        bodyMap[37] = bytes32(\\\"Loose Knit\\\");\\r\\n        bodyMap[38] = bytes32(\\\"Red Puffer\\\");\\r\\n        bodyMap[39] = bytes32(\\\"Wolf\\\");\\r\\n        bodyMap[40] = bytes32(\\\"King Robe\\\");\\r\\n        bodyMap[41] = bytes32(\\\"Notorious B.U.G.\\\");\\r\\n        bodyMap[42] = bytes32(\\\"Scum God Jacket\\\");\\r\\n        bodyMap[43] = bytes32(\\\"Fast Lane\\\");\\r\\n        bodyMap[44] = bytes32(\\\"Iced Out Chain\\\");\\r\\n        bodyMap[45] = bytes32(\\\"Flower Costume\\\");\\r\\n        bodyMap[46] = bytes32(\\\"Cold Chain\\\");\\r\\n        bodyMap[47] = bytes32(\\\"Straight Jacket\\\");\\r\\n        bodyMap[48] = bytes32(\\\"Predator Costume\\\");\\r\\n        bodyMap[49] = bytes32(\\\"White & Gold Dress\\\");\\r\\n        bodyMap[50] = bytes32(\\\"Spike Jacket\\\");\\r\\n        bodyMap[51] = bytes32(\\\"Invisibility Cloak\\\");\\r\\n        bodyMap[52] = bytes32(\\\"GOAT Jacket\\\");\\r\\n        bodyMap[53] = bytes32(\\\"Black & Blue Dress\\\");\\r\\n\\r\\n        // Initialize eyes map\\r\\n        eyesMap[0] = bytes32(\\\"No traits\\\");\\r\\n        eyesMap[1] = bytes32(\\\"Clear Eyes\\\");\\r\\n        eyesMap[2] = bytes32(\\\"Sus\\\");\\r\\n        eyesMap[3] = bytes32(\\\"Scum\\\");\\r\\n        eyesMap[4] = bytes32(\\\"Shroomed\\\");\\r\\n        eyesMap[5] = bytes32(\\\"Shark\\\");\\r\\n        eyesMap[6] = bytes32(\\\"Cleo\\\");\\r\\n        eyesMap[7] = bytes32(\\\"Soft Glam\\\");\\r\\n        eyesMap[8] = bytes32(\\\"Goat\\\");\\r\\n        eyesMap[9] = bytes32(\\\"Cat\\\");\\r\\n        eyesMap[10] = bytes32(\\\"Clown\\\");\\r\\n        eyesMap[11] = bytes32(\\\"Tearful\\\");\\r\\n        eyesMap[12] = bytes32(\\\"Mesmerized\\\");\\r\\n        eyesMap[13] = bytes32(\\\"Scum Clown\\\");\\r\\n        eyesMap[14] = bytes32(\\\"Blind\\\");\\r\\n        eyesMap[15] = bytes32(\\\"Black Eye\\\");\\r\\n        eyesMap[16] = bytes32(\\\"Black Eye Scum\\\");\\r\\n\\r\\n        // Initialize head map\\r\\n        headMap[0] = bytes32(\\\"No traits\\\");\\r\\n        headMap[1] = bytes32(\\\"Logo Cap\\\");\\r\\n        headMap[2] = bytes32(\\\"Beanie\\\");\\r\\n        headMap[3] = bytes32(\\\"Mullet\\\");\\r\\n        headMap[4] = bytes32(\\\"Dreadlocks\\\");\\r\\n        headMap[5] = bytes32(\\\"V-cut\\\");\\r\\n        headMap[6] = bytes32(\\\"Sleek\\\");\\r\\n        headMap[7] = bytes32(\\\"Trucker Hat\\\");\\r\\n        headMap[8] = bytes32(\\\"Preppy\\\");\\r\\n        headMap[9] = bytes32(\\\"Bun\\\");\\r\\n        headMap[10] = bytes32(\\\"Black Bucket Hat\\\");\\r\\n        headMap[11] = bytes32(\\\"Fade\\\");\\r\\n        headMap[12] = bytes32(\\\"Ushanka\\\");\\r\\n        headMap[13] = bytes32(\\\"Red Spikes\\\");\\r\\n        headMap[14] = bytes32(\\\"Beach\\\");\\r\\n        headMap[15] = bytes32(\\\"Afro\\\");\\r\\n        headMap[16] = bytes32(\\\"Lover Bug\\\");\\r\\n        headMap[17] = bytes32(\\\"New Jack City\\\");\\r\\n        headMap[18] = bytes32(\\\"Blume\\\");\\r\\n        headMap[19] = bytes32(\\\"Mohawk\\\");\\r\\n        headMap[20] = bytes32(\\\"Fitted Cap\\\");\\r\\n        headMap[21] = bytes32(\\\"Karen\\\");\\r\\n        headMap[22] = bytes32(\\\"Blond Bowlcut\\\");\\r\\n        headMap[23] = bytes32(\\\"The King\\\");\\r\\n        headMap[24] = bytes32(\\\"Durag\\\");\\r\\n        headMap[25] = bytes32(\\\"Bucket Hat\\\");\\r\\n        headMap[26] = bytes32(\\\"Bus Driver\\\");\\r\\n        headMap[27] = bytes32(\\\"Black Bowlcut\\\");\\r\\n        headMap[28] = bytes32(\\\"Rawr xd\\\");\\r\\n        headMap[29] = bytes32(\\\"Cowboy\\\");\\r\\n        headMap[30] = bytes32(\\\"Aerobics\\\");\\r\\n        headMap[31] = bytes32(\\\"Rattail\\\");\\r\\n        headMap[32] = bytes32(\\\"Clown\\\");\\r\\n        headMap[33] = bytes32(\\\"Hair Metal\\\");\\r\\n        headMap[34] = bytes32(\\\"Unibruh\\\");\\r\\n        headMap[35] = bytes32(\\\"Biker\\\");\\r\\n        headMap[36] = bytes32(\\\"Piercing\\\");\\r\\n        headMap[37] = bytes32(\\\"/\\\");\\r\\n        headMap[38] = bytes32(\\\"Knot Head\\\");\\r\\n        headMap[39] = bytes32(\\\"Say No More\\\");\\r\\n        headMap[40] = bytes32(\\\"Mixologist\\\");\\r\\n        headMap[41] = bytes32(\\\"Sahara Cap\\\");\\r\\n        headMap[42] = bytes32(\\\"Cheetah Fur Hat\\\");\\r\\n        headMap[43] = bytes32(\\\"Pharaoh\\\");\\r\\n        headMap[44] = bytes32(\\\"Giga Brain\\\");\\r\\n        headMap[45] = bytes32(\\\"Flower Costume\\\");\\r\\n        headMap[46] = bytes32(\\\"Rockstar\\\");\\r\\n        headMap[47] = bytes32(\\\"Dryden\\\");\\r\\n        headMap[48] = bytes32(\\\"Trash's King\\\");\\r\\n        headMap[49] = bytes32(\\\"Tin Foil Hat\\\");\\r\\n        headMap[50] = bytes32(\\\"Umbrella\\\");\\r\\n        headMap[51] = bytes32(\\\"Archive Cap\\\");\\r\\n        headMap[52] = bytes32(\\\"Rug Legend\\\");\\r\\n        headMap[53] = bytes32(\\\"Compost God\\\");\\r\\n        headMap[54] = bytes32(\\\"Balaclava\\\");\\r\\n        headMap[55] = bytes32(\\\"Predator Costume\\\");\\r\\n\\r\\n        // Initialize mouth map\\r\\n        mouthMap[0] = bytes32(\\\"Smiley\\\");\\r\\n        mouthMap[1] = bytes32(\\\"Duck Face\\\");\\r\\n        mouthMap[2] = bytes32(\\\"Vortex\\\");\\r\\n        mouthMap[3] = bytes32(\\\"Pornstache\\\");\\r\\n        mouthMap[4] = bytes32(\\\"Ron\\\");\\r\\n        mouthMap[5] = bytes32(\\\"Bandana\\\");\\r\\n        mouthMap[6] = bytes32(\\\"Kiss\\\");\\r\\n        mouthMap[7] = bytes32(\\\"Glossy Lips\\\");\\r\\n        mouthMap[8] = bytes32(\\\"Hogan\\\");\\r\\n        mouthMap[9] = bytes32(\\\"Buckteeth\\\");\\r\\n        mouthMap[10] = bytes32(\\\"Lumbersexual\\\");\\r\\n        mouthMap[11] = bytes32(\\\"Grrr\\\");\\r\\n        mouthMap[12] = bytes32(\\\"Toothbrush\\\");\\r\\n        mouthMap[13] = bytes32(\\\"Rotten\\\");\\r\\n        mouthMap[14] = bytes32(\\\"Zoidbug\\\");\\r\\n        mouthMap[15] = bytes32(\\\"Reptilian\\\");\\r\\n        mouthMap[16] = bytes32(\\\"Goth\\\");\\r\\n        mouthMap[17] = bytes32(\\\"Tooth Cap\\\");\\r\\n        mouthMap[18] = bytes32(\\\"Lemmy\\\");\\r\\n        mouthMap[19] = bytes32(\\\"Gold Grillz\\\");\\r\\n        mouthMap[20] = bytes32(\\\"Overjet\\\");\\r\\n        mouthMap[21] = bytes32(\\\"Duke In Vegas\\\");\\r\\n        mouthMap[22] = bytes32(\\\"Hannibal\\\");\\r\\n        mouthMap[23] = bytes32(\\\"Iced Out\\\");\\r\\n        mouthMap[24] = bytes32(\\\"Braces\\\");\\r\\n\\r\\n        // Initialize background map\\r\\n        backgroundMap[0] = bytes32(\\\"blue\\\");\\r\\n        backgroundMap[1] = bytes32(\\\"green\\\");\\r\\n        backgroundMap[2] = bytes32(\\\"orange\\\");\\r\\n        backgroundMap[3] = bytes32(\\\"pink\\\");\\r\\n        backgroundMap[4] = bytes32(\\\"red\\\");\\r\\n        backgroundMap[5] = bytes32(\\\"yellow\\\");\\r\\n\\r\\n        // Initialize bug type map\\r\\n        bugTypeMap[0] = bytes32(\\\"mantis\\\");\\r\\n        bugTypeMap[1] = bytes32(\\\"caterpillar\\\");\\r\\n        bugTypeMap[2] = bytes32(\\\"fly\\\");\\r\\n        bugTypeMap[3] = bytes32(\\\"mosquito\\\");\\r\\n        bugTypeMap[4] = bytes32(\\\"moth\\\");\\r\\n        bugTypeMap[5] = bytes32(\\\"snail\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/ScumbugsMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ScumbugsValues.sol\\\";\\r\\nimport \\\"./DateTime.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Scumbugs Metadata storage\\r\\n * @notice Stores the metadata on-chain.\\r\\n */\\r\\ncontract ScumbugsMetadata is DateTime {\\r\\n\\r\\n    // ---------------------- Structs ----------------------\\r\\n    struct Attributes {\\r\\n        uint8 hand;\\r\\n        uint8 body;\\r\\n        uint8 eyes;\\r\\n        uint8 head;\\r\\n        uint8 mouth;\\r\\n        uint8 background_color;\\r\\n        uint8 bug_type;\\r\\n        uint32 birthday;\\r\\n    }\\r\\n\\r\\n    struct MetadataInput {\\r\\n        uint256 tokenId;\\r\\n        bytes32 txHash;\\r\\n        bytes32 mediaId1;\\r\\n        bytes32 mediaId2;\\r\\n        bytes32 mediaBdayId1;\\r\\n        bytes32 mediaBdayId2;\\r\\n        // 11 bytes\\r\\n        uint8 hand;\\r\\n        uint8 body;\\r\\n        uint8 eyes;\\r\\n        uint8 head;\\r\\n        uint8 mouth;\\r\\n        uint8 background_color;\\r\\n        uint8 bug_type;\\r\\n        uint32 birthday;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 => Attributes) internal attributesMap;\\r\\n    mapping (uint256 => bytes32) public txhashes;\\r\\n    mapping (uint256 => bytes32) internal mediaIds1;\\r\\n    mapping (uint256 => bytes32) internal mediaIds2;\\r\\n    mapping (uint256 => bytes32) internal mediaBdayIds1;\\r\\n    mapping (uint256 => bytes32) internal mediaBdayIds2;\\r\\n    bytes32 private defaultImagePart1 = bytes32(\\\"U95dUPeExh0CVYAH0ga8jOuifsPD6FsF\\\");\\r\\n    bytes32 private defaultImagePart2 = bytes32(\\\"6aGK2oGauo8\\\");\\r\\n    \\r\\n    bytes32 internal siteUrl;\\r\\n    address public ScumbugsValuesAddress;\\r\\n    \\r\\n\\r\\n    // ---------------------- Constructor ----------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor. Sets networkPath and siteUrl.\\r\\n     * @param _siteUrl The value given to siteUrl\\r\\n     * @param _ScumbugsValuesAddress The address of the Scumbug Values\\r\\n     */\\r\\n    constructor(bytes32 _siteUrl, address _ScumbugsValuesAddress) {\\r\\n        siteUrl = _siteUrl;\\r\\n        ScumbugsValuesAddress = _ScumbugsValuesAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Renders json as a string containing metadata for token with tokenId\\r\\n     */\\r\\n    function _render(uint256 tokenId) internal view virtual returns (string memory) {\\r\\n        bool isBirthday = false;\\r\\n        uint8 nowDay = getDay(block.timestamp);\\r\\n        uint8 nowMonth = getMonth(block.timestamp);\\r\\n        uint8 bdDay = getDay(attributesMap[tokenId].birthday);\\r\\n        uint8 bdMonth = getMonth(attributesMap[tokenId].birthday);\\r\\n        if (nowDay == bdDay && nowMonth == bdMonth) {\\r\\n            isBirthday = true;\\r\\n        }\\r\\n        delete nowDay;\\r\\n        delete nowMonth;\\r\\n        delete bdDay;\\r\\n        delete bdMonth;\\r\\n        bool generated = isGenerated(tokenId);\\r\\n        bytes memory tokenIdBytes = uintToStrBytes(tokenId);\\r\\n        bytes memory buffer = bytes.concat(bytes28(\\\"data:application/json;utf8,{\\\"), bytes8('\\\"name\\\":\\\"'));\\r\\n        // Name\\r\\n        buffer = bytes.concat(buffer, bytes9(\\\"Scumbug #\\\"), tokenIdBytes, bytes2('\\\",'));\\r\\n        // Image\\r\\n        if (!generated) {\\r\\n            buffer = bytes.concat(buffer, bytes9('\\\"image\\\":\\\"'), bytes5(\\\"ar://\\\"), defaultImagePart1);\\r\\n            buffer = bytes.concat(buffer, defaultImagePart2, bytes2('\\\",'));\\r\\n        } else if (isBirthday) {\\r\\n            buffer = bytes.concat(buffer, bytes9('\\\"image\\\":\\\"'), bytes5(\\\"ar://\\\"), mediaBdayIds1[tokenId]);\\r\\n            buffer = bytes.concat(buffer, mediaBdayIds2[tokenId], bytes2('\\\",'));\\r\\n        } else {\\r\\n            buffer = bytes.concat(buffer, bytes9('\\\"image\\\":\\\"'), bytes5(\\\"ar://\\\"), mediaIds1[tokenId]);\\r\\n            buffer = bytes.concat(buffer, mediaIds2[tokenId], bytes2('\\\",'));\\r\\n        }\\r\\n        // Token Id\\r\\n        buffer = bytes.concat(buffer, bytes10('\\\"tokenId\\\":'), tokenIdBytes, bytes1(\\\",\\\"));\\r\\n        if (generated) {\\r\\n            // External URL\\r\\n            buffer = bytes.concat(buffer, bytes16('\\\"external_url\\\":\\\"'), siteUrl, tokenIdBytes, bytes2('\\\",'));\\r\\n            // Clean up\\r\\n            delete tokenIdBytes;\\r\\n            Attributes memory attributes = attributesMap[tokenId];\\r\\n            ScumbugsValues scumbugsValuesInstance = ScumbugsValues(ScumbugsValuesAddress);\\r\\n            // Open attributes\\r\\n            buffer = bytes.concat(buffer, bytes14('\\\"attributes\\\":['));\\r\\n            // hand\\r\\n            if (attributes.hand != 0) {\\r\\n                bytes32 data = scumbugsValuesInstance.handMap(attributes.hand);\\r\\n                buffer = bytes.concat(buffer, bytes30('{\\\"trait_type\\\":\\\"hand\\\",\\\"value\\\":\\\"'), data, bytes3('\\\"},'));\\r\\n            }\\r\\n            // body\\r\\n            if (attributes.body != 0) {\\r\\n                bytes32 data = scumbugsValuesInstance.bodyMap(attributes.body);\\r\\n                buffer = bytes.concat(buffer, bytes30('{\\\"trait_type\\\":\\\"body\\\",\\\"value\\\":\\\"'), data, bytes3('\\\"},'));\\r\\n            }\\r\\n            // eyes\\r\\n            if (attributes.eyes != 0) {\\r\\n                bytes32 data = scumbugsValuesInstance.eyesMap(attributes.eyes);\\r\\n                buffer = bytes.concat(buffer, bytes30('{\\\"trait_type\\\":\\\"eyes\\\",\\\"value\\\":\\\"'), data, bytes3('\\\"},'));\\r\\n            }\\r\\n            // head\\r\\n            if (attributes.head != 0) {\\r\\n                bytes32 data = scumbugsValuesInstance.headMap(attributes.head);\\r\\n                buffer = bytes.concat(buffer, bytes30('{\\\"trait_type\\\":\\\"head\\\",\\\"value\\\":\\\"'), data, bytes3('\\\"},'));\\r\\n            }\\r\\n            // mouth\\r\\n            if (attributes.mouth != 0) {\\r\\n                bytes32 data = scumbugsValuesInstance.mouthMap(attributes.mouth);\\r\\n                buffer = bytes.concat(buffer, bytes31('{\\\"trait_type\\\":\\\"mouth\\\",\\\"value\\\":\\\"'), data, bytes3('\\\"},'));\\r\\n            }\\r\\n            // Background color\\r\\n            if (isBirthday) {\\r\\n                buffer = bytes.concat(buffer, bytes32('{\\\"trait_type\\\":\\\"background_color\\\"'), bytes22(',\\\"value\\\":\\\"Birthday!\\\"},'));\\r\\n            } else {\\r\\n                bytes32 backgroundData = scumbugsValuesInstance.backgroundMap(attributes.background_color);\\r\\n                buffer = bytes.concat(buffer, bytes32('{\\\"trait_type\\\":\\\"background_color\\\"'), bytes10(',\\\"value\\\":\\\"'), backgroundData, bytes3('\\\"},'));\\r\\n                delete backgroundData;\\r\\n            }\\r\\n            // Bug type\\r\\n            bytes32 bugTypeData = scumbugsValuesInstance.bugTypeMap(attributes.bug_type);\\r\\n            buffer = bytes.concat(buffer, bytes24('{\\\"trait_type\\\":\\\"bug_type\\\"'), bytes10(',\\\"value\\\":\\\"'), bugTypeData, bytes3('\\\"},'));\\r\\n            delete bugTypeData;\\r\\n            delete scumbugsValuesInstance;\\r\\n            // Birthday\\r\\n            buffer = bytes.concat(buffer, bytes25('{\\\"trait_type\\\":\\\"birthday\\\",'), bytes22('\\\"display_type\\\":\\\"date\\\",'), bytes8('\\\"value\\\":'), \\r\\n                uintToStrBytes(attributes.birthday), bytes1('}'));\\r\\n            // Close attributes\\r\\n            delete attributes;\\r\\n            buffer = bytes.concat(buffer, bytes1(\\\"]\\\"));\\r\\n        } else {\\r\\n            buffer = bytes.concat(buffer, bytes15('\\\"attributes\\\":[]'));\\r\\n        }\\r\\n        // Close json\\r\\n        buffer = bytes.concat(buffer, bytes1(\\\"}\\\"));\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function isGenerated(uint256 tokenId) public view returns (bool) {\\r\\n        return mediaIds1[tokenId] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transforms uint to string bytes. Based on toString(uint256 value) from @openzeppelin/contracts/utils/Strings.sol\\r\\n     */\\r\\n    function uintToStrBytes(uint256 value) pure private returns (bytes memory) {\\r\\n        if (value == 0) {\\r\\n            return bytes(\\\"0\\\");\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return buffer;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n    */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to make a function callable only when the contract is paused.\\r\\n    */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev called by the owner to pause, triggers stopped state\\r\\n    */\\r\\n    function pause() onlyOwner whenNotPaused public {\\r\\n        _paused = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev called by the owner to unpause, returns to normal state\\r\\n    */\\r\\n    function unpause() onlyOwner whenPaused public {\\r\\n        _paused = false;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/OpenseaProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// These contract definitions are used to create a reference to the OpenSea\\r\\n// ProxyRegistry contract by using the registry's address (see isApprovedForAll).\\r\\ninterface OwnableDelegateProxy {\\r\\n\\r\\n}\\r\\n\\r\\ninterface ProxyRegistry {\\r\\n    function proxies(address) external view returns (OwnableDelegateProxy);\\r\\n}\"\r\n    },\r\n    \"/contracts/DateTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n* Inspired by DateTime: https://etherscan.io/address/0x1a6184cd4c5bea62b0116de7962ee7315b7bcbce#code\\r\\n*/\\r\\ncontract DateTime {\\r\\n        /*\\r\\n         *  Date and Time utilities for ethereum contracts\\r\\n         *\\r\\n         */\\r\\n        struct _DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n                uint8 day;\\r\\n        }\\r\\n\\r\\n        uint private constant DAY_IN_SECONDS = 86400;\\r\\n        uint private constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint private constant HOUR_IN_SECONDS = 3600;\\r\\n        uint private constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 private constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n        function isLeapYear(uint16 year) internal pure returns (bool) {\\r\\n                if (year % 4 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year % 100 != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year % 400 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function leapYearsBefore(uint year) internal pure returns (uint) {\\r\\n                year -= 1;\\r\\n                return year / 4 - year / 100 + year / 400;\\r\\n        }\\r\\n\\r\\n        function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\r\\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n                        return 31;\\r\\n                }\\r\\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n                        return 30;\\r\\n                }\\r\\n                else if (isLeapYear(year)) {\\r\\n                        return 29;\\r\\n                }\\r\\n                else {\\r\\n                        return 28;\\r\\n                }\\r\\n        }\\r\\n\\r\\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                // Year\\r\\n                dt.year = getYear(timestamp);\\r\\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n                // Month\\r\\n                uint secondsInMonth;\\r\\n                for (i = 1; i <= 12; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                                dt.month = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += secondsInMonth;\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                                dt.day = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += DAY_IN_SECONDS;\\r\\n                }\\r\\n        }\\r\\n\\r\\n        function getYear(uint timestamp) internal pure returns (uint16) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint16 year;\\r\\n                uint numLeapYears;\\r\\n\\r\\n                // Year\\r\\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n                while (secondsAccountedFor > timestamp) {\\r\\n                        if (isLeapYear(uint16(year - 1))) {\\r\\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        year -= 1;\\r\\n                }\\r\\n                return year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) internal pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDay(uint timestamp) internal pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).day;\\r\\n        }\\r\\n}\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 31000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_siteUrl\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_ScumbugsValues\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ScumbugsValuesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mediaId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mediaId2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mediaBdayId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mediaBdayId2\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"background_color\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bug_type\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"birthday\",\"type\":\"uint32\"}],\"internalType\":\"struct ScumbugsMetadata.MetadataInput\",\"name\":\"metadataInput\",\"type\":\"tuple\"}],\"name\":\"generateMetadata_w1o\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isGenerated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpenSeaProxyActive\",\"type\":\"bool\"}],\"name\":\"setIsOpenSeaProxyActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_siteUrl\",\"type\":\"bytes32\"}],\"name\":\"setSiteUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"setUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txhashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScumbugsNFT", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "31000", "ConstructorArguments": "68747470733a2f2f7777772e7363756d627567732e6e65742f6275672f00000000000000000000000000000015a768c1d9ec2450d641ffb580af0954c40a4ec8000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}