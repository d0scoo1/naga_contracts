{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/advent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Created by petdomaa100 | Managed by Satoshi Design\\n\\n/*\\n                                                          &#&%&&%#((                                                    \\n                                                      .%%%%&&&%%%%(&(%                                                  \\n                                                       /&%%&%&&&%#%%(*                                                  \\n                                                      /#%%&@&%&&#/#&(((                                                 \\n                                                    &%%%@%&&&&&&%%#(((##,                                               \\n                                                    *@%%%%%&&&&&&&&%## /                                                \\n                                     ..              #@#/**#&%&&%(###((                                                 \\n                           &%######%%%%%              .,%%%%&&&&&&%#%(    %&%%%%%##%%#/                                 \\n                        %#%%#/, *%%%%%                  (&@&&&%&(&%&#        @%%%%%#* #%##                              \\n                     %%%%%%%#%%#*%%%%*                  .&&@@@@&&%&/         @%%%%&,%%/%%%%%/                           \\n                    %%# %%%%%%%%%#*. .%%%%#,            #@&@@@&&&&%    .%%%%%%#.  #%%%%%%%*&&%                          \\n                        ,%%%%%&&&%%##(&%&%%%%%%%@&   %@&@@&&@@&%&@%%%%%%%%%&&%%##(#% /%%%(                              \\n                      *%%%%%%%%&#%//,.&%&(%%%&&&&%%&@&@@&@@&&@&#@#@@#@%%%&&&&###**#%% /%%%%,                            \\n                    *%%%%%%%&&&&%%&,.@&%#%&%%##%%%%&&%&%%&@&%#(###(%&&##%(#&/#,,&&/%%#%%%%%%%.                          \\n                  (%%%%%%%%%%&&&&&&&%#//(%&&&%./&%%%%%%%%&&&&#(#%&%&%(//////&%%%%%%%%%%%%%&%%%%,                        \\n                %%%%%%%%%%%%%%%&&&&&@@@&&&%&&% @%&&&&&%%%%%%%#/(%%#(/////////#%%%%%%%%%%%%%%@%%%%,                      \\n              &%%%%%%%%%%%%%%%%%%&@@@@@&&@@@&(&%&%&&&&%%%%%%%((/&%&%(/////////&#%%%%%%%%%%%%%&%%%%%,                    \\n            &&&&&&&%%%%%%%%%%%&&&@@@@@&&@@@@@@&&&&&&&&&&&&&%#((/@%&&%#(///////#&%%%%%%%%%%%%%%%@%%%%%,                  \\n          %&&&&&&&%%%&&&&&&&&@@@@@@&@@&@@@@@@&&&&&&&&&&&&&%##(((&%&&%##(((((((%&%&&&&&&&&@@&&&&&&&&&&&%*                \\n        %&&&&&&&&&&&&&&&&&&&&&&&@@&&&&&@@@@@@@@@&&&&&&&&&&&####(%%&&&####(((%%##((%%%%%%%%&&@&&&&&&&&&&&&*              \\n      %&&&&&&&&&&&&&&&&&&&&&&&&@@@&&&&&@@@@@@@@@&@@@@@@@@&&&&&&#/%#&&&&&&&&&&&%#((%%%%%%%%%%&&@@&&&&&&&&&&&*            \\n    %&&&&&&&&&&&&&&%%%&&&&#/,    @@&&&&@@@@@@&@@@&&&&&&&&&&&&&&#(&#(((#((((%%&&##(#      *%%%%%&&@&&&&&&&&&&%,          \\n ,%%&&&&&&&&&&&&%%%%%%(         (&&&&&@@@@@@@@&@%@&&&&&&&&&&&%%&&@&&%((((((%&&&%###         ,%%%%&&@@&&&&&&&&%&/        \\n&&%&&&&&&&&&&%%%%%%(           *@@&&&@@@@@@@@@ &@&@%&&&&&&&&@&&& @@%(@@&(#%%@@&&&%%            ,%%%%&&@@&&&&&%&&&/      \\n&&%&&&&&&&%%%%%%*             &&&@@&@@@@ &@@@@ ,@#%&&&#&#@&@&@@&@@@@(@&&&@&@@@@&&&%               .%%%&&&@&%%%&&&&&(    \\n&%%%%%&%%%%%%*               @&@&&&@@&   (@@@@    ,&&&/*& @&@@@&&&&@#%/ &% *@@@@&&(                  .%%%&&@@&&&&&&&&(  \\n&&&&&%%%%%,                  &&@&@@@.     @@@@      && /(.%&&@%(%%&@&(.,#   @&&&*(%.                    .%%%&&@&&&&&&&&(\\n&&%%%%%.                    ,%&&&&(&@#    &@@@      %&(/// &&%%,.&&@%( /#   @@&%&#%##                       %%&&&@&&&&&&\\n%%%%.                        %&&&&#&#      @@@      #&&.*& &&%&/,&&&(% *((  #&&,(&  /(                         %%&&@@&&&\\n%                            #&&&&%,/%     &@@       &&///(#&#  %&(  ,./#    @&&/&/ ##                            %&&&@&\\n                              %&&&%(&,      @@   (&@@&&&@@&%&%  %&,  .@%&@&   &@@%& #(                               %&&\\n                              (%&&&#%       &    #&&&@&@@@&(&&  %%.   &%&%%(   &@&&&((                                  \\n                               %&&&%%           (@@&&&&&&&#/&&. /&.   #%%%%#    @@@&%(                                  \\n                                %&&&(*         #&&&%&@@&&&&/&&( *%*  /%%%&/&#%.  @@@&((                                 \\n                                %&&&%%        %&&%@%&%&@@@&&%&&#*&%##%%&&#&&%@#   &@&&/                                 \\n                                (#@&&%*      %%&&@@%&&&@&&&&&&&&&&&&&&@%&&&@%@&&  *@&%(/                                \\n                                 @&&%&(      #&@%@@&@@@&@@&@&&&&&&&&&&%@&#@@&@%%   %@&%&                                \\n                                 /%&@&&%&   (%@&&%@&#@&@@&@@@&&&&&&&&@&&@@%@&&%%   ,&%/&(                               \\n                                  &%&@@&&#  #@@&&&%&@&@@&&@@@&&&&&&&@@@&@/&@&%%&(  &&(&@/                               \\n                                  %&&&&@ &&(%@@&&&&%&%@&@@&@  @@@&&@&@@@&%&@&&&&&  ##(@#(.                              \\n                                   &@&&    &&@&&&&&%&&&&&&&@    #@@@@&&&&&&@&&&&&  &(&@&(                               \\n                                   .@@&#   %&&&&&&&&@&&&&&&&    &@@@@&&&&&&&&&&&&     @&(                               \\n                                    @@%&, *%&&&@&&&&@&&&&&&&    &@@@@@&&&&@&&&&&&     &&(                               \\n                                     @&#& (@@&@@&&&&%&&&&&&     ,@@@@@&&&&&&&&&&&      &#                               \\n                                       .  #%%@@&&&&&&@&&&&#      &@@@@@&@&&&&&&&&      ,%                               \\n                                          /%@@@&&&&&&&&&&&       .@@@@@@&&&&&&&&%                                       \\n*/\\n\\n\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\n\\n\\n\\ncontract AdventRobots is ERC721A, PaymentSplitter, Ownable {\\n\\tusing Strings for uint256;\\n\\n\\tbool public paused;\\n\\tbool public revealed;\\n\\tbool public whitelistOnly;\\n\\n\\tstring private _unrevealedUriPrefix;\\n\\tstring private _uriPrefix;\\n\\tstring private _uriSuffix;\\n\\n\\tuint256 public cost;\\n\\tuint256 public presaleCost;\\n\\tuint256 public maxSupply;\\n\\tuint256 public presaleSupply;\\n\\tuint256 public maxMintAmountPerAddress;\\n\\n\\tbytes32 private _whitelistMerkleRoot;\\n\\n\\tuint256 private constant _MAX_MINT_AMOUNT_RESET_INTERVAL = 1 hours;\\n\\n\\tevent Revealed();\\n\\tevent PausedChanged(bool indexed oldPaused, bool indexed newPaused);\\n\\tevent URIprefixChanged(string indexed oldURIprefix, string indexed newURIprefix);\\n\\tevent UnrevealedURIprefixChanged(string indexed oldUnrevealedURIprefix, string indexed newUnrevealedURIprefix);\\n\\tevent URIsuffixChanged(string indexed oldURIsuffix, string indexed newURIsuffix);\\n\\tevent MaxSupplyChanged(uint256 indexed oldMaxSupply, uint256 indexed newMaxSupply);\\n\\tevent PresaleSupplyChanged(uint256 indexed oldPresaleSupply, uint256 indexed newPresaleSupply);\\n\\tevent MaxMintAmountPerAddressChanged(uint256 indexed oldMaxMintAmountPerAddress, uint256 indexed newMaxMintAmountPerAddress);\\n\\tevent CostChanged(uint256 indexed oldCost, uint256 indexed newCost);\\n\\tevent PresaleCostChanged(uint256 indexed oldPresaleCost, uint256 indexed newPresaleCost);\\n\\tevent WhitelistMerkleRootChanged(bytes32 indexed oldWhitelistMerkleRoot, bytes32 indexed newWhitelistMerkleRoot);\\n\\n\\n\\tconstructor(string memory initUnrevealedUriPrefix, bytes32 initWhitelistMerkleRoot, address[] memory payees, uint256[] memory shares) ERC721A(\\\"AdventRobots\\\", \\\"AR\\\") PaymentSplitter(payees, shares) {\\n\\t\\tpaused = true;\\n\\t\\twhitelistOnly = false;\\n\\n\\t\\tcost = 0.25 ether;\\n\\t\\tpresaleCost = 0.25 ether;\\n\\t\\tmaxSupply = 11_111;\\n\\t\\tpresaleSupply = 7_777;\\n\\t\\tmaxMintAmountPerAddress = 10;\\n\\n\\t\\t_whitelistMerkleRoot = initWhitelistMerkleRoot;\\n\\n\\t\\t_uriSuffix = \\\".json\\\";\\n\\t\\t_unrevealedUriPrefix = initUnrevealedUriPrefix;\\n\\t}\\n\\n\\n\\tfunction mint(uint256 amount) external payable {\\n\\t\\trequire(tx.origin == msg.sender, \\\"AdventRobots: contract denied\\\");\\n\\t\\trequire(!paused, \\\"AdventRobots: minting is paused\\\");\\n\\t\\trequire(!whitelistOnly, \\\"AdventRobots: minting currently in presale, use presale mint\\\");\\n\\t\\trequire(msg.value >= cost * amount, \\\"AdventRobots: insufficient ether\\\");\\n\\t\\trequire(_totalMinted() + amount <= maxSupply, \\\"AdventRobots: max token supply exceeded\\\");\\n\\n\\t\\t(uint256 intervalStart, uint256 numberOfMinted) = _getMintAmountData(_msgSender());\\n\\t\\tbool newBatch = block.timestamp > intervalStart + _MAX_MINT_AMOUNT_RESET_INTERVAL;\\n\\n\\t\\trequire(amount > 0 && amount <= (newBatch ? maxMintAmountPerAddress : maxMintAmountPerAddress - numberOfMinted), \\\"AdventRobots: invalid mint amount\\\");\\n\\n\\n\\t\\t_safeMint(_msgSender(), amount);\\n\\n\\n\\t\\tif (newBatch) {\\n\\t\\t\\t_setAux(_msgSender(), uint56(block.timestamp) << 8 | uint8(amount));\\n\\t\\t} else {\\n\\t\\t\\t_setAux(_msgSender(), uint56(intervalStart) << 8 | uint8(numberOfMinted + amount));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction presaleMint(uint256 amount, bytes32[] calldata merkleProof) external payable {\\n\\t\\trequire(tx.origin == msg.sender, \\\"AdventRobots: contract denied\\\");\\n\\t\\trequire(!paused, \\\"AdventRobots: minting is paused\\\");\\n\\t\\trequire(whitelistOnly, \\\"AdventRobots: minting no longer restricted to presale, use public mint\\\");\\n\\t\\trequire(msg.value >= presaleCost * amount, \\\"AdventRobots: insufficient ether\\\");\\n\\n\\t\\t(uint256 intervalStart, uint256 numberOfMinted) = _getMintAmountData(_msgSender());\\n\\n\\t\\tbool newBatch = block.timestamp > intervalStart + _MAX_MINT_AMOUNT_RESET_INTERVAL;\\n\\t\\tuint256 newSupply = _totalMinted() + amount;\\n\\n\\t\\trequire(amount > 0 && amount <= (newBatch ? maxMintAmountPerAddress : maxMintAmountPerAddress - numberOfMinted), \\\"AdventRobots: invalid mint amount\\\");\\n\\t\\trequire(newSupply <= presaleSupply, \\\"AdventRobots: presale token supply exceeded\\\");\\n\\t\\trequire(_isAddressWhitelisted(_msgSender(), merkleProof), \\\"AdventRobots: invalid merkle proof\\\");\\n\\n\\n\\t\\t_safeMint(_msgSender(), amount);\\n\\n\\n\\t\\tif (newBatch) {\\n\\t\\t\\t_setAux(_msgSender(), uint56(block.timestamp) << 8 | uint8(amount));\\n\\t\\t} else {\\n\\t\\t\\t_setAux(_msgSender(), uint56(intervalStart) << 8 | uint8(numberOfMinted + amount));\\n\\t\\t}\\n\\n\\t\\tif (newSupply >= presaleSupply) whitelistOnly = false;\\n\\t}\\n\\n\\tfunction airDrop(address[] calldata addresses, uint8[] calldata amounts) external onlyOwner {\\n\\t\\trequire(addresses.length == amounts.length && addresses.length > 0, \\\"AdventRobots: invalid function arguments\\\");\\n\\n\\n\\t\\tuint256 newSupply = _totalMinted();\\n\\t\\tfor (uint256 i = 0; i < amounts.length; i++) newSupply += amounts[i];\\n\\n\\t\\trequire(newSupply <= maxSupply, \\\"AdventRobots: max token supply exceeded\\\");\\n\\n\\n\\t\\tfor (uint256 i = 0; i < addresses.length; i++) {\\n\\t\\t\\t_safeMint(addresses[i], amounts[i]);\\n\\t\\t}\\n\\n\\t\\tif (whitelistOnly && newSupply >= presaleSupply) whitelistOnly = false;\\n\\t}\\n\\n\\tfunction flipPausedState() external onlyOwner {\\n\\t\\temit PausedChanged(paused, !paused);\\t\\t\\n\\n\\t\\tpaused = !paused;\\n\\t}\\n\\n\\tfunction reveal(string memory initUriPrefix) external onlyOwner {\\n\\t\\trevealed = true;\\n\\n\\t\\temit URIprefixChanged(_uriPrefix, initUriPrefix);\\n\\t\\temit Revealed();\\n\\n\\t\\t_uriPrefix = initUriPrefix;\\n\\t}\\n\\n\\tfunction release(address payable account) public override {\\n\\t\\trequire(account == _msgSender(), \\\"AdventRobots: caller is not the specified payee\\\");\\n\\n\\t\\tsuper.release(account);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenID) public view override returns(string memory) {\\n\\t\\trequire(_exists(tokenID), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n\\t\\tif (!revealed) return _unrevealedUriPrefix;\\n\\n\\t\\tstring memory currentBaseURI = _baseURI();\\n\\n\\t\\treturn bytes(currentBaseURI).length > 0 ? string( abi.encodePacked(currentBaseURI, tokenID.toString(), _uriSuffix) ) : \\\"\\\";\\n\\t}\\n\\n\\tfunction walletOfOwner(address account) external view returns(uint256[] memory) {\\n\\t\\tuint256 ownerTokenCount = balanceOf(account);\\n\\n\\t\\tuint256[] memory ownedTokenIDs = new uint256[](ownerTokenCount);\\n\\n\\n\\t\\tuint256 tokenIndex = 1;\\n\\t\\tuint256 ownedTokenIndex = 0;\\n\\n\\t\\twhile (ownedTokenIndex < ownerTokenCount && tokenIndex <= maxSupply) {\\n\\t\\t\\taddress owner = ownerOf(tokenIndex);\\n\\n\\t\\t\\tif (owner == account) {\\n\\t\\t\\t\\townedTokenIDs[ownedTokenIndex] = tokenIndex;\\n\\n\\t\\t\\t\\townedTokenIndex++;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttokenIndex++;\\n\\t\\t}\\n\\n\\n\\t\\treturn ownedTokenIDs;\\n\\t}\\n\\n\\tfunction getMintsOfAddress(address account) external view returns(uint256) {\\n\\t\\treturn _numberMinted(account);\\n\\t}\\n\\n\\tfunction getMaxMintAmountForAddress(address account) external view returns(uint256) {\\n\\t\\t(uint256 intervalStart, uint256 numberOfMinted) = _getMintAmountData(account);\\n\\n\\t\\tif (block.timestamp > intervalStart + _MAX_MINT_AMOUNT_RESET_INTERVAL) {\\n\\t\\t\\treturn maxMintAmountPerAddress;\\n\\t\\t} else {\\n\\t\\t\\treturn maxMintAmountPerAddress - numberOfMinted;\\n\\t\\t}\\n\\t}\\n\\n\\n\\tfunction setURIprefix(string memory newPrefix) external onlyOwner {\\n\\t\\temit URIprefixChanged(_uriPrefix, newPrefix);\\n\\n\\t\\t_uriPrefix = newPrefix;\\n\\t}\\n\\n\\tfunction setUnrevealedURIprefix(string memory newUnrevealedURI) external onlyOwner {\\n\\t\\temit UnrevealedURIprefixChanged(_unrevealedUriPrefix, newUnrevealedURI);\\n\\n\\t\\t_unrevealedUriPrefix = newUnrevealedURI;\\n\\t}\\n\\n\\tfunction setURIsuffix(string memory newSuffix) external onlyOwner {\\n\\t\\temit URIsuffixChanged(_uriSuffix, newSuffix);\\n\\n\\t\\t_uriSuffix = newSuffix;\\n\\t}\\n\\n\\tfunction setMaxSupply(uint256 newMaxSupply) external onlyOwner {\\n\\t\\trequire(newMaxSupply > _totalMinted() && newMaxSupply > presaleSupply, \\\"AdventRobots: invalid amount\\\");\\n\\n\\t\\temit MaxSupplyChanged(maxSupply, newMaxSupply);\\n\\n\\t\\tmaxSupply = newMaxSupply;\\n\\t}\\n\\n\\tfunction setPresaleSupply(uint256 newPresaleSupply) external onlyOwner {\\n\\t\\trequire(newPresaleSupply > _totalMinted() && newPresaleSupply < maxSupply, \\\"AdventRobots: invalid amount\\\");\\n\\n\\t\\temit PresaleSupplyChanged(presaleSupply, newPresaleSupply);\\n\\n\\t\\tpresaleSupply = newPresaleSupply;\\n\\t}\\n\\n\\tfunction setMaxMintAmountPerAddress(uint256 newMaxMintAmountPerAddress) external onlyOwner {\\n\\t\\temit MaxMintAmountPerAddressChanged(maxMintAmountPerAddress, newMaxMintAmountPerAddress);\\n\\n\\t\\tmaxMintAmountPerAddress = newMaxMintAmountPerAddress;\\n\\t}\\n\\n\\tfunction setCost(uint256 newCost) external onlyOwner {\\n\\t\\temit CostChanged(cost, newCost);\\n\\n\\t\\tcost = newCost;\\n\\t}\\n\\n\\tfunction setPresaleCost(uint256 newPresaleCost) external onlyOwner {\\n\\t\\temit PresaleCostChanged(presaleCost, newPresaleCost);\\n\\n\\t\\tpresaleCost = newPresaleCost;\\n\\t}\\n\\n\\tfunction setWhitelistMerkleRoot(bytes32 newWhitelistMerkleRoot) external onlyOwner {\\n\\t\\temit WhitelistMerkleRootChanged(_whitelistMerkleRoot, newWhitelistMerkleRoot);\\n\\n\\t\\t_whitelistMerkleRoot = newWhitelistMerkleRoot;\\n\\t}\\n\\n\\n\\tfunction _baseURI() internal view override returns(string memory) {\\n\\t\\treturn _uriPrefix;\\n\\t}\\n\\n\\tfunction _startTokenId() internal pure override returns(uint256) {\\n\\t\\treturn 1;\\n\\t}\\n\\n\\tfunction _isAddressWhitelisted(address account, bytes32[] calldata merkleProof) internal view returns(bool) {\\n\\t\\tif (account == owner()) return true;\\n\\n\\t\\tbytes32 leaf = keccak256( abi.encodePacked(account) );\\n\\t\\tbool whitelisted = MerkleProof.verify(merkleProof, _whitelistMerkleRoot, leaf);\\n\\n\\t\\treturn whitelisted;\\n\\t}\\n\\n\\tfunction _getMintAmountData(address account) internal view returns(uint256, uint256) {\\n\\t\\tuint64 aux = _getAux(account);\\n\\n\\t\\treturn ( uint256(aux >> 8), uint256(uint8(aux)) );\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/finance/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Compiler will pack this into a single 256bit word.\\n\\tstruct TokenOwnership {\\n\\t\\t// The address of the owner.\\n\\t\\taddress addr;\\n\\t\\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n\\t\\tuint64 startTimestamp;\\n\\t\\t// Whether the token has been burned.\\n\\t\\tbool burned;\\n\\t}\\n\\n\\t// Compiler will pack this into a single 256bit word.\\n\\tstruct AddressData {\\n\\t\\t// Realistically, 2**64-1 is more than enough.\\n\\t\\tuint64 balance;\\n\\t\\t// Keeps track of mint count with minimal overhead for tokenomics.\\n\\t\\tuint64 numberMinted;\\n\\t\\t// Keeps track of burn count with minimal overhead for tokenomics.\\n\\t\\tuint64 numberBurned;\\n\\t\\t// For miscellaneous variable(s) pertaining to the address\\n\\t\\t// (e.g. number of whitelist mint slots used).\\n\\t\\t// If there are multiple variables, please pack them into a uint64.\\n\\t\\tuint64 aux;\\n\\t}\\n\\n\\t// The tokenId of the next token to be minted.\\n\\tuint256 internal _currentIndex;\\n\\n\\t// The number of tokens burned.\\n\\tuint256 internal _burnCounter;\\n\\n\\t// Token name\\n\\tstring private _name;\\n\\n\\t// Token symbol\\n\\tstring private _symbol;\\n\\n\\t// Mapping from token ID to ownership details\\n\\t// An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n\\tmapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n\\t// Mapping owner address to address data\\n\\tmapping(address => AddressData) private _addressData;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) private _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_currentIndex = _startTokenId();\\n\\t}\\n\\n\\t/**\\n\\t * To change the starting tokenId, please override this function.\\n\\t */\\n\\tfunction _startTokenId() internal view virtual returns (uint256) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n\\t */\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\t// Counter underflow is impossible as _burnCounter cannot be incremented\\n\\t\\t// more than _currentIndex - _startTokenId() times\\n\\t\\tunchecked {\\n\\t\\t\\treturn _currentIndex - _burnCounter - _startTokenId();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the total amount of tokens minted in the contract.\\n\\t */\\n\\tfunction _totalMinted() internal view returns (uint256) {\\n\\t\\t// Counter underflow is impossible as _currentIndex does not decrement,\\n\\t\\t// and it is initialized to _startTokenId()\\n\\t\\tunchecked {\\n\\t\\t\\treturn _currentIndex - _startTokenId();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner) public view override returns (uint256) {\\n\\t\\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\\n\\t\\treturn uint256(_addressData[owner].balance);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the number of tokens minted by `owner`.\\n\\t */\\n\\tfunction _numberMinted(address owner) internal view returns (uint256) {\\n\\t\\treturn uint256(_addressData[owner].numberMinted);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the number of tokens burned by or on behalf of `owner`.\\n\\t */\\n\\tfunction _numberBurned(address owner) internal view returns (uint256) {\\n\\t\\treturn uint256(_addressData[owner].numberBurned);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\t */\\n\\tfunction _getAux(address owner) internal view returns (uint64) {\\n\\t\\treturn _addressData[owner].aux;\\n\\t}\\n\\n\\t/**\\n\\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\t * If there are multiple variables, please pack them into a uint64.\\n\\t */\\n\\tfunction _setAux(address owner, uint64 aux) internal {\\n\\t\\t_addressData[owner].aux = aux;\\n\\t}\\n\\n\\t/**\\n\\t * Gas spent here starts off proportional to the maximum mint batch size.\\n\\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n\\t */\\n\\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n\\t\\tuint256 curr = tokenId;\\n\\n\\t\\tunchecked {\\n\\t\\t\\tif (_startTokenId() <= curr && curr < _currentIndex) {\\n\\t\\t\\t\\tTokenOwnership memory ownership = _ownerships[curr];\\n\\t\\t\\t\\tif (!ownership.burned) {\\n\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\n\\t\\t\\t\\t\\t\\treturn ownership;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Invariant:\\n\\t\\t\\t\\t\\t// There will always be an ownership that has an address and is not burned\\n\\t\\t\\t\\t\\t// before an ownership that does not have an address and is not burned.\\n\\t\\t\\t\\t\\t// Hence, curr will not underflow.\\n\\t\\t\\t\\t\\twhile (true) {\\n\\t\\t\\t\\t\\t\\tcurr--;\\n\\t\\t\\t\\t\\t\\townership = _ownerships[curr];\\n\\t\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\n\\t\\t\\t\\t\\t\\t\\treturn ownership;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trevert OwnerQueryForNonexistentToken();\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\\n\\t\\treturn _ownershipOf(tokenId).addr;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n\\t\\tstring memory baseURI = _baseURI();\\n\\t\\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n\\t}\\n\\n\\t/**\\n\\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n\\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n\\t * by default, can be overriden in child contracts.\\n\\t */\\n\\tfunction _baseURI() internal view virtual returns (string memory) {\\n\\t\\treturn '';\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public override {\\n\\t\\taddress owner = ERC721A.ownerOf(tokenId);\\n\\t\\tif (to == owner) revert ApprovalToCurrentOwner();\\n\\n\\t\\tif (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n\\t\\t\\trevert ApprovalCallerNotOwnerNorApproved();\\n\\t\\t}\\n\\n\\t\\t_approve(to, tokenId, owner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId) public view override returns (address) {\\n\\t\\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\n\\t\\tif (operator == _msgSender()) revert ApproveToCaller();\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, '');\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\tif (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\n\\t\\treturn _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n\\t}\\n\\n\\tfunction _safeMint(address to, uint256 quantity) internal {\\n\\t\\t_safeMint(to, quantity, '');\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n\\t * - `quantity` must be greater than 0.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\tbytes memory _data\\n\\t) internal {\\n\\t\\t_mint(to, quantity, _data, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `quantity` tokens and transfers them to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `quantity` must be greater than 0.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\tbytes memory _data,\\n\\t\\tbool safe\\n\\t) internal {\\n\\t\\tuint256 startTokenId = _currentIndex;\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\n\\t\\tif (quantity == 0) revert MintZeroQuantity();\\n\\n\\t\\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n\\t\\t// Overflows are incredibly unrealistic.\\n\\t\\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n\\t\\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n\\t\\tunchecked {\\n\\t\\t\\t_addressData[to].balance += uint64(quantity);\\n\\t\\t\\t_addressData[to].numberMinted += uint64(quantity);\\n\\n\\t\\t\\t_ownerships[startTokenId].addr = to;\\n\\t\\t\\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n\\t\\t\\tuint256 updatedIndex = startTokenId;\\n\\t\\t\\tuint256 end = updatedIndex + quantity;\\n\\n\\t\\t\\tif (safe && to.isContract()) {\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\temit Transfer(address(0), to, updatedIndex);\\n\\t\\t\\t\\t\\tif (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n\\t\\t\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} while (updatedIndex != end);\\n\\t\\t\\t\\t// Reentrancy protection\\n\\t\\t\\t\\tif (_currentIndex != startTokenId) revert();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\temit Transfer(address(0), to, updatedIndex++);\\n\\t\\t\\t\\t} while (updatedIndex != end);\\n\\t\\t\\t}\\n\\t\\t\\t_currentIndex = updatedIndex;\\n\\t\\t}\\n\\t\\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) private {\\n\\t\\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n\\t\\tif (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n\\t\\tbool isApprovedOrOwner = (_msgSender() == from ||\\n\\t\\t\\tisApprovedForAll(from, _msgSender()) ||\\n\\t\\t\\tgetApproved(tokenId) == _msgSender());\\n\\n\\t\\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n\\t\\tif (to == address(0)) revert TransferToZeroAddress();\\n\\n\\t\\t_beforeTokenTransfers(from, to, tokenId, 1);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId, from);\\n\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\t\\tunchecked {\\n\\t\\t\\t_addressData[from].balance -= 1;\\n\\t\\t\\t_addressData[to].balance += 1;\\n\\n\\t\\t\\tTokenOwnership storage currSlot = _ownerships[tokenId];\\n\\t\\t\\tcurrSlot.addr = to;\\n\\t\\t\\tcurrSlot.startTimestamp = uint64(block.timestamp);\\n\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\n\\t\\t\\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n\\t\\t\\tif (nextSlot.addr == address(0)) {\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\n\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\n\\t\\t\\t\\t\\tnextSlot.addr = from;\\n\\t\\t\\t\\t\\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t\\t_afterTokenTransfers(from, to, tokenId, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @dev This is equivalent to _burn(tokenId, false)\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\t_burn(tokenId, false);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n\\t\\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n\\t\\taddress from = prevOwnership.addr;\\n\\n\\t\\tif (approvalCheck) {\\n\\t\\t\\tbool isApprovedOrOwner = (_msgSender() == from ||\\n\\t\\t\\t\\tisApprovedForAll(from, _msgSender()) ||\\n\\t\\t\\t\\tgetApproved(tokenId) == _msgSender());\\n\\n\\t\\t\\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n\\t\\t}\\n\\n\\t\\t_beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId, from);\\n\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\t\\tunchecked {\\n\\t\\t\\tAddressData storage addressData = _addressData[from];\\n\\t\\t\\taddressData.balance -= 1;\\n\\t\\t\\taddressData.numberBurned += 1;\\n\\n\\t\\t\\t// Keep track of who burned the token, and the timestamp of burning.\\n\\t\\t\\tTokenOwnership storage currSlot = _ownerships[tokenId];\\n\\t\\t\\tcurrSlot.addr = from;\\n\\t\\t\\tcurrSlot.startTimestamp = uint64(block.timestamp);\\n\\t\\t\\tcurrSlot.burned = true;\\n\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\n\\t\\t\\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n\\t\\t\\tif (nextSlot.addr == address(0)) {\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\n\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\n\\t\\t\\t\\t\\tnextSlot.addr = from;\\n\\t\\t\\t\\t\\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit Transfer(from, address(0), tokenId);\\n\\t\\t_afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n\\t\\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n\\t\\tunchecked {\\n\\t\\t\\t_burnCounter++;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress owner\\n\\t) private {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(owner, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkContractOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n\\t * And also called before burning one token.\\n\\t *\\n\\t * startTokenId - the first token id to be transferred\\n\\t * quantity - the amount to be transferred\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, `tokenId` will be burned by `from`.\\n\\t * - `from` and `to` are never both zero.\\n\\t */\\n\\tfunction _beforeTokenTransfers(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 startTokenId,\\n\\t\\tuint256 quantity\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n\\t * minting.\\n\\t * And also called after one token has been burned.\\n\\t *\\n\\t * startTokenId - the first token id to be transferred\\n\\t * quantity - the amount to be transferred\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` has been minted for `to`.\\n\\t * - When `to` is zero, `tokenId` has been burned by `from`.\\n\\t * - `from` and `to` are never both zero.\\n\\t */\\n\\tfunction _afterTokenTransfers(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 startTokenId,\\n\\t\\tuint256 quantity\\n\\t) internal virtual {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initUnrevealedUriPrefix\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"initWhitelistMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldCost\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"CostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMaxMintAmountPerAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxMintAmountPerAddress\",\"type\":\"uint256\"}],\"name\":\"MaxMintAmountPerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMaxSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldPaused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newPaused\",\"type\":\"bool\"}],\"name\":\"PausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldPresaleCost\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPresaleCost\",\"type\":\"uint256\"}],\"name\":\"PresaleCostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldPresaleSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPresaleSupply\",\"type\":\"uint256\"}],\"name\":\"PresaleSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldURIprefix\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newURIprefix\",\"type\":\"string\"}],\"name\":\"URIprefixChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldURIsuffix\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newURIsuffix\",\"type\":\"string\"}],\"name\":\"URIsuffixChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldUnrevealedURIprefix\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newUnrevealedURIprefix\",\"type\":\"string\"}],\"name\":\"UnrevealedURIprefixChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldWhitelistMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newWhitelistMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"WhitelistMerkleRootChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"amounts\",\"type\":\"uint8[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPausedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMaxMintAmountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMintsOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initUriPrefix\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintAmountPerAddress\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPresaleCost\",\"type\":\"uint256\"}],\"name\":\"setPresaleCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPresaleSupply\",\"type\":\"uint256\"}],\"name\":\"setPresaleSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newPrefix\",\"type\":\"string\"}],\"name\":\"setURIprefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSuffix\",\"type\":\"string\"}],\"name\":\"setURIsuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUnrevealedURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedURIprefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWhitelistMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AdventRobots", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000804fbdfd9b068b7ca1477c4e2fa58644779bdc78081ccead9d2448b4a10465f0a8000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000041697066733a2f2f516d5642656b5476564d7a776b6f58416a4369375745417565595137694c46504e5271583157324a6432443372552f68696464656e2e6a736f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f4130479b280c8a4ea554d80f1441d25c140094100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}