{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC721A {\r\n  /**\r\n   * The caller must own the token or be an approved operator.\r\n   */\r\n  error ApprovalCallerNotOwnerNorApproved();\r\n  /**\r\n   * The token does not exist.\r\n   */\r\n  error ApprovalQueryForNonexistentToken();\r\n  /**\r\n   * The caller cannot approve to their own address.\r\n   */\r\n  error ApproveToCaller();\r\n  /**\r\n   * Cannot query the balance for the zero address.\r\n   */\r\n  error BalanceQueryForZeroAddress();\r\n  /**\r\n   * Cannot mint to the zero address.\r\n   */\r\n  error MintToZeroAddress();\r\n  /**\r\n   * The quantity of tokens minted must be more than zero.\r\n   */\r\n  error MintZeroQuantity();\r\n  /**\r\n   * The token does not exist.\r\n   */\r\n  error OwnerQueryForNonexistentToken();\r\n  /**\r\n   * The caller must own the token or be an approved operator.\r\n   */\r\n  error TransferCallerNotOwnerNorApproved();\r\n  /**\r\n   * The token must be owned by `from`.\r\n   */\r\n  error TransferFromIncorrectOwner();\r\n  /**\r\n   * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n   */\r\n  error TransferToNonERC721ReceiverImplementer();\r\n  /**\r\n   * Cannot transfer to the zero address.\r\n   */\r\n  error TransferToZeroAddress();\r\n  /**\r\n   * The token does not exist.\r\n   */\r\n  error URIQueryForNonexistentToken();\r\n  /**\r\n   * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n   */\r\n  error MintERC2309QuantityExceedsLimit();\r\n  /**\r\n   * The `extraData` cannot be set on an unintialized ownership slot.\r\n   */\r\n  error OwnershipNotInitializedForExtraData();\r\n  struct TokenOwnership {\r\n    // The address of the owner.\r\n    address addr;\r\n    // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n    uint64 startTimestamp;\r\n    // Whether the token has been burned.\r\n    bool burned;\r\n    // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\r\n    uint24 extraData;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total amount of tokens stored by the contract.\r\n   *\r\n   * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  // ==============================\r\n  //            IERC165\r\n  // ==============================\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n  // ==============================\r\n  //            IERC721\r\n  // ==============================\r\n  /**\r\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  /**\r\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n   */\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  /**\r\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in ``owner``'s account.\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  // ==============================\r\n  //        IERC721Metadata\r\n  // ==============================\r\n  /**\r\n   * @dev Returns the token collection name.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token collection symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n  // ==============================\r\n  //            IERC2309\r\n  // ==============================\r\n  /**\r\n   * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\r\n   * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\r\n   */\r\n  event ConsecutiveTransfer(\r\n    uint256 indexed fromTokenId,\r\n    uint256 toTokenId,\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n}\r\n\r\ninterface ERC721A__IERC721Receiver {\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\r\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at `_startTokenId()`\r\n * (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n  // Mask of an entry in packed address data.\r\n  uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n  // The bit position of `numberMinted` in packed address data.\r\n  uint256 private constant BITPOS_NUMBER_MINTED = 64;\r\n  // The bit position of `numberBurned` in packed address data.\r\n  uint256 private constant BITPOS_NUMBER_BURNED = 128;\r\n  // The bit position of `aux` in packed address data.\r\n  uint256 private constant BITPOS_AUX = 192;\r\n  // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n  uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n  // The bit position of `startTimestamp` in packed ownership.\r\n  uint256 private constant BITPOS_START_TIMESTAMP = 160;\r\n  // The bit mask of the `burned` bit in packed ownership.\r\n  uint256 private constant BITMASK_BURNED = 1 << 224;\r\n  // The bit position of the `nextInitialized` bit in packed ownership.\r\n  uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\r\n  // The bit mask of the `nextInitialized` bit in packed ownership.\r\n  uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n  // The bit position of `extraData` in packed ownership.\r\n  uint256 private constant BITPOS_EXTRA_DATA = 232;\r\n  // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n  uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n  // The mask of the lower 160 bits for addresses.\r\n  uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\r\n  // The maximum `quantity` that can be minted with `_mintERC2309`.\r\n  // This limit is to prevent overflows on the address data entries.\r\n  // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\r\n  // is required to cause an overflow, which is unrealistic.\r\n  uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n  // The tokenId of the next token to be minted.\r\n  uint256 private _currentIndex;\r\n  // The number of tokens burned.\r\n  uint256 private _burnCounter;\r\n  // Token name\r\n  string private _name;\r\n  // Token symbol\r\n  string private _symbol;\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned.\r\n  // See `_packedOwnershipOf` implementation for details.\r\n  //\r\n  // Bits Layout:\r\n  // - [0..159]   `addr`\r\n  // - [160..223] `startTimestamp`\r\n  // - [224]      `burned`\r\n  // - [225]      `nextInitialized`\r\n  // - [232..255] `extraData`\r\n  mapping(uint256 => uint256) private _packedOwnerships;\r\n  // Mapping owner address to address data.\r\n  //\r\n  // Bits Layout:\r\n  // - [0..63]    `balance`\r\n  // - [64..127]  `numberMinted`\r\n  // - [128..191] `numberBurned`\r\n  // - [192..255] `aux`\r\n  mapping(address => uint256) private _packedAddressData;\r\n  // Mapping from token ID to approved address.\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _currentIndex = _startTokenId();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the starting token ID.\r\n   * To change the starting token ID, please override this function.\r\n   */\r\n  function _startTokenId() internal view virtual returns (uint256) {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the next token ID to be minted.\r\n   */\r\n  function _nextTokenId() internal view returns (uint256) {\r\n    return _currentIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total number of tokens in existence.\r\n   * Burned tokens will reduce the count.\r\n   * To get the total number of tokens minted, please see `_totalMinted`.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    // Counter underflow is impossible as _burnCounter cannot be incremented\r\n    // more than `_currentIndex - _startTokenId()` times.\r\n    unchecked {\r\n      return _currentIndex - _burnCounter - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total amount of tokens minted in the contract.\r\n   */\r\n  function _totalMinted() internal view returns (uint256) {\r\n    // Counter underflow is impossible as _currentIndex does not decrement,\r\n    // and it is initialized to `_startTokenId()`\r\n    unchecked {\r\n      return _currentIndex - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total number of tokens burned.\r\n   */\r\n  function _totalBurned() internal view returns (uint256) {\r\n    return _burnCounter;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    // The interface IDs are constants representing the first 4 bytes of the XOR of\r\n    // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\r\n    // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\r\n    return\r\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n      interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n      interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n    return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of tokens minted by `owner`.\r\n   */\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    return\r\n      (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) &\r\n      BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of tokens burned by or on behalf of `owner`.\r\n   */\r\n  function _numberBurned(address owner) internal view returns (uint256) {\r\n    return\r\n      (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) &\r\n      BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n   */\r\n  function _getAux(address owner) internal view returns (uint64) {\r\n    return uint64(_packedAddressData[owner] >> BITPOS_AUX);\r\n  }\r\n\r\n  /**\r\n   * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n   * If there are multiple variables, please pack them into a uint64.\r\n   */\r\n  function _setAux(address owner, uint64 aux) internal {\r\n    uint256 packed = _packedAddressData[owner];\r\n    uint256 auxCasted;\r\n    // Cast `aux` with assembly to avoid redundant masking.\r\n    assembly {\r\n      auxCasted := aux\r\n    }\r\n    packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\r\n    _packedAddressData[owner] = packed;\r\n  }\r\n\r\n  /**\r\n   * Returns the packed ownership data of `tokenId`.\r\n   */\r\n  function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n    uint256 curr = tokenId;\r\n    unchecked {\r\n      if (_startTokenId() <= curr)\r\n        if (curr < _currentIndex) {\r\n          uint256 packed = _packedOwnerships[curr];\r\n          // If not burned.\r\n          if (packed & BITMASK_BURNED == 0) {\r\n            // Invariant:\r\n            // There will always be an ownership that has an address and is not burned\r\n            // before an ownership that does not have an address and is not burned.\r\n            // Hence, curr will not underflow.\r\n            //\r\n            // We can directly compare the packed value.\r\n            // If the address is zero, packed is zero.\r\n            while (packed == 0) {\r\n              packed = _packedOwnerships[--curr];\r\n            }\r\n            return packed;\r\n          }\r\n        }\r\n    }\r\n    revert OwnerQueryForNonexistentToken();\r\n  }\r\n\r\n  /**\r\n   * Returns the unpacked `TokenOwnership` struct from `packed`.\r\n   */\r\n  function _unpackedOwnership(uint256 packed)\r\n    private\r\n    pure\r\n    returns (TokenOwnership memory ownership)\r\n  {\r\n    ownership.addr = address(uint160(packed));\r\n    ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\r\n    ownership.burned = packed & BITMASK_BURNED != 0;\r\n    ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\r\n  }\r\n\r\n  /**\r\n   * Returns the unpacked `TokenOwnership` struct at `index`.\r\n   */\r\n  function _ownershipAt(uint256 index)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    return _unpackedOwnership(_packedOwnerships[index]);\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n   */\r\n  function _initializeOwnershipAt(uint256 index) internal {\r\n    if (_packedOwnerships[index] == 0) {\r\n      _packedOwnerships[index] = _packedOwnershipOf(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gas spent here starts off proportional to the maximum mint batch size.\r\n   * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n   */\r\n  function _ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n  }\r\n\r\n  /**\r\n   * @dev Packs ownership data into a single uint256.\r\n   */\r\n  function _packOwnershipData(address owner, uint256 flags)\r\n    private\r\n    view\r\n    returns (uint256 result)\r\n  {\r\n    assembly {\r\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n      owner := and(owner, BITMASK_ADDRESS)\r\n      // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\r\n      result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return address(uint160(_packedOwnershipOf(tokenId)));\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length != 0\r\n        ? string(abi.encodePacked(baseURI, _toString(tokenId)))\r\n        : \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n   * by default, it can be overridden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n   */\r\n  function _nextInitializedFlag(uint256 quantity)\r\n    private\r\n    pure\r\n    returns (uint256 result)\r\n  {\r\n    // For branchless setting of the `nextInitialized` flag.\r\n    assembly {\r\n      // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\r\n      result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public override {\r\n    address owner = ownerOf(tokenId);\r\n    if (_msgSenderERC721A() != owner)\r\n      if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n        revert ApprovalCallerNotOwnerNorApproved();\r\n      }\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view override returns (address) {\r\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n    _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n    emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    transferFrom(from, to, tokenId);\r\n    if (to.code.length != 0)\r\n      if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n        revert TransferToNonERC721ReceiverImplementer();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `tokenId` exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (`_mint`),\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return\r\n      _startTokenId() <= tokenId &&\r\n      tokenId < _currentIndex && // If within bounds,\r\n      _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\r\n  }\r\n\r\n  /**\r\n   * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n   */\r\n  function _safeMint(address to, uint256 quantity) internal {\r\n    _safeMint(to, quantity, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - If `to` refers to a smart contract, it must implement\r\n   *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * See {_mint}.\r\n   *\r\n   * Emits a {Transfer} event for each mint.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bytes memory _data\r\n  ) internal {\r\n    _mint(to, quantity);\r\n    unchecked {\r\n      if (to.code.length != 0) {\r\n        uint256 end = _currentIndex;\r\n        uint256 index = end - quantity;\r\n        do {\r\n          if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n          }\r\n        } while (index < end);\r\n        // Reentrancy protection.\r\n        if (_currentIndex != end) revert();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * Emits a {Transfer} event for each mint.\r\n   */\r\n  function _mint(address to, uint256 quantity) internal {\r\n    uint256 startTokenId = _currentIndex;\r\n    if (to == address(0)) revert MintToZeroAddress();\r\n    if (quantity == 0) revert MintZeroQuantity();\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n    // Overflows are incredibly unrealistic.\r\n    // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n    // `tokenId` has a maximum limit of 2**256.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance += quantity`.\r\n      // - `numberMinted += quantity`.\r\n      //\r\n      // We can directly add to the `balance` and `numberMinted`.\r\n      _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n      // Updates:\r\n      // - `address` to the owner.\r\n      // - `startTimestamp` to the timestamp of minting.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `quantity == 1`.\r\n      _packedOwnerships[startTokenId] = _packOwnershipData(\r\n        to,\r\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n      );\r\n      uint256 tokenId = startTokenId;\r\n      uint256 end = startTokenId + quantity;\r\n      do {\r\n        emit Transfer(address(0), to, tokenId++);\r\n      } while (tokenId < end);\r\n      _currentIndex = end;\r\n    }\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * This function is intended for efficient minting only during contract creation.\r\n   *\r\n   * It emits only one {ConsecutiveTransfer} as defined in\r\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n   * instead of a sequence of {Transfer} event(s).\r\n   *\r\n   * Calling this function outside of contract creation WILL make your contract\r\n   * non-compliant with the ERC721 standard.\r\n   * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n   * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * Emits a {ConsecutiveTransfer} event.\r\n   */\r\n  function _mintERC2309(address to, uint256 quantity) internal {\r\n    uint256 startTokenId = _currentIndex;\r\n    if (to == address(0)) revert MintToZeroAddress();\r\n    if (quantity == 0) revert MintZeroQuantity();\r\n    if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT)\r\n      revert MintERC2309QuantityExceedsLimit();\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n    // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance += quantity`.\r\n      // - `numberMinted += quantity`.\r\n      //\r\n      // We can directly add to the `balance` and `numberMinted`.\r\n      _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n      // Updates:\r\n      // - `address` to the owner.\r\n      // - `startTimestamp` to the timestamp of minting.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `quantity == 1`.\r\n      _packedOwnerships[startTokenId] = _packOwnershipData(\r\n        to,\r\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n      );\r\n      emit ConsecutiveTransfer(\r\n        startTokenId,\r\n        startTokenId + quantity - 1,\r\n        address(0),\r\n        to\r\n      );\r\n      _currentIndex = startTokenId + quantity;\r\n    }\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n   */\r\n  function _getApprovedAddress(uint256 tokenId)\r\n    private\r\n    view\r\n    returns (uint256 approvedAddressSlot, address approvedAddress)\r\n  {\r\n    mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\r\n    // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\r\n    assembly {\r\n      // Compute the slot.\r\n      mstore(0x00, tokenId)\r\n      mstore(0x20, tokenApprovalsPtr.slot)\r\n      approvedAddressSlot := keccak256(0x00, 0x40)\r\n      // Load the slot's value from storage.\r\n      approvedAddress := sload(approvedAddressSlot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\r\n   */\r\n  function _isOwnerOrApproved(\r\n    address approvedAddress,\r\n    address from,\r\n    address msgSender\r\n  ) private pure returns (bool result) {\r\n    assembly {\r\n      // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n      from := and(from, BITMASK_ADDRESS)\r\n      // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n      msgSender := and(msgSender, BITMASK_ADDRESS)\r\n      // `msgSender == from || msgSender == approvedAddress`.\r\n      result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n    if (address(uint160(prevOwnershipPacked)) != from)\r\n      revert TransferFromIncorrectOwner();\r\n    (\r\n      uint256 approvedAddressSlot,\r\n      address approvedAddress\r\n    ) = _getApprovedAddress(tokenId);\r\n    // The nested ifs save around 20+ gas over a compound boolean condition.\r\n    if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n      if (!isApprovedForAll(from, _msgSenderERC721A()))\r\n        revert TransferCallerNotOwnerNorApproved();\r\n    if (to == address(0)) revert TransferToZeroAddress();\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n    // Clear approvals from the previous owner.\r\n    assembly {\r\n      if approvedAddress {\r\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n        sstore(approvedAddressSlot, 0)\r\n      }\r\n    }\r\n    // Underflow of the sender's balance is impossible because we check for\r\n    // ownership above and the recipient's balance can't realistically overflow.\r\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n    unchecked {\r\n      // We can directly increment and decrement the balances.\r\n      --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n      ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n      // Updates:\r\n      // - `address` to the next owner.\r\n      // - `startTimestamp` to the timestamp of transfering.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `true`.\r\n      _packedOwnerships[tokenId] = _packOwnershipData(\r\n        to,\r\n        BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n      );\r\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n      if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n        uint256 nextTokenId = tokenId + 1;\r\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n        if (_packedOwnerships[nextTokenId] == 0) {\r\n          // If the next slot is within bounds.\r\n          if (nextTokenId != _currentIndex) {\r\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Equivalent to `_burn(tokenId, false)`.\r\n   */\r\n  function _burn(uint256 tokenId) internal virtual {\r\n    _burn(tokenId, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `tokenId`.\r\n   * The approval is cleared when the token is burned.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n    address from = address(uint160(prevOwnershipPacked));\r\n    (\r\n      uint256 approvedAddressSlot,\r\n      address approvedAddress\r\n    ) = _getApprovedAddress(tokenId);\r\n    if (approvalCheck) {\r\n      // The nested ifs save around 20+ gas over a compound boolean condition.\r\n      if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n        if (!isApprovedForAll(from, _msgSenderERC721A()))\r\n          revert TransferCallerNotOwnerNorApproved();\r\n    }\r\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n    // Clear approvals from the previous owner.\r\n    assembly {\r\n      if approvedAddress {\r\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n        sstore(approvedAddressSlot, 0)\r\n      }\r\n    }\r\n    // Underflow of the sender's balance is impossible because we check for\r\n    // ownership above and the recipient's balance can't realistically overflow.\r\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance -= 1`.\r\n      // - `numberBurned += 1`.\r\n      //\r\n      // We can directly decrement the balance, and increment the number burned.\r\n      // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\r\n      _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\r\n      // Updates:\r\n      // - `address` to the last owner.\r\n      // - `startTimestamp` to the timestamp of burning.\r\n      // - `burned` to `true`.\r\n      // - `nextInitialized` to `true`.\r\n      _packedOwnerships[tokenId] = _packOwnershipData(\r\n        from,\r\n        (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) |\r\n          _nextExtraData(from, address(0), prevOwnershipPacked)\r\n      );\r\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n      if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n        uint256 nextTokenId = tokenId + 1;\r\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n        if (_packedOwnerships[nextTokenId] == 0) {\r\n          // If the next slot is within bounds.\r\n          if (nextTokenId != _currentIndex) {\r\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    emit Transfer(from, address(0), tokenId);\r\n    _afterTokenTransfers(from, address(0), tokenId, 1);\r\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n    unchecked {\r\n      _burnCounter++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkContractOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    try\r\n      ERC721A__IERC721Receiver(to).onERC721Received(\r\n        _msgSenderERC721A(),\r\n        from,\r\n        tokenId,\r\n        _data\r\n      )\r\n    returns (bytes4 retval) {\r\n      return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n    } catch (bytes memory reason) {\r\n      if (reason.length == 0) {\r\n        revert TransferToNonERC721ReceiverImplementer();\r\n      } else {\r\n        assembly {\r\n          revert(add(32, reason), mload(reason))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Directly sets the extra data for the ownership data `index`.\r\n   */\r\n  function _setExtraDataAt(uint256 index, uint24 extraData) internal {\r\n    uint256 packed = _packedOwnerships[index];\r\n    if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n    uint256 extraDataCasted;\r\n    // Cast `extraData` with assembly to avoid redundant masking.\r\n    assembly {\r\n      extraDataCasted := extraData\r\n    }\r\n    packed =\r\n      (packed & BITMASK_EXTRA_DATA_COMPLEMENT) |\r\n      (extraDataCasted << BITPOS_EXTRA_DATA);\r\n    _packedOwnerships[index] = packed;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the next extra data for the packed ownership data.\r\n   * The returned result is shifted into position.\r\n   */\r\n  function _nextExtraData(\r\n    address from,\r\n    address to,\r\n    uint256 prevOwnershipPacked\r\n  ) private view returns (uint256) {\r\n    uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\r\n    return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\r\n  }\r\n\r\n  /**\r\n   * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n   * Intended to be overridden by the cosumer contract.\r\n   *\r\n   * `previousExtraData` - the value of `extraData` before transfer.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, `tokenId` will be burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _extraData(\r\n    address from,\r\n    address to,\r\n    uint24 previousExtraData\r\n  ) internal view virtual returns (uint24) {}\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\r\n   * This includes minting.\r\n   * And also called before burning one token.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, `tokenId` will be burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\r\n   * This includes minting.\r\n   * And also called after one token has been burned.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` has been minted for `to`.\r\n   * - When `to` is zero, `tokenId` has been burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Returns the message sender (defaults to `msg.sender`).\r\n   *\r\n   * If you are writing GSN compatible contracts, you need to override this function.\r\n   */\r\n  function _msgSenderERC721A() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function _toString(uint256 value) internal pure returns (string memory ptr) {\r\n    assembly {\r\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit),\r\n      // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\r\n      // We will need 1 32-byte word to store the length,\r\n      // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\r\n      ptr := add(mload(0x40), 128)\r\n      // Update the free memory pointer to allocate.\r\n      mstore(0x40, ptr)\r\n      // Cache the end of the memory to calculate the length later.\r\n      let end := ptr\r\n      // We write the string from the rightmost digit to the leftmost digit.\r\n      // The following is essentially a do-while loop that also handles the zero case.\r\n      // Costs a bit more than early returning for the zero case,\r\n      // but cheaper in terms of deployment and overall runtime costs.\r\n      for {\r\n        // Initialize and perform the first pass without check.\r\n        let temp := value\r\n        // Move the pointer 1 byte leftwards to point to an empty character slot.\r\n        ptr := sub(ptr, 1)\r\n        // Write the character to the pointer. 48 is the ASCII index of '0'.\r\n        mstore8(ptr, add(48, mod(temp, 10)))\r\n        temp := div(temp, 10)\r\n      } temp {\r\n        // Keep dividing `temp` until zero.\r\n        temp := div(temp, 10)\r\n      } {\r\n        // Body of the for loop.\r\n        ptr := sub(ptr, 1)\r\n        mstore8(ptr, add(48, mod(temp, 10)))\r\n      }\r\n      let length := sub(end, ptr)\r\n      // Move the pointer 32 bytes leftwards to make room for the length.\r\n      ptr := sub(ptr, 32)\r\n      // Store the length.\r\n      mstore(ptr, length)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n  /**\r\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n   * by `operator` from `from`, this function is called.\r\n   *\r\n   * It must return its Solidity selector to confirm the token transfer.\r\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n   *\r\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return \"0x00\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 length = 0;\r\n    while (temp != 0) {\r\n      length++;\r\n      temp >>= 8;\r\n    }\r\n    return toHexString(value, length);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = \"0\";\r\n    buffer[1] = \"x\";\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0, \"Strings: hex length insufficient\");\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n  enum RecoverError {\r\n    NoError,\r\n    InvalidSignature,\r\n    InvalidSignatureLength,\r\n    InvalidSignatureS,\r\n    InvalidSignatureV\r\n  }\r\n\r\n  function _throwError(RecoverError error) private pure {\r\n    if (error == RecoverError.NoError) {\r\n      return; // no error: do nothing\r\n    } else if (error == RecoverError.InvalidSignature) {\r\n      revert(\"ECDSA: invalid signature\");\r\n    } else if (error == RecoverError.InvalidSignatureLength) {\r\n      revert(\"ECDSA: invalid signature length\");\r\n    } else if (error == RecoverError.InvalidSignatureS) {\r\n      revert(\"ECDSA: invalid signature 's' value\");\r\n    } else if (error == RecoverError.InvalidSignatureV) {\r\n      revert(\"ECDSA: invalid signature 'v' value\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address that signed a hashed message (`hash`) with\r\n   * `signature` or error string. This address can then be used for verification purposes.\r\n   *\r\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n   * this function rejects them by requiring the `s` value to be in the lower\r\n   * half order, and the `v` value to be either 27 or 28.\r\n   *\r\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n   * verification to be secure: it is possible to craft signatures that\r\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n   * this is by receiving a hash of the original message (which may otherwise\r\n   * be too long), and then calling {toEthSignedMessageHash} on it.\r\n   *\r\n   * Documentation for signature generation:\r\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(bytes32 hash, bytes memory signature)\r\n    internal\r\n    pure\r\n    returns (address, RecoverError)\r\n  {\r\n    // Check the signature length\r\n    // - case 65: r,s,v signature (standard)\r\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n    if (signature.length == 65) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n      // ecrecover takes the signature parameters, and the only way to get them\r\n      // currently is to use assembly.\r\n      assembly {\r\n        r := mload(add(signature, 0x20))\r\n        s := mload(add(signature, 0x40))\r\n        v := byte(0, mload(add(signature, 0x60)))\r\n      }\r\n      return tryRecover(hash, v, r, s);\r\n    } else if (signature.length == 64) {\r\n      bytes32 r;\r\n      bytes32 vs;\r\n      // ecrecover takes the signature parameters, and the only way to get them\r\n      // currently is to use assembly.\r\n      assembly {\r\n        r := mload(add(signature, 0x20))\r\n        vs := mload(add(signature, 0x40))\r\n      }\r\n      return tryRecover(hash, r, vs);\r\n    } else {\r\n      return (address(0), RecoverError.InvalidSignatureLength);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address that signed a hashed message (`hash`) with\r\n   * `signature`. This address can then be used for verification purposes.\r\n   *\r\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n   * this function rejects them by requiring the `s` value to be in the lower\r\n   * half order, and the `v` value to be either 27 or 28.\r\n   *\r\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n   * verification to be secure: it is possible to craft signatures that\r\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n   * this is by receiving a hash of the original message (which may otherwise\r\n   * be too long), and then calling {toEthSignedMessageHash} on it.\r\n   */\r\n  function recover(bytes32 hash, bytes memory signature)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n   *\r\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(\r\n    bytes32 hash,\r\n    bytes32 r,\r\n    bytes32 vs\r\n  ) internal pure returns (address, RecoverError) {\r\n    bytes32 s = vs &\r\n      bytes32(\r\n        0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\r\n      );\r\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n    return tryRecover(hash, v, r, s);\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n   *\r\n   * _Available since v4.2._\r\n   */\r\n  function recover(\r\n    bytes32 hash,\r\n    bytes32 r,\r\n    bytes32 vs\r\n  ) internal pure returns (address) {\r\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n   * `r` and `s` signature fields separately.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function tryRecover(\r\n    bytes32 hash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal pure returns (address, RecoverError) {\r\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n    // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n    //\r\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n    // these malleable signatures as well.\r\n    if (\r\n      uint256(s) >\r\n      0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\r\n    ) {\r\n      return (address(0), RecoverError.InvalidSignatureS);\r\n    }\r\n    if (v != 27 && v != 28) {\r\n      return (address(0), RecoverError.InvalidSignatureV);\r\n    }\r\n    // If the signature is valid (and not malleable), return the signer address\r\n    address signer = ecrecover(hash, v, r, s);\r\n    if (signer == address(0)) {\r\n      return (address(0), RecoverError.InvalidSignature);\r\n    }\r\n    return (signer, RecoverError.NoError);\r\n  }\r\n\r\n  /**\r\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n   * `r` and `s` signature fields separately.\r\n   */\r\n  function recover(\r\n    bytes32 hash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal pure returns (address) {\r\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n    _throwError(error);\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n   * produces hash corresponding to the one signed with the\r\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n   * JSON-RPC method as part of EIP-191.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return\r\n      keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n   * produces hash corresponding to the one signed with the\r\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n   * JSON-RPC method as part of EIP-191.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toEthSignedMessageHash(bytes memory s)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    return\r\n      keccak256(\r\n        abi.encodePacked(\r\n          \"\\x19Ethereum Signed Message:\\n\",\r\n          Strings.toString(s.length),\r\n          s\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an Ethereum Signed Typed Data, created from a\r\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n   * to the one signed with the\r\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n   * JSON-RPC method as part of EIP-712.\r\n   *\r\n   * See {recover}.\r\n   */\r\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  /**\r\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n   */\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  /**\r\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in ``owner``'s account.\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n  uint256 private _status;\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and making it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n    _;\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\n/*\r\n\u2566\u2550\u2557\u250c\u2500\u2510\u250c\u2500\u2510\u252c \u252c\u252c\u2500\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510\u252c\u250c\u2500\u2510\u250c\u2510\u250c\r\n\u2560\u2566\u255d\u251c\u2524 \u2514\u2500\u2510\u2502 \u2502\u251c\u252c\u2518\u251c\u252c\u2518\u251c\u2524 \u2502   \u2502 \u2502\u2502 \u2502\u2502\u2502\u2502\r\n\u2569\u255a\u2550\u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518\u2534\u2514\u2500\u2534\u2514\u2500\u2514\u2500\u2518\u2514\u2500\u2518 \u2534 \u2534\u2514\u2500\u2518\u2518\u2514\u2518\r\nby Coniun\r\n@creator:     ConiunIO\r\n@security:    batuhan@coniun.io\r\n@author:      Batuhan KATIRCI (@batuhan_katirci)\r\n@website:     https://coniun.io/\r\n*/\r\nerror InvalidSignature(string message);\r\nstruct CallDataInfo {\r\n  uint256 _tokenId;\r\n  address _contractAddress;\r\n  uint256 _amount;\r\n  uint256 _backendMintStage;\r\n  bytes _signature;\r\n}\r\n\r\ncontract ResurrectionByConiunV2 is\r\n  ERC721A,\r\n  IERC721Receiver,\r\n  Ownable,\r\n  ReentrancyGuard\r\n{\r\n  event NftMinted(\r\n    address indexed contractAddress,\r\n    address indexed minterAddress,\r\n    uint256 amount,\r\n    uint256 mintStartFrom,\r\n    uint256 sourceTokenId\r\n  );\r\n  using ECDSA for bytes32;\r\n  string public TOKEN_BASE_URL =\r\n    \"https://temp-cdn.coniun.io/resurrection_metadata/mainnet/\";\r\n  string public TOKEN_URL_SUFFIX = \".json\";\r\n  // 0 -> paused\r\n  // 1 -> whitelist\r\n  // 2 -> public\r\n  uint256 public MAX_SUPPLY = 4444;\r\n  uint256 public MINT_STAGE = 0;\r\n  uint256 public WALLET_TRANSFER_LIMIT = 2;\r\n  address private _signerAddress;\r\n  address private _vaultAddress;\r\n  address private _editor;\r\n\r\n  constructor(address signerAddress_, address vaultAddress_)\r\n    ERC721A(\"RESURRECTION\", \"RES\")\r\n  {\r\n    _signerAddress = signerAddress_;\r\n    _vaultAddress = vaultAddress_;\r\n  }\r\n\r\n  function getTransferCount(address wallet)\r\n    public\r\n    view\r\n    virtual\r\n    returns (uint256)\r\n  {\r\n    return _getAux(wallet);\r\n  }\r\n\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return TOKEN_BASE_URL;\r\n  }\r\n\r\n  function _suffix() internal view virtual returns (string memory) {\r\n    return TOKEN_URL_SUFFIX;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n    string memory baseURI = _baseURI();\r\n    string memory suffix = _suffix();\r\n    return\r\n      bytes(baseURI).length != 0\r\n        ? string(abi.encodePacked(baseURI, _toString(tokenId), suffix))\r\n        : \"\";\r\n  }\r\n\r\n  // admin functions\r\n  function setTokenBaseUrl(string memory _tokenBaseUrl) public editorOrOwner {\r\n    TOKEN_BASE_URL = _tokenBaseUrl;\r\n  }\r\n\r\n  function setTokenSuffix(string memory _tokenUrlSuffix) public editorOrOwner {\r\n    TOKEN_URL_SUFFIX = _tokenUrlSuffix;\r\n  }\r\n\r\n  function setAuxAdmin(address forAddress, uint64 value) public editorOrOwner {\r\n    _setAux(forAddress, value);\r\n  }\r\n\r\n  function adminMint(uint256 quantity, address toAddress)\r\n    external\r\n    editorOrOwner\r\n  {\r\n    require(totalSupply() + quantity <= MAX_SUPPLY, \"max_supply_reached\");\r\n    _safeMint(toAddress, quantity);\r\n  }\r\n\r\n  function setSignerAddress(address signerAddress) public editorOrOwner {\r\n    _signerAddress = signerAddress;\r\n  }\r\n\r\n  function setMintStage(uint256 _mintStage) public editorOrOwner {\r\n    MINT_STAGE = _mintStage;\r\n  }\r\n\r\n  function setWalletTransferLimit(uint256 _walletTransferLimit)\r\n    public\r\n    editorOrOwner\r\n  {\r\n    WALLET_TRANSFER_LIMIT = _walletTransferLimit;\r\n  }\r\n\r\n  function setEditor(address editor) public onlyOwner {\r\n    _editor = editor;\r\n  }\r\n\r\n  modifier editorOrOwner() {\r\n    require(\r\n      _editor == _msgSender() || owner() == _msgSender(),\r\n      \"Editor or Owner required\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  // signature releated functions\r\n  function getMessageHash(\r\n    uint256 _amount,\r\n    uint256 _tokenId,\r\n    uint256 _backendMintStage,\r\n    address _contractAddress\r\n  ) internal pure returns (bytes32) {\r\n    return\r\n      keccak256(\r\n        abi.encodePacked(_amount, _tokenId, _backendMintStage, _contractAddress)\r\n      );\r\n  }\r\n\r\n  function getEthSignedMessageHash(bytes32 _messageHash)\r\n    private\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    return\r\n      keccak256(\r\n        abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash)\r\n      );\r\n  }\r\n\r\n  function verifySignature(\r\n    uint256 _amount,\r\n    uint256 _tokenId,\r\n    uint256 _backendMintStage,\r\n    address _contractAddress,\r\n    bytes memory signature\r\n  ) private view returns (bool) {\r\n    bytes32 messageHash = getMessageHash(\r\n      _amount,\r\n      _tokenId,\r\n      _backendMintStage,\r\n      _contractAddress\r\n    );\r\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n    return recoverSigner(ethSignedMessageHash, signature) == _signerAddress;\r\n  }\r\n\r\n  function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n    private\r\n    pure\r\n    returns (address)\r\n  {\r\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n    return ecrecover(_ethSignedMessageHash, v, r, s);\r\n  }\r\n\r\n  function splitSignature(bytes memory sig)\r\n    private\r\n    pure\r\n    returns (\r\n      bytes32 r,\r\n      bytes32 s,\r\n      uint8 v\r\n    )\r\n  {\r\n    if (sig.length != 65) {\r\n      revert InvalidSignature(\"Signature length is not 65 bytes\");\r\n    }\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n  }\r\n\r\n  function dataToBytes(\r\n    uint256 tokenId,\r\n    uint256 amount,\r\n    uint256 backendMintStage,\r\n    address contractAddress,\r\n    bytes memory signature\r\n  ) public pure returns (bytes memory result) {\r\n    result = abi.encode(\r\n      tokenId,\r\n      amount,\r\n      backendMintStage,\r\n      contractAddress,\r\n      signature\r\n    );\r\n  }\r\n\r\n  function bytesToData(bytes memory source)\r\n    public\r\n    pure\r\n    returns (\r\n      uint256 tokenId,\r\n      uint256 amount,\r\n      uint256 backendMintStage,\r\n      address contractAddress,\r\n      bytes memory signature\r\n    )\r\n  {\r\n    return abi.decode(source, (uint256, uint256, uint256, address, bytes));\r\n  }\r\n\r\n  // # 'Mint by Transfer' function\r\n  // At here we are using IERC721 safeTransferFroom hook\r\n  // and utilize a mint action\r\n  // Our backend will create a payload for minting (how many, is eligible etc.)\r\n  function onERC721Received(\r\n    address,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external nonReentrant returns (bytes4) {\r\n    if (msg.sender == tx.origin) {\r\n      revert(\"only_from_contracts\");\r\n    }\r\n    // Verify ownership of the token\r\n    IERC721 proxy = IERC721(msg.sender);\r\n    require(proxy.ownerOf(tokenId) == address(this), \"nft_not_transferred\");\r\n    CallDataInfo memory callDataInfo;\r\n    (\r\n      callDataInfo._tokenId,\r\n      callDataInfo._amount,\r\n      callDataInfo._backendMintStage,\r\n      callDataInfo._contractAddress,\r\n      callDataInfo._signature\r\n    ) = bytesToData(data);\r\n    require(\r\n      totalSupply() + callDataInfo._amount <= MAX_SUPPLY,\r\n      \"max_supply_reached\"\r\n    );\r\n    if (\r\n      callDataInfo._tokenId != tokenId ||\r\n      callDataInfo._contractAddress != msg.sender\r\n    ) {\r\n      revert(\"calldata_mismatch\");\r\n    }\r\n    require(\r\n      callDataInfo._backendMintStage == MINT_STAGE,\r\n      \"mint_stage_mismatch\"\r\n    );\r\n    require(_getAux(from) < WALLET_TRANSFER_LIMIT, \"too_many_transfers\");\r\n    if (\r\n      verifySignature(\r\n        callDataInfo._amount,\r\n        callDataInfo._tokenId,\r\n        callDataInfo._backendMintStage,\r\n        callDataInfo._contractAddress,\r\n        callDataInfo._signature\r\n      ) != true\r\n    ) {\r\n      revert InvalidSignature(\"signature_failed\");\r\n    }\r\n    proxy.transferFrom(address(this), _vaultAddress, tokenId);\r\n    emit NftMinted(\r\n      callDataInfo._contractAddress, // contract\r\n      from, // minter\r\n      callDataInfo._amount, // amount\r\n      _nextTokenId(), // currentIdx\r\n      tokenId // usedTokenId\r\n    );\r\n    _mint(from, callDataInfo._amount);\r\n    _setAux(from, _getAux(from) + 1);\r\n    return IERC721Receiver.onERC721Received.selector;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintStartFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceTokenId\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_STAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_BASE_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_URL_SUFFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_TRANSFER_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"}],\"name\":\"bytesToData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backendMintStage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backendMintStage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"dataToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getTransferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"setAuxAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"}],\"name\":\"setEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintStage\",\"type\":\"uint256\"}],\"name\":\"setMintStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenBaseUrl\",\"type\":\"string\"}],\"name\":\"setTokenBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenUrlSuffix\",\"type\":\"string\"}],\"name\":\"setTokenSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletTransferLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ResurrectionByConiunV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000086a872197044fcd9a9185e1e5fef6e2cb8f5eaca0000000000000000000000007526dd325c6e2b8eca46cd04698a80403dd0225c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33d295fd7c5f4dc1a8999fecc428f60af084ca85c86444b499a3794c62ffd907"}]}