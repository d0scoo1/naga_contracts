{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// PPGGGGGGGGGGGGGGGGGGGGGPJ~^::..     ...:^^^...:^~:                   ... ..            ..::^~^::^^~!^:::~~~~!7?JJJYJ?YP5YYY?7!~~^^!777!..::^~7???!.             .^~!^..   ..:!J5PPPPGGGGGGP5GGGGGGGGGGGG //\\n// GGGGBBBBGGGGGGGGGGGGBBG55J?7!!~::::::^^^::.     ...  ........        ..........  .:.    ..:^^^::^^~~~^^~!77??J5Y!~^ .5GPGBP5YY?!!!7???:   ::.^?JY?7~..           .   .  ..:^~~~7YGGGGGGGGGGGGGGBBBBGBBBB //\\n// GGBBBBBBBBBBGGGGPPP5PGGG5P5YYJ?77!~~~~^^^^:...      .::^!77!!~~^^:....:::.::::::^^.      ..:^^^~~~!7?~^7?7J?7??^..:7P###BB#BBG5J??!!!!^.:!JYJ!?YYYJJ?7!~.               .:.::^^7YP5YPPPGBBGGGGBBBGGBBBGG //\\n// GBBBBBBBBBBBGGGP5YJ?77?J????JJJ???7!!!~^^^:^:..     .......:^~~!!!!!~^^^::^^:^!?5P?::.     :~!????JJJ?J?:....:^!7JG######BB#BBBGPPP55J?YG5JPPYJY555555?!.                   ...^^^!?YJ5GGGPPGBBGGGGG5JJP //\\n// GGGGBBBBBBBBGGPYYY5J!^^::.:.:~!!7??7~~~~^^::.      .:.    .::::^^~~!77!^.:::?Y5?7?J7?7:      .:::.:...^Y5YYY5PB###########B###BBBBBBBBB##GYBBGP5PGPJ!:....                      ..^..~5PPPP55GPPGGG5!75B //\\n// GGGGBBGPPPPPGGGPPPP5YJ~..:.  .:..:!!:..:^^:..    ....    .::^^^~~~~~~^:....~G#GY?YGGGPP57~~.        .^?P############B#########BB#B#B#####BPGPPPG5?~.  ^!7:                       .. :!JYJYPPPPPGGGPPPGBB //\\n// GGGBBGP5J^.JGBBBGGPP5YJ!.    .     ..  :!~^:.        ..:::::~!~~~!!!~::.  :5BBBBBBB#BB##BBB5!^^::^!JPB##BBBBBBB####BB########BB###########BGP55GGBG5Y7JJ7!~:                        ^~^!:^JY5PGP5?:JGGGP //\\n// GGGGGPP?: ^5GPGGGGGGPYJ7.   .     ..  .~!!~.    .!77?J?7!!7YPGGPJ!^:.   .~5BBBBBBBBBBBBBBBBBBBBGBBB#BBBBBBBBBBBBBBB#######BB#BBBB####BB##BBBB#BGBBBBGJ?7~7?!^.                      .^:. ..^!7YPP5YPGGPY //\\n// GGGPJ?^  ~GBGGPPGGGGGPY^  ..    ^~~~!7!!!~^.    :!JPPPGGGBBB##B#BPY?77!7PB#BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB####################################BBG5YJJ5PYJ?!.                     . ....^^:^^7JJ7?P5YP //\\n// GP5J!. .!GBBBGGGPGPP5J~.  .. .~JJJ??JJ?77~..:..^!?PGGBBBB########B###############B####BBBBBBBBBBBBBBBBBBBBBBB#####################################B5YYJY555YJ??~:               .     ....:^:^^^^^~?P5PG //\\n// 57:::.^JGBBBBBGGG5?!??~:::...:!YGGPP5YJJ?7^:::~7YG################################BBBB#####BBBBBBBBBBBBBBBBBBBBB######B###########################PYPGPYY55Y5PP5Y?!^.         .:^..        ....:~YPGGPGB //\\n// J?J5GPGBBBGGG5??J?7~^!JYYY?!~^~!YPB#BBBG57^^~5BB###################################BBGGP5YJ?!~!7??JY55PPGGBBBBBBBBB###B###########################BGBGBGYY5PPPPPPPYJ7~^:::::^~~~!7!^.       .!?YPPPPP5PG //\\n// BBBBBBBBBBBBBP7~!~^:::^?GGP5Y7!~~7PBB##B#BBB###################################BG5?7!^:..  ....     ...::^~!?Y5PGB#B#################################PPGGPY?J5PGPP5JJJYYJ7~^:~7JYJJ?:    .  :YPGP55Y5GPP //\\n// JB#BBBBBBBBBBBP5PPY?!::?GGPGP5J~^~~75#BBB###########################BB#####BG57^. .!^.        ...             ..^~?5GB################################GPP5GP5JJ5PP555YJ?????7~J5YJJ~.    ..  .~?JJ!^?GG5 //\\n// GBBBBBBBBBBBBBGPP5J55J5GGGGPGGP?!7^^!P##################################BY!~:           ::::. .   .                 .~?PB###############################GY5GPG5YJJ?77??YG##P7!7JJY?^.    ...    ..  :?PP\\n// BBBBBBBBGGGPYJ??JYPGBBBBBBPBBBG55J7!!!5###########B#######BB#########BGJ^        .    :!J?!~^^^^. ..   .        ..  .  .^?PB################################GG##BBGGPGB###57!?YYJY57:. ....   .~7:  ^J5G\\n// BBBBBBGP5P5YY5PY~~7YGBBBBBGBBBBBBBP?!~J#################B##########GJ~.      .. .     ^~~^::.:^^. .. .     .    ......:7!..^?P##B############################BB##BBB#####GY?JY555PP7:.        .:!!  :!Y5\\n// BBBBBGGGBGGGGBGP?^  7BBBBBBBBBBGGP5?!^Y######################B###P7.  . .:.          .     .... .   ..     .        .::^:..  .!5B####################################B#BGJ7?55PGPGG?:.               ^JY\\n// BBBBBB##BBBBBBG5Y?^ :5BBGBBBBBG5J5Y?!!5############GPGGPGPPB###P!. ...^^......    .:::.    ..              .....   . .::.       ^YB##################################BB#P?!!?5PGGGG5J?~               7Y\\n// GPGBB##BBBBBBGGGPJ?^.~G#B####BG5Y5Y??5B##########B55GGP5J5YYPG?.  .::?G5^.::^:^^:.::... .               ....:^^:..  ...^:.   .    ^5##################################BBPJJ!7PGGGGGGBG5J?~... :::^^.  !Y\\n// JYGG5PGBBBBBBG5J?7!::J#######BGGG5JYP###########B5BBPGGPGYP77JJY!^:::^!^:::::::^::......................::.....................~!~:.7B#################################BP5Y?J5PGGGGBGPGBG5?:.^!~:^??^ :7\\n// JPGGY555PGBGG5YJ?!~~?G#######B5JPGPB###########BPBBG55PGGY5JJ55GJJJJ7!^:^:^~~^^!~:^^^^:::^::::::::::::::::::::::::::~~::::::::!JJJ7^:~P################################BP55JJY5PPGBBBBBBGG?:^!!~!?5GPY!^\\n// BBBBGPJ5GGGGPPGJ~?JG#########B5JJG#############PBBBPGGJGG?G?5GGB5Y?7?J5J?!~~~!!~^~~^::^^^^:^^^^:::^^^^^^~~~~~^~^^:::!~:::^~~~~7!^^^::.:Y################################G7^~!7?55YJ7YJYGGJ^^!7!?YPGPPGBG\\n// BB#BGBBBGPBBBB5JP#############BPJP############GGBBGGGP5B5JGJGBB###BBGPG5Y555JJ?!~^^^^^^^^^^^^^^^^^~~~^^~~~~~~^^^^^::^^^^:::^^:^:::::::::5#################B##############BJ^:.:^:..:~:.75!^~?Y?JBBGPY5GG\\n// B##BB##BBBBB#BB################B5Y############YGBG5BGPBGJ55GBBB#######BBGP55PGGP5?!~~~^^^^^^^^^^^^^^^^^^^^^^^~~~^^^^^~!~^^~~~^:::::::::::P################B################B5?~^^~???7..~~^!?Y?~?PGPPPPG\\n// P############################BGPPP##########&PYBBG55PBPYP5PGB############BBBBBP55PGJ~!!~^^^^^^^^^^^^^^^^^^~!777!^^^^^^^^^^!!~^^:^^!JYJ7^:~B####################################BBB#BP7..^Y!^~!7?J?5GGBBG\\n// P########GJ5###############BGPPY5B##########&YPBBBBGBPYBGBBGB#################BB5Y557?YP5!^^^!~^^~~^~~~7?5PGPGGPJ!~~^^^^^~~^^:^!Y555JJY7::J######################################B##B~..:?5?!~~~7???JJ?J\\n// B########BJ7P#############BPYJYYP############GB#BBBGPPBGB######################BPGG55?7JJ~~7?7!!~~~!7~?5GG5?!!!777~^^^^^^^^:::^5P7!P57^!!:^B####################################BBBB#5:..:75P57~777Y555P\\n// #########B5!J#######BP5YGGP5??PB###############BBGPPBBGB####################BPPB#BBG55PJ?7!??JJ?7!!?5PBGP5J?7777!^^^^^::^::::::?57~!!7^^~::JB##################################BBGG###5^   ~J7~!5BGGPY?J\\n// B#######G?~~5#B#####PYYPGGP55G#################BBGBBB##&####################G?YP#BB#GY?7?YJ!!??!~!7JBBPYJ?777!!!7!!::^::::::...:~!~^:.....:~B####################################BGGGB#G?^.     .^7555??\\n// ######G7^^7PBGG##BP?!GBP5YYP######################B5Y5PGG###########################BY!!~^~~^^::^^^?PP55PPPGBBG5J?~:::^~^~~~^::....... ::^^~#################################GB###BGPPG##BPJ?7^~: :G#BBB\\n// ######P^~P##BGGBPPGY5B##BB########################&J:^^!Y##BBBB##################GYJ?7!~^^^:::::::^:7JPGPP5PGBBBG57~^:^~75P5Y!:..... ...~~:~B###########################B###GG#######BB#######JP5!!5BBBB\\n// ##BBBB57G#####B?~5#################################J^!5PB##GB#BGBBGG############P~!!!!~^:^^:::::::^::~~!?YPBBGPY??!:^:~^!?~^~~~?7:....:^~^:7B##################################GPPPB#########P~JBB~.?BBB\\n// BPJJJYPB######5~J##################################?:7G###55GBGBPJ55B###########P!~^^^^^::::^:::::^^^:^^^~!7?77!~^^:^::^~:.:::~7J!!??7JJ!^~?B#################################B5YYP##########B?~5GY5PPBB\\n// BGPGBB####BBBGJYG##################################J^^5##G??GG5?77PPB###B5GBB5YY777??777??^:::::^^^^~^~~^:.:::::::::^:..^^^^::^:!J?YY7~^^^~J###################################GGGPB#####BGPPJ~?BG5PG5GG\\n// ########GJ?YP5J7JB#################################P~~?5G5?77?!!7?5PB#BGP5GBGY7???J?77?7!?~^^^~~~^~?7::~7~^::::::::....:^^~^:.:^J5555YY!:^^5##################################BB#BBG#B55J?YPPY!Y#G5PP5GB\\n// ######BBG??PGPPPG###################################!^^~!~!~^~7?JJ5P5577?Y55PPY?!~~!~~^^!!~J57!7J5PBBPJJY5J~:^^^^::::^^^^^:^::^!5?7~^~~~^~?B######################################BBG~.!75PGGGPG#5!7755P\\n// B###################################################?^!~^!777?PG#55J!7!?7J5PPY?7!!?!~~!7~^7YJ7J5YP5Y55Y7!?5PJ~~~~^^^^^::^::::^~7YJ7^^^^:!7P######################################BB#7 :7!J5PGGGP7^:::::7\\n// ##########P5GPPBB###################################B~~~?JJPBGPJJJJ7?Y?77YYY7!77!77?J7!!^^^^^~77!!~^~!~^~^^?P57~~^:^~~~!~~~~::^^^!!~^^^!7Y##########################################J  ^?77PPPY: ..^~?Y5\\n// ####BBB###GYJ?JY?7YB#################################5^:::!PBPJJPJJJJ?7!!JY7!~~!!!!J!!~^^^^^~!!!~~!!77~~^^~^~7J?!:^^^^^~^^^^~~~^:.:^^^!7?B##########################################B7. .^7PP5^...!7J5?7\\n// BBBBBB##GP5YYJ5PP?Y###################################?^!!~7JJY55J7~~7!!7?77~^:^^~7^^^:::~^?BBBBGGBBBBBGG5?!^^~!^.^:...^!~^^!?~^::77!!??P############################################GY7^ .^7!.. ^PP?!75\\n// GBBBBBBBBG5JJJJP#BGB##################################B7:^.::^^^^^~^^~~^^^^^:^^^^~^:^^^~JG7?BPGGPP55PPGGBBBGGYJ7:......:^:::^^^^~!7~^7!?#########################################BP7~::PB7   .. .~YP!7YP\\n// GGGGGGGBBBGGPP5YP##P5G#################################B?~~~~!7~^~?J7~:^^^::::^~~~:7Y5G55Y?YPJ?JY5PPGGGGGGGBP!^^:.....:!^::~!~^:::::~~7B#######################################BB57~?J7J?.      .^?J?7YP\\n// BBBBBB#####BBBBPY5G?:!5GB################################P5PPP5JP57??J~::^~~:::^^^^^~7J??J?YPPP5PGGGGBBBB5JJJ!^::::.:^:.::~?7!:.:^~!7Y#########################################BB?:^:. ~~      ..^?5P55P\\n// GGBBBBBBBBBGPPGGPY5P7^^?B#################################P7~!!7?77?J557^:^:~!~^::^^~7!!!7YYJYJJY55GGPPPY7!7?~^^::.:~!~~~^~~^::!Y5YJP#########################################Y~!.  :^.7^      ~Y5PPGBGG\\n// GGGGBBBBBGGGGPPGG5J7!!!5B##################################G?!^~^^^7~~!J5?^:^^..:^:^!!7?!~~~~^^^^~~~~~!!^^^^.......!JYJ??J~.:^JY?YP###########################################Y .  :PGJY!     .^JGGGGGBB\\n// PGGGGGGBBBBGGPPPGPPY!75B#####################################P!:.::.^^^^7~:. .:^:...:.:::^~!!~~~?7~~::::... ....: 7?^^^7?!^^~??JPB############################################BJ7: ~BBPPP^     .?GGGGBBB\\n// PGBGGGGPPPPPGGGGGBBGGGBBBGPB##################################BY!:.....::...:..::~~:::^^:~?!~!7Y555YJ?~:.:^::.:.  ~!~!!7~::!JPP################################################B?^ .5GJ5G5: .  ~BBBBBBBB\\n// :~7?YYJ7J55PPP5Y555P5555Y?!?PB###################################G?^:...::..^~^^::!!~~~~!?7:^77JY?7!^^~!7^~~^^.:7Y7~!!7!^!?YG############################################BBBBB##G~  :JPPPG! ..:JGBBGBBBG\\n//     ...~JY5PPPPPPP5Y??J?7J5^.^!YB##################################B57^.:~^^!~^7^^:.:..^:!?7!:. .:..:~^:.....^:JPP555YY7JBB###################################B#######BP55PPPPGBB~   :555G~  :?J5GBBBP?!\\n//       ..^~!?JYYY??JJYJ??!~~~..^.^P#BBBBBBBBB##########################GY!:..~JJJJPY7!~~~~:  ..::~^^...^^..: :!JPPG5J5P5B#################################B##BB###B##P7:... . :JGGJ.  .?5PJ  .~!5GGGGP7:.\\n//   .       ...:?JJYYJJ?77!!~^..:!^~5B#BB#BB#########B#####################BPJ!!~^!~~~~~^^:^!. ~!~~^^~7JJ7!7JYPBBBBPPB##############################################B?:    :7Y?75GBY  ^JY?7^  .?!J5PP?: .:\\n//  ...          ^JYJJ?777~^~!~:..75!~JB###########B##GB########################BGPY?!!~!?YJ?7~?5YYJ?J5Y5G5PGBBB#B###################################################J      .???GPGP: !5YJ??J!. :. .!G! . .\\n//               .~7!77!!!~~77!^:^5BY!JB##################################################BGGGGBGGP55PGGB############################################################7    ....:JGGBP^?JJYYJ555!.   .7J^~!!?\\n//                .~^^!!!~!!77~:::!5BBB##############################################################################################################################P!.   .  Y#BBBB5YYP5YJ?!~::.  .. ^~!?Y\\n// ..             .~~:^~^~!7?J7!~^~?P###B#############################################################################################################################5     . ~BBBP5555?~..        ::~!~!??\\n//  .             .7???77!???JJY55555PBBPG########################################################################BB#################################################BB7    ...YBGY??7:   ..  :^:~J5Y?!?5P5\\n// ..             :^^~~7~.^7?JJYPGPJ?7JGGG##########################################################################################################################BG##?.   . !GJ??7^      .~JP5PGGGPPGGPP\\n// ^                  ..::^7?77Y5Y?!!!JB###############################BG##########################################################################################BB##BB57!^  7P?!!~^   ..^7YGGGPPGGPBBBGP\\n// ^                    .^7!^::!?7~^^JBBB###############################BBB##############################################################################GG########GG##B5BBP~  7G57~^^  ^?!~^^!7?JPPPGGGGGG\\n// :                     ...   .....!GBGB###################################BB#############################################################B###########BBBBBBBGGPGBG#GJ~:^^^^. 7PJ~^^~^:::       ^J5GGGPPPP\\n//                                 .JBBBBBB##BBB###########################B################B#########################B###############################BBBBBBBBBBPGBP?:   .?5~:JP7!~^~!~.    .:~~^^?PPGPPP55\\n// .                          .:.  .JBBBBBB###BB############################################B############################################################B#####BB#Y.     ?BY~YBP?7!~^.     .7JJJJ??55P5555Y\\n// .                           ~Y7:^YBBBBB####################################################################################################################GYJ5:     :GBGPPP5JJ7~^.    .^!!~^^~~J??Y555P\\n//                              !PYJPBBBB##GPGBGBB###5YGG##################################################################################################BGGBGPP?.   .J5JJ??777~~77:    .:. .:.^!????JGGG\\n//                              .?PGBBBB###BGGG5Y5GPPGB5~?B#########################################################################################B#####BG5GBBBBB^  :^~^....::^.^?J!    .:::^??~?55555GGG\\n//                      ..       ^??JPB##B57~~~~^::::^5BJ7PBB###################################################################################B###B####BG5JG#BGY?~  .:^....::^^:!!^:    .!Y?7??JPGGPGGGGG\\n//                   . ..       ^7!~?PBBB7....::......:!~::^^!7JG#B5G####################################################################BBB####BBBB####BGPYYBP!.     ......::.....        :?555YPGGPPPPGGG\\n//  ..               ..^!.      ^YYJY55PGJ!^::::~~~^:^:...   ...^5BY~JB####################################################BBBB#######B#BBBBBBB##BBBBBBBBBBBB!. .^:::^^......               ^JJ55GGPGGPGGGG\\n//                    ..^:       ^!!~!JPGGY?7~~7??7!!~^:..      .!BB?^P#BGPGBB######################################BB########BBBBB##BBBBBBBBG5JJ?7?J5GGGGGG!  .JYJ!^^:.                   .:^^~YGGGGGGGGGG\\n//                        .         ..^7J7~~^~!7777!?!^^^:.     .^!?J!J5J7?YJPB###########################B#####BBBBBBBBBBBBGGGGBBBBBBBBBBBGJ~.     .:~!7!7?.  .!!!^..                     ..:^!5GGGGGGGGGG\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n/**\\n * @title Token contract for the Nifty Mint Pass\\n * @author maikir\\n * @author lightninglu10\\n *\\n */\\ncontract MintPass is ERC1155Supply, Ownable {\\n  event PermanentURI(string _value, uint256 indexed _id);\\n  string public constant name = \\\"I'm New Here Mint Pass\\\";\\n  string public constant symbol = \\\"INHMP\\\";\\n\\n  using Address for address;\\n  uint256 public totalTokens = 0;\\n  mapping(uint256 => string) private tokenURIS;\\n  mapping(uint256 => uint256) private tokenPrices;\\n  mapping(uint256 => bool) private tokenIsFrozen;\\n  mapping(address => bool) private admins;\\n\\n  // Sale toggle\\n  bool public isSaleActive = false;\\n\\n  event Donation(address indexed _sender, uint256 _value);\\n\\n  constructor(uint256[] memory _tokenPrices, string[] memory _tokenURIs)\\n    ERC1155(\\\"\\\")\\n  {\\n    require(\\n      _tokenPrices.length == _tokenURIs.length,\\n      \\\"Token prices array size and token uris array size do not match\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _tokenURIs.length; i++) {\\n      addToken(_tokenURIs[i], _tokenPrices[i]);\\n    }\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(owner() == msg.sender || admins[msg.sender], \\\"No Access\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows to enable minting of sale and create sale period.\\n   */\\n  function flipSaleState() external onlyAdmin {\\n    isSaleActive = !isSaleActive;\\n  }\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata ids,\\n    uint256[] calldata amount\\n  ) external onlyAdmin {\\n    _mintBatch(to, ids, amount, \\\"\\\");\\n  }\\n\\n  function setAdmin(address _addr, bool _status) external onlyOwner {\\n    admins[_addr] = _status;\\n  }\\n\\n  function addToken(string memory _uri, uint256 _ethPrice) public onlyAdmin {\\n    totalTokens += 1;\\n    tokenURIS[totalTokens] = _uri;\\n    tokenPrices[totalTokens] = _ethPrice;\\n    tokenIsFrozen[totalTokens] = false;\\n  }\\n\\n  function updateTokenData(uint256 id, string memory _uri)\\n    external\\n    onlyAdmin\\n    tokenExists(id)\\n  {\\n    require(tokenIsFrozen[id] == false, \\\"This can no longer be updated\\\");\\n    tokenURIS[id] = _uri;\\n  }\\n\\n  function freezeTokenData(uint256 id) external onlyAdmin tokenExists(id) {\\n    tokenIsFrozen[id] = true;\\n    emit PermanentURI(tokenURIS[id], id);\\n  }\\n\\n  function mintTo(\\n    address account,\\n    uint256 id,\\n    uint256 qty\\n  ) external payable tokenExists(id) {\\n    require(isSaleActive, \\\"Sale is not active\\\");\\n\\n    require(\\n      msg.value >= (tokenPrices[id] * qty),\\n      \\\"Ether value sent is incorrect\\\"\\n    );\\n\\n    _mint(account, id, qty, \\\"\\\");\\n  }\\n\\n  function mintToMany(\\n    address[] calldata to,\\n    uint256 id,\\n    uint256 qty\\n  ) external payable tokenExists(id) {\\n    require(isSaleActive, \\\"Sale is not active\\\");\\n\\n    require(\\n      msg.value >= (tokenPrices[id] * qty * to.length),\\n      \\\"Ether value sent is incorrect\\\"\\n    );\\n\\n    for (uint256 i = 0; i < to.length; i++) {\\n      _mint(to[i], id, qty, \\\"\\\");\\n    }\\n  }\\n\\n  function donateFunds() external payable {\\n    require(isSaleActive, \\\"Sale is not active\\\");\\n\\n    emit Donation(msg.sender, msg.value);\\n  }\\n\\n  function uri(uint256 id)\\n    public\\n    view\\n    virtual\\n    override\\n    tokenExists(id)\\n    returns (string memory)\\n  {\\n    return tokenURIS[id];\\n  }\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\\n    return uri(tokenId);\\n  }\\n\\n  function withdraw() external onlyOwner {\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  modifier tokenExists(uint256 id) {\\n    require(id > 0 && id <= totalTokens, \\\"Token Unexists\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"freezeTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"mintToMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintPass", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000138a388a43c00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000003568747470733a2f2f6e6577686572652e73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f6d657461646174612f310000000000000000000000000000000000000000000000000000000000000000000000000000000000003568747470733a2f2f6e6577686572652e73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f6d657461646174612f320000000000000000000000000000000000000000000000000000000000000000000000000000000000003568747470733a2f2f6e6577686572652e73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f6d657461646174612f330000000000000000000000000000000000000000000000000000000000000000000000000000000000003568747470733a2f2f6e6577686572652e73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f6d657461646174612f340000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}