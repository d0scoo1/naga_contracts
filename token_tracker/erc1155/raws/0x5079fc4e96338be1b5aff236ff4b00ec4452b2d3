{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i \\u003c accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance \\u003e= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance \\u003e= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"OCMDesserts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n//   \\n//    ______     __   __     ______     __  __     ______     __     __   __    \\n//   /\\\\  __ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\   /\\\\  __ \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   \\n//   \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\____  \\\\ \\\\  __ \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\n//    \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\ \\n//     \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_/\\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/ \\n//                                                                              \\n//    __    __     ______     __   __     __  __     ______     __  __          \\n//   /\\\\ \\\"-./  \\\\   /\\\\  __ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\/ /    /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\         \\n//   \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\  _\\\"-.  \\\\ \\\\  __\\\\   \\\\ \\\\____ \\\\        \\n//    \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\/\\\\_____\\\\       \\n//     \\\\/_/  \\\\/_/   \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_____/       \\n//                                                                              \\n//   \\n// \\n// OnChainMonkey (OCM) Genesis was the first 100% On-Chain PFP collection in 1 transaction \\n// (contract: 0x960b7a6BCD451c9968473f7bbFd9Be826EFd549A)\\n// \\n// created by Metagood\\n//\\n// OCM Desserts is a 100% On-Chain collection in 1 transaction too! It is one that OCM Genesis \\n// can eat (burn) to create the new Karma collection.\\n//\\n// OCM Desserts, being On-Chain, will also live forever, just like OCM Genesis. However,\\n// the Desserts will need to be burned to create Karma, so the Dessert supply will be \\n// decreasing over time as people burn their Desserts.\\n//\\n//\\n//                            .\\u0027;cllllc;\\u0027.                               \\n//                       .;dOXMMMMMMMMMMMMXOl\\u0027                           \\n//                     ,xNMMMMMMMMMMMMMMMMMMMMNk,                        \\n//                   ;0MMMMMMMMMMMMMMMMMMMMMMMMMM0;                      \\n//                 .kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.                    \\n//                .KMMMMMMMMMMMMMMMMMMMXo;\\u0027,c0MMMMMMK.                   \\n//               ;NMMMMMMMMMMMMMMMMMMM0.      :NMMMMMK.                  \\n//              lWMMMMMMNd:,;ckWMMMMMMd        oMMMMMMd                  \\n//             xXWMMMMM0.      ;WMMMMMX.       .XMMMMMWlclll:,.          \\n//           .Ox;MMMMMMo        dMMMMMMd        cMMMMMMMMMMMMMW0o\\u0027       \\n//          .0d \\u0027MMMMMMK.       .NMMMMMN.        0MMMMMMMMMMMMMMMMO.     \\n//          Ox   XMMMMMMl        lMMMMMMx        ;MMMMMMMOxkXMMMMMMN\\u0027    \\n//         :N.   lMMMMMMN.       .KMMMMMW,        kMMMMMMc   :NMMMMM0    \\n//         lK   .cWMMMMMMd        :MMMMMMO        ,WMMMMMX.   cMMMMMM\\u0027   \\n//         ;N:lKWMMMMMMMMW\\u0027        0MMMMMM:        xMMMMMMl   xMMMMMN.   \\n//          KWMMMMMMMMMMMMk        ;WMMMMMK        .NMMMMMN,;OMMMMMMd    \\n//        .kMMMMMMXOWMMMMMW;        kMMMMMMl        oMMMMMMMMMMMMMMd     \\n//       ,KMMMMMNc  kMMMMMM0        \\u0027WMMMMMX.       .XMMMMMMMMMMMWl      \\n//      :NWMMMMMd   \\u0027WMMMMMMd        dMMMMMMd        cMMMMMMW0OWN:       \\n//     oK,OMMMMM0.   dMMMMMMW;       .NMMMMMW.        0MMMMMWoK0.        \\n//    d0. .XMMMMMXl\\u0027.;WMMMMMM0        lMMMMMMx        ;MMMMMMMk.         \\n//   ;W\\u0027   .KMMMMMMMMMMMMMMMMMc       .KMMMMMWc        kMMMMMMc          \\n//   oX      cKMMMMMMMMMMMMMMMK.       :MMMMMMN.       ,WMMMMMX.         \\n//   :W\\u0027       \\u0027lx0XNXNMMMMMMMMl        0MMMMMMk       \\u0027WMMMMMMo         \\n//    k0.            .OOKMMMMMMN.       ;MMMMMMMx.    ;KMMMMMMMN\\u0027        \\n//     dK;          .0x ;WMMMMMMd       \\u0027WMMMMMMMMX00NMMMMMMMMMMK.       \\n//      \\u0027x0d,.     \\u0027Kl   kMMMMMMWd.    ,KMMMMMMMMMMMMMMMMMMMMMMMMo       \\n//         \\u0027lddddooKO    \\u0027WMMMMMMMWKO0NMMMMMMMMMMMMMMMMMMMWX0xdNN:       \\n//                 ,N,    dMMMMMMMMMMMMMMMMMMMMMMMMWXOdl;\\u0027.  .OO.        \\n//                  x0    .NMMMMMMMMMMMMMMMMN0kdc;..        .0x          \\n//                  .Nc    lMMMMMMMMWX0xo:\\u0027.  .\\u0027;:     .\\u0027;ldKl           \\n//                   lX.   \\u0027WWXOxl;\\u0027.   ,:ok0NMMMMdoxxxxo:,.             \\n//                   .Ko  \\u0027Kk.         .0MMMMMMMMMN,.                    \\n//                    :N.;Kc    .\\u0027;ldxxxkWMMMMMMMMMl                     \\n//                     OXWkcoxxxxo:,.    xMMMMMMMMMX.                    \\n//                     \\u0027xo:,..           .NMMMMMMMMMo                    \\n//                                        oMMMMMMMMMN.                   \\n//                                        .XMMMMMMMMM;                   \\n//                                         ,XMMMMMMWd                    \\n//                                           ;oxkxl.                     \\n//                                                                       \\n//                                                                       \\n//\\n//\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos \\u003cbrecht@loopring.org\\u003e\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n                mstore(resultPtr, out)\\n                resultPtr := add(resultPtr, 4)\\n            }\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n            mstore(result, encodedLen)\\n        }\\n        return string(result);\\n    }\\n}\\n\\ncontract OCMDesserts is ERC1155, Ownable {\\n    string private svg1=\\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"999\\\" height=\\\"999\\\"\\u003e\\u003cpath fill=\\\"#fff61d\\\" d=\\\"M0 0h999v999H0z\\\"/\\u003e\\u003cg\\u003e\\u003cpath d=\\\"M0-45V0v-45\\\" id=\\\"a\\\"/\\u003e\\u003canimateMotion dur=\\\"5s\\\" repeatCount=\\\"indefinite\\\" keyPoints=\\\"0;.50;1;.50;0\\\" keyTimes=\\\"0;.25;.50;.75;1\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\"\\u003e\\u003cmpath href=\\\"#a\\\"/\\u003e\\u003c/animateMotion\\u003e\\u003cg fill=\\\"#ff8ff9\\\"\\u003e\\u003cpath d=\\\"m310 443-30 53 42-11-12-42z\\\"/\\u003e\\u003ccircle cx=\\\"346\\\" cy=\\\"532\\\" r=\\\"74\\\" transform=\\\"rotate(344 346 532)\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m429 667 257-71-30 54-257 72 30-55zm190-204 78-21-38 69-78 21 38-69z\\\" fill=\\\"#d0b\\\"/\\u003e\\u003cpath d=\\\"m399 722 30-55 39-11-103-369-31 54c-13 24-28 46-16 91l81 290z\\\" fill=\\\"#ff8ff9\\\"/\\u003e\\u003cpath fill=\\\"#af8200\\\" d=\\\"m506 675 70.172-20.122 28.115 98.049-70.172 20.122z\\\"/\\u003e\\u003ccircle cx=\\\"376\\\" cy=\\\"477\\\" transform=\\\"rotate(344 376 477)\\\" fill=\\\"#f0f\\\" r=\\\"74\\\"/\\u003e\\u003ccircle cx=\\\"568\\\" cy=\\\"765\\\" transform=\\\"rotate(344 568 765)\\\" fill=\\\"#af8200\\\" r=\\\"35\\\"/\\u003e\\u003cg fill=\\\"#f0f\\\"\\u003e\\u003ccircle cx=\\\"632\\\" cy=\\\"406\\\" transform=\\\"rotate(344 632 406)\\\" r=\\\"74\\\"/\\u003e\\u003ccircle cx=\\\"481\\\" cy=\\\"354\\\" r=\\\"133\\\" transform=\\\"rotate(344 481 354)\\\"/\\u003e\\u003c/g\\u003e\\u003cg fill=\\\"#d0b\\\"\\u003e\\u003ccircle transform=\\\"scale(1 -1) rotate(15.543 1935.567 1139.037)\\\" r=\\\"30\\\"/\\u003e\\u003ccircle transform=\\\"scale(1 -1) rotate(15.543 1803.447 2112.435)\\\" r=\\\"30\\\"/\\u003e\\u003c/g\\u003e\\u003cpath fill=\\\"#f0f\\\" d=\\\"m352 389 257.289-71.353 77.232 278.489-257.289 71.353z\\\"/\\u003e\\u003cpath fill=\\\"#ffe386\\\" d=\\\"m528 728 68.404-19.025 10.45 37.574-68.404 19.025z\\\"/\\u003e\\u003cpath fill=\\\"#dab754\\\" d=\\\"m511 666 68.25-19.57 17.916 62.482-68.25 19.57z\\\"/\\u003e\\u003ccircle cx=\\\"573\\\" cy=\\\"757\\\" transform=\\\"rotate(344 573 757)\\\" fill=\\\"#ffe386\\\" r=\\\"35\\\"/\\u003e\\u003cpath d=\\\"m511 666-5 9 7-2-2-7z\\\" fill=\\\"#af8200\\\"/\\u003e\\u003cg fill=\\\"#ff8ff9\\\"\\u003e\\u003crect x=\\\"390\\\" y=\\\"325\\\" width=\\\"59\\\" height=\\\"290\\\" rx=\\\"29\\\" transform=\\\"rotate(344 390 325)\\\"/\\u003e\\u003crect x=\\\"494\\\" y=\\\"296\\\" width=\\\"59\\\" height=\\\"290\\\" rx=\\\"29\\\" transform=\\\"rotate(344 494 296)\\\"/\\u003e\\u003c/g\\u003e\\u003cpath fill-rule=\\\"evenodd\\\" d=\\\"M365 604c-23 6-47 0-65-14l31-54c18 14 41 19 65 13l-31 55z\\\" fill=\\\"#d0b\\\"/\\u003e\\u003c/g\\u003e\\u003cellipse cx=\\\"521\\\" cy=\\\"895\\\" rx=\\\"73\\\" ry=\\\"11\\\" fill-opacity=\\\".2\\\"\\u003e\\u003canimate values=\\\"73;90;73\\\" keyTimes=\\\"0;.50;1\\\" dur=\\\"2.5s\\\" attributeName=\\\"rx\\\" fill=\\\"freeze\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/ellipse\\u003e\\u003c/svg\\u003e\\u0027;\\n    string private svg2=\\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"999\\\" height=\\\"999\\\"\\u003e\\u003cpath fill=\\\"#f0f\\\" d=\\\"M0 0h999v999H0z\\\"/\\u003e\\u003cg\\u003e\\u003cpath d=\\\"M0-70V0v-70z\\\" id=\\\"a\\\"/\\u003e\\u003canimateMotion dur=\\\"6s\\\" repeatCount=\\\"indefinite\\\" keyPoints=\\\"0;.50;1;.50;0\\\" keyTimes=\\\"0;.25;.50;.75;1\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\"\\u003e\\u003cmpath href=\\\"#a\\\"/\\u003e\\u003c/animateMotion\\u003e\\u003ccircle cx=\\\"496\\\" cy=\\\"526\\\" transform=\\\"rotate(351 496 526)\\\" fill=\\\"#db5\\\" r=\\\"245\\\"/\\u003e\\u003cmask id=\\\"b\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"256\\\" y=\\\"262\\\" width=\\\"491\\\" height=\\\"491\\\" mask-type=\\\"alpha\\\"\\u003e\\u003ccircle cx=\\\"501\\\" cy=\\\"508\\\" r=\\\"245\\\" transform=\\\"rotate(351 501 508)\\\" fill=\\\"#db5\\\"/\\u003e\\u003c/mask\\u003e\\u003cg mask=\\\"url(#b)\\\"\\u003e\\u003ccircle cx=\\\"499\\\" cy=\\\"496\\\" transform=\\\"rotate(351 499 496)\\\" fill=\\\"#fe8\\\" r=\\\"246\\\"/\\u003e\\u003c/g\\u003e\\u003cmask id=\\\"c\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"185\\\" y=\\\"439\\\" width=\\\"229\\\" height=\\\"230\\\" mask-type=\\\"alpha\\\"\\u003e\\u003ccircle cx=\\\"300\\\" cy=\\\"554\\\" transform=\\\"rotate(351 300 554)\\\" fill=\\\"#db5\\\" r=\\\"114\\\"/\\u003e\\u003c/mask\\u003e\\u003cg mask=\\\"url(#c)\\\"\\u003e\\u003ccircle cx=\\\"297\\\" cy=\\\"541\\\" transform=\\\"rotate(351 297 541)\\\" fill=\\\"#fe8\\\" r=\\\"113\\\"/\\u003e\\u003ccircle cx=\\\"301\\\" cy=\\\"527\\\" transform=\\\"rotate(351 301 527)\\\" fill=\\\"#5cf\\\" r=\\\"96\\\"/\\u003e\\u003c/g\\u003e\\u003cmask id=\\\"d\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"621\\\" y=\\\"371\\\" width=\\\"227\\\" height=\\\"226\\\" mask-type=\\\"alpha\\\"\\u003e\\u003ccircle cx=\\\"734\\\" cy=\\\"484\\\" transform=\\\"rotate(351 734 484)\\\" fill=\\\"#db5\\\" r=\\\"113\\\"/\\u003e\\u003c/mask\\u003e\\u003cg mask=\\\"url(#d)\\\"\\u003e\\u003ccircle cx=\\\"705\\\" cy=\\\"486\\\" transform=\\\"rotate(351 705 486)\\\" fill=\\\"#fe8\\\" r=\\\"111\\\"/\\u003e\\u003ccircle cx=\\\"711\\\" cy=\\\"467\\\" transform=\\\"rotate(351 711 467)\\\" fill=\\\"#5cf\\\" r=\\\"95\\\"/\\u003e\\u003c/g\\u003e\\u003cmask id=\\\"e\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"257\\\" y=\\\"267\\\" width=\\\"491\\\" height=\\\"491\\\" mask-type=\\\"alpha\\\"\\u003e\\u003cpath d=\\\"M744 473c21 134-69 259-203 281-133 21-259-69-281-203-21-133 69-259 203-281 134-21 259 70 281 203z\\\" fill=\\\"#db5\\\"/\\u003e\\u003c/mask\\u003e\\u003cg mask=\\\"url(#e)\\\"\\u003e\\u003ccircle cx=\\\"502\\\" cy=\\\"473\\\" transform=\\\"rotate(351 502 473)\\\" fill=\\\"#5cf\\\" r=\\\"221\\\"/\\u003e\\u003ccircle cx=\\\"504\\\" cy=\\\"455\\\" transform=\\\"rotate(351 504 455)\\\" fill=\\\"#67d9fd\\\" r=\\\"203\\\"/\\u003e\\u003c/g\\u003e\\u003cg fill=\\\"#67d9fd\\\"\\u003e\\u003ccircle cx=\\\"306\\\" cy=\\\"509\\\" transform=\\\"rotate(351 306 509)\\\" r=\\\"71\\\"/\\u003e\\u003ccircle cx=\\\"711\\\" cy=\\\"443\\\" transform=\\\"rotate(351 711 443)\\\" r=\\\"71\\\"/\\u003e\\u003c/g\\u003e\\u003ccircle cx=\\\"500\\\" cy=\\\"466\\\" transform=\\\"rotate(351 500 466)\\\" fill=\\\"#fe8\\\" r=\\\"50\\\"/\\u003e\\u003cmask id=\\\"f\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"450\\\" y=\\\"415\\\" width=\\\"101\\\" height=\\\"102\\\" mask-type=\\\"alpha\\\"\\u003e\\u003ccircle cx=\\\"500\\\" cy=\\\"466\\\" r=\\\"50\\\" transform=\\\"rotate(351 500 466)\\\" fill=\\\"#fe8\\\"/\\u003e\\u003c/mask\\u003e\\u003cg mask=\\\"url(#f)\\\"\\u003e\\u003ccircle cx=\\\"483\\\" cy=\\\"504\\\" transform=\\\"rotate(351 483 504)\\\" fill=\\\"#db5\\\" r=\\\"60\\\"/\\u003e\\u003ccircle cx=\\\"479\\\" cy=\\\"510\\\" transform=\\\"rotate(351 479 510)\\\" fill=\\\"#f0f\\\" r=\\\"43\\\"/\\u003e\\u003c/g\\u003e\\u003cpath fill-rule=\\\"evenodd\\\" d=\\\"M540 498c11-11 16-27 13-43-4-28-31-48-59-43-24 4-41 23-43 45 6-16 20-28 37-31 27-4 53 14 57 41 2 11 0 22-5 31z\\\" fill=\\\"#5cf\\\"/\\u003e\\u003cpath d=\\\"m369 367 33.871 2.963-.61 6.973-33.871-2.963zm168-51-32.54 9.856-2.029-6.699 32.54-9.856z\\\" fill=\\\"#f0f\\\"/\\u003e\\u003cpath d=\\\"m431 319 27.507 19.985-4.114 5.663-27.507-19.985zm79 51 31.016-13.928 2.867 6.386-31.016 13.928zm-96 137-11.721-31.916 6.571-2.413 11.721 31.916z\\\" fill=\\\"#fe0\\\"/\\u003e\\u003cpath d=\\\"m458 393-29 17-4-7 29-17 4 7z\\\" fill=\\\"#75cc0a\\\"/\\u003e\\u003cpath d=\\\"m650 467 13.928 31.017-6.386 2.867-13.928-31.017zm-48 116 8.8-32.841 6.761 1.812-8.8 32.841zm1-177-33.129-7.648 1.575-6.821 33.129 7.648z\\\" fill=\\\"#f0f\\\"/\\u003e\\u003cpath d=\\\"m744 434-27.57-19.897 4.096-5.676 27.57 19.897zm-141 14 27.889-19.448 4.004 5.742-27.889 19.448z\\\" fill=\\\"#fe0\\\"/\\u003e\\u003cpath d=\\\"m579 500 32 8-1 7-33-8 2-7zm20-157 24 24-5 5-24-24 5-5zm97 111 31-14 3 7-31 14-3-7z\\\" fill=\\\"#75cc0a\\\"/\\u003e\\u003cpath d=\\\"m502 562-33.871-2.963.61-6.973 33.871 2.963zM368 438l-17 29.445-6.062-3.5 17-29.445z\\\" fill=\\\"#f0f\\\"/\\u003e\\u003cpath d=\\\"m423 596 2.963-33.871 6.973.61-2.963 33.871zm-124-60-27.923-19.399 3.994-5.749 27.923 19.399zm271 16-21.307 26.495-5.455-4.387 21.307-26.495z\\\" fill=\\\"#fe0\\\"/\\u003e\\u003cpath d=\\\"m385 550-17-29 7-4 17 29-7 4zm-88-46 31-14 3 7-31 13-3-6zm226 116-29-17 3-7 30 17-4 7z\\\" fill=\\\"#75cc0a\\\"/\\u003e\\u003cg fill=\\\"#fff\\\"\\u003e\\u003cpath d=\\\"M582 298c13 1 42 42 42 42-11-17-27-43-26-53 2-10 13-23 18-26 0 0-19 12-29 9-11-2-39-40-39-40 9 13 26 43 23 52s-16 22-23 28c0 0 22-13 34-12z\\\"\\u003e\\u003canimate attributeName=\\\"opacity\\\" values=\\\"1;0;1\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/path\\u003e\\u003cpath d=\\\"M236 510c13 2 41 41 41 41-11-16-26-41-25-51 2-10 13-22 17-25 0 0-18 11-28 8-10-2-38-39-38-39 9 13 25 43 22 51-2 9-15 21-22 27 0 0 21-13 33-12z\\\"\\u003e\\u003canimate attributeName=\\\"opacity\\\" values=\\\"0;1;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/path\\u003e\\u003c/g\\u003e\\u003c/g\\u003e\\u003cellipse cx=\\\"500\\\" cy=\\\"880\\\" rx=\\\"149\\\" ry=\\\"17\\\" fill-opacity=\\\".2\\\"\\u003e\\u003canimate values=\\\"149;190;149\\\" keyTimes=\\\"0;.50;1\\\" dur=\\\"3s\\\" attributeName=\\\"rx\\\" fill=\\\"freeze\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/ellipse\\u003e\\u003c/svg\\u003e\\u0027;\\n    string private svg3=\\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"999\\\" height=\\\"999\\\"\\u003e\\u003cstyle\\u003e.B{fill:#fc0}.C{fill:#fff}.D{fill-rule:evenodd}\\u003c/style\\u003e\\u003cpath fill=\\\"#0a4\\\" d=\\\"M0 0h999v999H0z\\\"/\\u003e\\u003cpath d=\\\"M293 0h402l224 919H79L293 0Z\\\" fill=\\\"#7c0\\\"/\\u003e\\u003cellipse cx=\\\"499\\\" cy=\\\"920\\\" rx=\\\"420\\\" ry=\\\"44\\\" fill=\\\"#bf4\\\"/\\u003e\\u003cg\\u003e\\u003cpath d=\\\"M0-30V0v-30z\\\" id=\\\"a\\\"/\\u003e\\u003canimateMotion dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\" keyPoints=\\\"0;.50;1;.50;0\\\" keyTimes=\\\"0;.25;.50;.75;1\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\"\\u003e\\u003cmpath href=\\\"#a\\\"/\\u003e\\u003c/animateMotion\\u003e\\u003cg fill=\\\"#083\\\"\\u003e\\u003cpath d=\\\"m350 225 42 14 10-20-11-18-45-8-13 14-7 28 20-11 2-9 2 10zm94-95 3 60 30 3 17-24-12-59-25-10-38 5 23 19 14-1-12 7z\\\"/\\u003e\\u003cpath d=\\\"m495 211 8 35 18-1 8-16-14-34-15-3-22 7 16 9 7-2-6 5zm-100 20-21 19 36-4 32-37-20-33-29-12-32 12 20 17 5 16c4 9 9 22 9 22z\\\"/\\u003e\\u003cpath d=\\\"m522 178-13 20-27-8-7-26 19-47 29 1 23 21-23 8-7 21 6 10zm31 71-17 22-30-11-6-31 26-53 33 3 26 27-28 7-11 24 7 12z\\\"/\\u003e\\u003cpath d=\\\"m550 147 32 29-29-2-3-12-1 13-26 7-8-13 5 15-17 20-7-3 13-43 41-11zm11 68 48 29-33 4-9-15 5 17-27 13-14-14 11 17-10 29-9-2-3-56 41-22zm-201 16-32 44 36-10v-17l4 17 34 2 7-18-2 20 26 22 8-6-27-51-54-3zm44-113-57 32 41 7 10-18-5 20 32 17 17-15-14 19 14 35 11-2 2-67-51-28zm75 91-32 14 23 7 6-10-3 11 19 12 9-8-7 10 8 21 6-1 1-37-30-19z\\\"/\\u003e\\u003c/g\\u003e\\u003cg class=\\\"B D\\\"\\u003e\\u003cpath d=\\\"M365 214c43 5 83-22 94-65 1-4 2-7 3-11 11 15 15 34 10 53-8 33-42 53-74 44-14-3-25-11-33-21z\\\"/\\u003e\\u003cpath d=\\\"M378 254c49-8 86-52 85-103 0-5-1-9-1-13 17 13 28 33 28 56 1 39-30 72-69 73-16 0-31-5-43-13z\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"M472 217c11-26-2-58-10-75 6 23-7 56-19 71-8 9-16 26-60 39 41 11 76-6 89-35zm-27-18c7-9 15-28 15-53-6 30-21 42-33 52-9 5-20 15-61 16 35 12 65 2 79-15z\\\" fill=\\\"#ff2\\\"/\\u003e\\u003cg class=\\\"D\\\"\\u003e\\u003cpath d=\\\"M451 280c38-32 46-89 18-132-2-3-4-6-7-10 21 2 41 13 53 32 22 33 13 77-20 99-14 9-29 12-44 11z\\\" class=\\\"B\\\"/\\u003e\\u003cpath d=\\\"M459 260c28-23 34-69 12-109-2-5-5-9-7-12 19 4 37 20 45 43 12 33 1 68-25 77-8 3-17 3-25 1z\\\" fill=\\\"#ff2\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m586 177 14-1-12 86-14-2 12-83z\\\" fill=\\\"#b80\\\"/\\u003e\\u003cg fill=\\\"#0a3\\\"\\u003e\\u003cpath d=\\\"m570 175 30-3-44 37 14-34z\\\"/\\u003e\\u003cpath d=\\\"m617 175-29-3 33 37-4-34z\\\"/\\u003e\\u003cpath d=\\\"m587 154 9 21-52-7 43-14z\\\"/\\u003e\\u003cpath d=\\\"m604 154-15 21 53-8-38-13z\\\"/\\u003e\\u003c/g\\u003e\\u003cpath fill=\\\"#b80\\\" d=\\\"m336 203-11.6 3.071 27.01 69.968 11.6-3.071z\\\"/\\u003e\\u003cg fill=\\\"#0a3\\\"\\u003e\\u003cpath d=\\\"m349 199-25 4 44 22-19-26z\\\"/\\u003e\\u003cpath d=\\\"m310 209 24-9-20 39-4-30z\\\"/\\u003e\\u003cpath d=\\\"m331 184-3 21 41-19-38-2z\\\"/\\u003e\\u003cpath d=\\\"m317 188 17 15-46 5 29-20z\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"M566.19 244.48h-27.48v10.99h27.48v-10.99z\\\" class=\\\"C\\\"/\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cuse xlink:href=\\\"#B\\\"/\\u003e\\u003cuse xlink:href=\\\"#B\\\" x=\\\"10.99\\\"/\\u003e\\u003c/g\\u003e\\u003cuse xlink:href=\\\"#C\\\" class=\\\"C\\\"/\\u003e\\u003cpath d=\\\"M538.73 232.32a1.89 1.89 0 1 0 0-3.79 1.89 1.89 0 1 0 0 3.79z\\\" class=\\\"B\\\"/\\u003e\\u003cuse xlink:href=\\\"#C\\\" x=\\\"27.48\\\" class=\\\"C\\\"/\\u003e\\u003cpath d=\\\"M566.17 232.32a1.895 1.895 0 0 0 0-3.79 1.89 1.89 0 1 0 0 3.79z\\\" class=\\\"B\\\"/\\u003e\\u003cpath d=\\\"M552.45 244.48a13.74 13.74 0 0 0 0-27.48 13.74 13.74 0 1 0 0 27.48z\\\" class=\\\"C\\\"/\\u003e\\u003cpath d=\\\"M552.45 241.78a10.88 10.88 0 1 0 0-21.76 10.88 10.88 0 1 0 0 21.76z\\\" class=\\\"B\\\"/\\u003e\\u003cg class=\\\"C\\\"\\u003e\\u003cuse xlink:href=\\\"#D\\\"/\\u003e\\u003cuse xlink:href=\\\"#D\\\" x=\\\"9.46\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"M547.32 228.68a1.965 1.965 0 1 0-1.97-1.97 1.97 1.97 0 0 0 1.97 1.97zm9.39-.14a1.895 1.895 0 1 0-1.9-1.9 1.9 1.9 0 0 0 1.9 1.9z\\\" class=\\\"B\\\"/\\u003e\\u003cuse xlink:href=\\\"#E\\\"/\\u003e\\u003cuse xlink:href=\\\"#E\\\" x=\\\"9.46\\\"/\\u003e\\u003cpath d=\\\"M560.49 223.8h-16.08v2.84h16.08v-2.84z\\\" class=\\\"B\\\"/\\u003e\\u003cpath d=\\\"M552.45 239.77c4.12 0 7.46-1.41 7.46-3.14 0-1.74-3.34-3.14-7.46-3.14s-7.46 1.4-7.46 3.14c0 1.73 3.34 3.14 7.46 3.14z\\\" class=\\\"C\\\"/\\u003e\\u003cg fill=\\\"#caa000\\\"\\u003e\\u003cuse xlink:href=\\\"#F\\\"/\\u003e\\u003cuse xlink:href=\\\"#F\\\" x=\\\"-3.14\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"M557.65 237.05h-10.4v.95h10.4v-.95z\\\" class=\\\"B\\\"/\\u003e\\u003cg class=\\\"C\\\"\\u003e\\u003cpath d=\\\"m322 290 276.942-24.229 9.936 113.566-276.942 24.229z\\\"/\\u003e\\u003cellipse cx=\\\"460\\\" cy=\\\"278\\\" rx=\\\"139\\\" ry=\\\"21\\\" transform=\\\"rotate(355 460 278)\\\"/\\u003e\\u003c/g\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cellipse cx=\\\"468\\\" cy=\\\"366\\\" rx=\\\"139\\\" ry=\\\"21\\\" transform=\\\"rotate(355 468 366)\\\"/\\u003e\\u003cpath d=\\\"m330 378 276.942-24.229 4.794 54.791-276.942 24.229z\\\"/\\u003e\\u003ccircle cx=\\\"237\\\" cy=\\\"743\\\" transform=\\\"rotate(355 237 743)\\\" r=\\\"73\\\"/\\u003e\\u003ccircle cx=\\\"763\\\" cy=\\\"696\\\" transform=\\\"rotate(175 763 696)\\\" r=\\\"73\\\"/\\u003e\\u003c/g\\u003e\\u003cg fill=\\\"#da0\\\"\\u003e\\u003ccircle transform=\\\"scale(1 -1) rotate(5.064 8519.427 2308.205)\\\" r=\\\"29\\\"/\\u003e\\u003ccircle transform=\\\"matrix(-.9961 .08827 .08827 .9961 763 696)\\\" r=\\\"29\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m228.481 640.757 525.991-46.018 16.908 193.262-525.991 46.018z\\\" class=\\\"C\\\"/\\u003e\\u003cpath d=\\\"M202 679c-24 13-39 40-37 70 3 29 23 53 49 62l-12-132zm597 80c25-14 40-40 38-70-3-29-22-53-49-63l11 133z\\\" fill=\\\"#ff2\\\" class=\\\"D\\\"/\\u003e\\u003cg class=\\\"C\\\"\\u003e\\u003cpath d=\\\"m275 448 399.474-34.949 14.206 162.38-399.474 34.949z\\\"/\\u003e\\u003cellipse cx=\\\"475\\\" cy=\\\"430\\\" rx=\\\"200\\\" ry=\\\"31\\\" transform=\\\"rotate(355 475 430)\\\"/\\u003e\\u003c/g\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cellipse cx=\\\"484\\\" cy=\\\"540\\\" rx=\\\"200\\\" ry=\\\"29\\\" transform=\\\"rotate(355 484 540)\\\"/\\u003e\\u003cpath d=\\\"m285 559 399.474-34.949 5.055 57.779-399.474 34.949z\\\"/\\u003e\\u003c/g\\u003e\\u003cellipse cx=\\\"491\\\" cy=\\\"616\\\" rx=\\\"264\\\" ry=\\\"41\\\" transform=\\\"rotate(355 491 616)\\\" class=\\\"C\\\"/\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cellipse cx=\\\"503\\\" cy=\\\"745\\\" rx=\\\"264\\\" ry=\\\"43\\\" transform=\\\"rotate(355 503 745)\\\"/\\u003e\\u003cpath d=\\\"m240 771 525.991-46.018 5.317 60.768-525.991 46.018z\\\"/\\u003e\\u003c/g\\u003e\\u003cellipse cx=\\\"509\\\" cy=\\\"811\\\" rx=\\\"264\\\" ry=\\\"41\\\" transform=\\\"rotate(355 509 811)\\\" fill=\\\"#da0\\\"/\\u003e\\u003cpath d=\\\"m434 134 18-19 15 24-7 7-26-12z\\\" class=\\\"B\\\"/\\u003e\\u003cpath d=\\\"m233 689 32-76m-32 76 32-76m13 129 71-148m-71 148 71-148m19 126 66-139m-66 139 66-139m24 126 64-135m-64 135 64-135m32 127 59-130m-59 130 59-130m31 128 60-123m-60 123 60-123m24 130 29-65m-29 65 29-65m4.616 44.32-94.797-113.655m94.797 113.655-94.797-113.655M688 700 577 570m111 130L577 570m18 128L488 576m107 122L488 576m11 126L395 586m104 116L395 586m14 128L307 601m102 113L307 601m12 130-88-98m88 98-88-98\\\" stroke=\\\"#da0\\\"/\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003ccircle cx=\\\"384\\\" cy=\\\"685\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"419\\\" cy=\\\"613\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"510\\\" cy=\\\"601\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"601\\\" cy=\\\"598\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"692\\\" cy=\\\"601\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"474\\\" cy=\\\"673\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"568\\\" cy=\\\"666\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"660\\\" cy=\\\"664\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"746\\\" cy=\\\"666\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"297\\\" cy=\\\"705\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"333\\\" cy=\\\"629\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"248\\\" cy=\\\"654\\\" r=\\\"6\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m327 348 36-77m-36 77 36-77m34 82 41-94m-41 94 41-94m49 83 33-88m-33 88 33-88m48 88 28-79m-28 79 28-79m-219 95-56-70m56 70-56-70m133.595 58.294-59.323-81.742m59.323 81.742-59.323-81.742M536 341l-56-86m56 86-56-86m124 75-50-76m50 76-50-76\\\" stroke=\\\"#da0\\\"/\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003ccircle cx=\\\"343\\\" cy=\\\"314\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"421\\\" cy=\\\"300\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"505\\\" cy=\\\"293\\\" r=\\\"6\\\"/\\u003e\\u003ccircle cx=\\\"584\\\" cy=\\\"298\\\" r=\\\"6\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m336 533 51-8 10 67-53 7-8-66zm-31 200 51-10 9 65-52 11-8-66zm75-377 51-8 8 56-53 7-6-55z\\\" fill-opacity=\\\".3\\\" class=\\\"C\\\"/\\u003e\\u003cpath d=\\\"m481 705 45-5 8 67-47 4-6-66z\\\" fill=\\\"#ff2\\\"/\\u003e\\u003cpath d=\\\"m487 764 46-4 1 7-47 4v-7z\\\" fill=\\\"#da0\\\"/\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cpath d=\\\"m624 677-48 2 10 57 49-2-11-57z\\\"/\\u003e\\u003cellipse cx=\\\"596\\\" cy=\\\"684\\\" rx=\\\"29\\\" ry=\\\"14\\\" transform=\\\"rotate(352 596 684)\\\"/\\u003e\\u003c/g\\u003e\\u003cg fill=\\\"#da0\\\"\\u003e\\u003cellipse cx=\\\"608\\\" cy=\\\"740\\\" rx=\\\"28\\\" ry=\\\"10\\\" transform=\\\"rotate(345 608 740)\\\"/\\u003e\\u003cpath d=\\\"m605 752-79 14 60-28 19 14z\\\"/\\u003e\\u003c/g\\u003e\\u003cg class=\\\"B\\\"\\u003e\\u003cpath d=\\\"m576 676-49 24 7 62 53-26-11-60zm-193 28 40-11 3 61-40 9-3-59z\\\"/\\u003e\\u003cellipse rx=\\\"28\\\" ry=\\\"11\\\" transform=\\\"matrix(-.99462 .1036 .10703 .99426 412 702)\\\"/\\u003e\\u003c/g\\u003e\\u003cg fill=\\\"#da0\\\"\\u003e\\u003cellipse rx=\\\"28\\\" ry=\\\"10\\\" transform=\\\"matrix(-.99987 -.01602 -.0042 .99999 414 763)\\\"/\\u003e\\u003cpath d=\\\"m420 773 83-6-79-14-4 20z\\\"/\\u003e\\u003c/g\\u003e\\u003cpath d=\\\"m423 691 59 14 6 60-63-12-2-62z\\\" class=\\\"B\\\"/\\u003e\\u003cg\\u003e\\u003canimate attributeName=\\\"opacity\\\" values=\\\"0;1;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003cg class=\\\"C\\\"\\u003e\\u003cpath d=\\\"M436 137c4 0 13 13 13 13-3-5-8-13-8-17 1-3 4-7 6-8 0 0-6 4-9 3-4-1-13-13-13-13 3 4 8 14 7 17 0 3-5 7-7 9 0 0 7-5 11-4zM283 561c7 1 23 23 23 23-6-9-15-23-14-29s7-12 10-14c0 0-11 6-17 5-5-2-21-23-21-23 5 8 14 25 13 30-2 5-9 12-13 15 0 0 12-7 19-7zm15 247c7 1 23 23 23 23-6-8-15-23-14-29s7-13 10-14c0 0-11 6-16 5-6-2-22-23-22-23 5 7 14 25 13 30-2 5-9 12-13 15 0 0 12-7 19-7zm493-175c5 0 16 16 16 16-4-6-10-17-10-21 1-4 5-9 7-10 0 0-7 5-11 4s-16-17-16-17c4 6 10 18 9 21-1 4-6 9-9 12 0 0 9-6 14-5z\\\"/\\u003e\\u003cuse xlink:href=\\\"#A\\\"/\\u003e\\u003c/g\\u003e\\u003c/g\\u003e\\u003cg\\u003e\\u003canimate attributeName=\\\"opacity\\\" values=\\\"1;0;1\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003cg class=\\\"C\\\"\\u003e\\u003cpath d=\\\"M605 732c5 1 18 18 18 18-5-7-11-18-11-22 1-5 6-10 8-11 0 0-9 4-13 3s-17-17-17-17c4 6 11 19 10 23-1 3-7 9-10 12 0 0 10-6 15-6zm80-204c5 0 17 18 17 18-4-7-11-18-10-23 0-4 5-10 7-11 0 0-8 5-12 4-5-1-17-17-17-17 4 5 11 18 10 22-2 4-7 10-10 12 0 0 9-6 15-5zM167 729c6 0 20 20 20 20-6-8-13-21-13-26 1-4 7-10 9-12 0 0-9 6-14 4-5-1-19-19-19-19 5 6 13 21 11 25-1 5-7 11-11 14 0 0 11-7 17-6z\\\"/\\u003e\\u003cuse xlink:href=\\\"#A\\\" x=\\\"-224\\\" y=\\\"-135\\\"/\\u003e\\u003cpath d=\\\"M502 180c8 0 26 25 26 25-7-10-17-26-16-32 1-7 8-14 11-16 0 0-12 7-18 5-7-1-25-25-25-25 7 8 17 27 15 33-2 5-10 13-15 17 0 0 14-8 22-7z\\\"/\\u003e\\u003c/g\\u003e\\u003c/g\\u003e\\u003c/g\\u003e\\u003cellipse cx=\\\"499\\\" cy=\\\"922\\\" rx=\\\"215\\\" ry=\\\"24\\\" fill=\\\"#0a4\\\"\\u003e\\u003canimate values=\\\"230;250;230\\\" keyTimes=\\\"0;.50;1\\\" dur=\\\"4s\\\" attributeName=\\\"rx\\\" fill=\\\"freeze\\\" keySplines=\\\"0.5 0 0.5 1; 0.5 0 0.5 1\\\" calcMode=\\\"spline\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/ellipse\\u003e\\u003cdefs\\u003e\\u003cpath id=\\\"A\\\" d=\\\"M605 358c5 0 17 17 17 17-4-7-11-18-10-22 0-4 5-10 7-11 0 0-8 5-12 4-5-1-17-17-17-17 4 5 11 18 10 22s-7 9-10 12c0 0 9-6 15-5z\\\"/\\u003e\\u003cpath id=\\\"B\\\" d=\\\"M547.06 250.81c.28 0 .5-.22.5-.5a.5.5 0 0 0-.5-.5.51.51 0 0 0-.5.5.5.5 0 0 0 .5.5z\\\"/\\u003e\\u003cpath id=\\\"C\\\" d=\\\"M538.71 235.06c2.6 0 4.71-2.11 4.71-4.71 0-2.61-2.11-4.71-4.71-4.71s-4.71 2.1-4.71 4.71c0 2.6 2.11 4.71 4.71 4.71z\\\"/\\u003e\\u003cpath id=\\\"D\\\" d=\\\"M547.72 230.43c1.83 0 3.31-1.27 3.31-2.84s-1.48-2.84-3.31-2.84-3.31 1.27-3.31 2.84 1.48 2.84 3.31 2.84z\\\"/\\u003e\\u003cpath id=\\\"E\\\" d=\\\"M547.25 227.59a.94.94 0 1 0 0-1.89.94.94 0 0 0-.95.94c0 .53.42.95.95.95z\\\"/\\u003e\\u003cpath id=\\\"F\\\" d=\\\"M554.02 235.06c.22 0 .39-.18.39-.4a.39.39 0 0 0-.78 0c0 .22.17.4.39.4z\\\"/\\u003e\\u003c/defs\\u003e\\u003c/svg\\u003e\\u0027;\\n\\n    address public eatingContract; // allowed to eat/burn Desserts\\n    address public randomizerContract;\\n    uint256 private dessertCount = 0; // maximum of 10,000 Desserts can be minted\\n\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    // owner will air drop Desserts via this mint function, designed to minimize gas used for multiple mints\\n    // if ads.length \\u003e quantity.length, transaction will fail and no mints will go through\\n    // if ads.length \\u003c quantity.length, the extra values in quantity will be ignored\\n    function ownerMint(address[] calldata ads, uint256[] calldata quantity, uint256 typeId) external onlyOwner {\\n        require(typeId\\u003e0 \\u0026\\u0026 typeId\\u003c4, \\\"type err\\\");\\n        for (uint256 i=0; i\\u003cads.length; i++) {\\n          require(dessertCount+quantity[i] \\u003c 10001, \\\"10k\\\");\\n          _mint(ads[i], typeId, quantity[i], \\\"\\\");\\n          dessertCount += quantity[i];\\n        }\\n    }\\n\\n    // owner will air drop Desserts via this mint function, designed to minimize gas used for single mints\\n    function ownerMint1(address[] calldata ads, uint256 typeId) external onlyOwner {\\n        require(typeId\\u003e0 \\u0026\\u0026 typeId\\u003c4, \\\"type err\\\");\\n        require(dessertCount+ads.length \\u003c 10001, \\\"10k\\\");\\n        for (uint256 i=0; i\\u003cads.length; i++) {\\n          _mint(ads[i], typeId, 1, \\\"\\\");\\n        }\\n        dessertCount += ads.length;\\n    }    \\n\\n    function setEatingContractAddress(address eatingContractAddress) external onlyOwner {\\n        eatingContract = eatingContractAddress;\\n    }\\n\\n    function setRandomizerContractAddress(address randomizerContractAddress) external onlyOwner {\\n        randomizerContract = randomizerContractAddress;\\n    }\\n\\n    function burnDessertForAddress(uint256 typeId, address burnTokenAddress) external {\\n        require(msg.sender == eatingContract, \\\"ad err\\\");\\n        _burn(burnTokenAddress, typeId, 1);\\n    }\\n\\n    function uri(uint256 typeId) public view override returns (string memory) {\\n        require(typeId\\u003e0 \\u0026\\u0026 typeId\\u003c4, \\\"type err\\\");\\n        bytes memory svg;\\n        string memory num;\\n        if (typeId == 1) {\\n            svg = bytes(svg1);\\n            num = \\u00271 Incredible Ice Pop\\\",\\\"attributes\\\":[{\\\"trait_type\\\": \\\"Dessert Type\\\", \\\"value\\\": \\\"D1\\u0027;\\n        } else if (typeId == 2) {\\n            svg = bytes(svg2);\\n            num = \\u00272 Divine Donut\\\",\\\"attributes\\\":[{\\\"trait_type\\\": \\\"Dessert Type\\\", \\\"value\\\": \\\"D2\\u0027;\\n        } else {\\n            svg = bytes(svg3);\\n            num = \\u00273 Celestial Cake\\\",\\\"attributes\\\":[{\\\"trait_type\\\": \\\"Dessert Type\\\", \\\"value\\\": \\\"D3\\u0027;\\n        }\\n        return string(abi.encodePacked(\\u0027data:application/json;base64,\\u0027, Base64.encode(abi.encodePacked(\\n            \\u0027{\\\"name\\\": \\\"D\\u0027, num, \\u0027\\\"}],\\\"image\\\": \\\"data:image/svg+xml;base64,\\u0027,\\n            Base64.encode(svg),\\u0027\\\"}\\u0027))));\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnTokenAddress\",\"type\":\"address\"}],\"name\":\"burnDessertForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eatingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ads\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ads\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"ownerMint1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eatingContractAddress\",\"type\":\"address\"}],\"name\":\"setEatingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomizerContractAddress\",\"type\":\"address\"}],\"name\":\"setRandomizerContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OCMDesserts", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ff9d3bb0c53b458bf1f6b5ded3812c2859a0c8bf159f7eccb031951abfcdeb3"}]}