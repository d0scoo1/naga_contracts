{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HelloNFT/HelloWeb3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./FOMOPASS.sol\\\";\\nimport \\\"./RoyaltySplits.sol\\\";\\n\\n/// @author FOMOLOL (fomolol.com)\\n\\n/**\\n *\\n * \u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n * \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\\n * \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2550\u255d\\n * \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2557\\n * \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\\n * @title HELLO NFT!\\n */\\ncontract HelloWeb3 is RoyaltySplits, FOMOPASS {\\n\\tconstructor(\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _uri\\n\\t) FOMOPASS(_symbol, _name, _uri, addresses, splits) {}\\n}\\n\\n/*\\n *\\n *   Permission is hereby granted, free of charge, to any person obtaining a copy of this...HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\\n *   CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER...SOFTWARE.\\n *\\n *   Art by EON (@Colette00000), and concept by Jiwon (@dimanchelunch) and Youngsun (@youngsunlive)\\n *   Twitter @hello_web3\\n *\\n *   Smart contract developed for Hello NFT! by FOMOLOL LLC\\n */\\n\"\r\n    },\r\n    \"contracts/HelloNFT/FOMOPASS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @author FOMOLOL (fomolol.com)\\n\\nimport \\\"./libs/BetterBoolean.sol\\\";\\nimport \\\"./libs/SafeAddress.sol\\\";\\nimport \\\"./libs/ABDKMath64x64.sol\\\";\\nimport \\\"./security/ContractGuardian.sol\\\";\\nimport \\\"./finance/LockedPaymentSplitter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @dev Errors\\n/**\\n * @notice Token is not free. Needed `amount` to be more than zero.\\n * @param amount total mint price.\\n */\\nerror NotFree(uint256 amount);\\n/**\\n * @notice Insufficient balance for transfer. Needed `required` but only `available` available.\\n * @param available balance available.\\n * @param required requested amount to transfer.\\n */\\nerror InsufficientBalance(uint256 available, uint256 required);\\n/**\\n * @notice Maximum mints exceeded. Allowed `allowed` but trying to mint `trying`.\\n * @param trying total trying to mint.\\n * @param allowed allowed amount to mint per wallet.\\n */\\nerror MaxPerWalletCap(uint256 trying, uint256 allowed);\\n/**\\n * @notice Maximum supply exceeded. Allowed `allowed` but trying to mint `trying`.\\n * @param trying total trying to mint.\\n * @param allowed allowed amount to mint per wallet.\\n */\\nerror MaxSupplyExceeded(uint256 trying, uint256 allowed);\\n/**\\n * @notice Not allowed. Address is not allowed.\\n * @param _address wallet address checked.\\n */\\nerror NotAllowed(address _address);\\n/**\\n * @notice Token does not exist.\\n * @param tokenId token id checked.\\n */\\nerror DoesNotExist(uint256 tokenId);\\n\\n/**\\n * @title FOMOPASS\\n * @author FOMOLOL (fomolol.com)\\n * @dev Standard ERC1155 implementation\\n *\\n * ERC1155 NFT contract, with reserves, payment splitting and paid token features.\\n *\\n * In addition to using ERC1155, gas is optimized via boolean packing\\n * and use of constants where possible.\\n */\\n/// @custom:security-contact lfg@fomolol.com\\nabstract contract FOMOPASS is\\n\\tERC1155,\\n\\tIERC2981,\\n\\tOwnable,\\n\\tPausable,\\n\\tERC1155Supply,\\n\\tContractGuardian,\\n\\tReentrancyGuard,\\n\\tLockedPaymentSplitter\\n{\\n\\tenum Status {\\n\\t\\tPending,\\n\\t\\tPublicSale,\\n\\t\\tFinished\\n\\t}\\n\\n\\tusing SafeAddress for address;\\n\\tusing ABDKMath64x64 for uint;\\n\\tusing BetterBoolean for uint256;\\n\\tusing Strings for uint256;\\n\\tusing ECDSA for bytes32;\\n\\n\\tStatus public status;\\n\\n\\tstring private name_;\\n\\tstring private symbol_;\\n\\taddress private _recipient;\\n\\n\\tuint256 public constant MAX_PER_WALLET_LIMIT = 50;\\n\\tuint256 public constant PASS_ALL_ACCESS_ID = 0;\\n\\tuint256 public constant PASS_EVENTS_ONLY_ID = 1;\\n\\tuint256 public tokensReserved;\\n\\n\\tbool public metadataRevealed;\\n\\tbool public metadataFinalised;\\n\\n\\tmapping(uint256 => string) private _uris;\\n\\tmapping(uint256 => uint256) private _costs;\\n\\tmapping(uint256 => uint256) private _maxSupplies;\\n\\tmapping(uint256 => uint256) private _maxBatchSizes;\\n\\n\\t/// @dev Events\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\tevent TokensMinted(\\n\\t\\taddress indexed mintedBy,\\n\\t\\tuint256 indexed id,\\n\\t\\tuint256 indexed quantity\\n\\t);\\n\\tevent BaseUriUpdated(string oldBaseUri, string newBaseUri);\\n\\tevent CostUpdated(uint256 oldCost, uint256 newCost);\\n\\tevent ReservedToken(address minter, address recipient, uint256 amount);\\n\\tevent StatusChanged(Status status);\\n\\n\\tconstructor(\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory __uri,\\n\\t\\taddress[] memory __addresses,\\n\\t\\tuint256[] memory __splits\\n\\t) ERC1155(__uri) SlimPaymentSplitter(__addresses, __splits) {\\n\\t\\tname_ = _name;\\n\\t\\tsymbol_ = _symbol;\\n\\n\\t\\t// Set royalty recipient\\n\\t\\t_recipient = owner();\\n\\n\\t\\t// All Access Pass\\n\\t\\t_costs[PASS_ALL_ACCESS_ID] = 0.1 ether;\\n\\t\\t_uris[\\n\\t\\t\\tPASS_ALL_ACCESS_ID\\n\\t\\t] = \\\"ipfs://QmUvDi6gUZ8HLazUuuzij4bi3GoJWoLEg2bL95AH3r7qih/0.json\\\";\\n\\t\\t_maxSupplies[PASS_ALL_ACCESS_ID] = 200;\\n\\t\\t_maxBatchSizes[PASS_ALL_ACCESS_ID] = 25;\\n\\n\\t\\t// Events Only Pass\\n\\t\\t_costs[PASS_EVENTS_ONLY_ID] = 0.05 ether;\\n\\t\\t_uris[\\n\\t\\t\\tPASS_EVENTS_ONLY_ID\\n\\t\\t] = \\\"ipfs://QmUvDi6gUZ8HLazUuuzij4bi3GoJWoLEg2bL95AH3r7qih/1.json\\\";\\n\\t\\t_maxSupplies[PASS_EVENTS_ONLY_ID] = 300;\\n\\t\\t_maxBatchSizes[PASS_EVENTS_ONLY_ID] = 25;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if amount if less than zero.\\n\\t */\\n\\tfunction _isNotFree(uint256 amount) internal pure {\\n\\t\\tif (amount <= 0) {\\n\\t\\t\\trevert NotFree(amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if public sale is NOT active.\\n\\t */\\n\\tfunction _isPublicSaleActive() internal view {\\n\\t\\tif (_msgSender() != owner()) {\\n\\t\\t\\trequire(status == Status.PublicSale, \\\"Public sale is not active.\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if max tokens per wallet\\n\\t * @param id token id to check\\n\\t * @param quantity quantity to check\\n\\t */\\n\\tfunction _isMaxTokensPerWallet(uint256 id, uint256 quantity) internal view {\\n\\t\\tif (_msgSender() != owner()) {\\n\\t\\t\\tuint256 mintedBalance = balanceOf(_msgSender(), id);\\n\\t\\t\\tuint256 currentMintingAmount = mintedBalance + quantity;\\n\\t\\t\\tif (currentMintingAmount > MAX_PER_WALLET_LIMIT) {\\n\\t\\t\\t\\trevert MaxPerWalletCap(\\n\\t\\t\\t\\t\\tcurrentMintingAmount,\\n\\t\\t\\t\\t\\tMAX_PER_WALLET_LIMIT\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the amount sent is not equal to the total cost.\\n\\t * @param id token id to check\\n\\t * @param quantity quantity to check\\n\\t */\\n\\tfunction _isCorrectAmountProvided(uint256 id, uint256 quantity)\\n\\t\\tinternal\\n\\t\\tview\\n\\t{\\n\\t\\tuint256 mintCost = _costs[id];\\n\\t\\tuint256 totalCost = quantity * mintCost;\\n\\t\\tif (msg.value < totalCost && _msgSender() != owner()) {\\n\\t\\t\\trevert InsufficientBalance(msg.value, totalCost);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the claim size is not valid\\n\\t * @param id token id to check\\n\\t * @param count total to check\\n\\t */\\n\\tfunction _isValidBatchSize(uint256 id, uint256 count) internal view {\\n\\t\\trequire(\\n\\t\\t\\t0 < count && count <= _maxBatchSizes[id],\\n\\t\\t\\t\\\"Max tokens per batch exceeded\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the total token number being minted is zero\\n\\t */\\n\\tfunction _isMintingOne(uint256 quantity) internal pure {\\n\\t\\trequire(quantity > 0, \\\"Must mint at least 1 token\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the total being minted is greater than the max supply\\n\\t */\\n\\tfunction _isLessThanMaxSupply(uint256 id, uint256 quantity) internal view {\\n\\t\\tuint256 _maxSupply = _maxSupplies[id];\\n\\t\\tif (totalSupply(id) + quantity > _maxSupply) {\\n\\t\\t\\trevert MaxSupplyExceeded(totalSupply(id) + quantity, _maxSupply);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mint function for reserved tokens.\\n\\t * @param minter is the address minting the token(s).\\n\\t * @param quantity is total tokens to mint.\\n\\t */\\n\\tfunction _internalMintTokens(\\n\\t\\taddress minter,\\n\\t\\tuint256 id,\\n\\t\\tuint256 quantity\\n\\t) internal {\\n\\t\\t_isLessThanMaxSupply(id, quantity);\\n\\t\\t_mint(minter, id, quantity, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows us to specify the collection name.\\n\\t */\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn name_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows us to specify the token symbol.\\n\\t */\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Pause the contract\\n\\t */\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unpause the contract\\n\\t */\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reserve token(s) to multiple team members.\\n\\t *\\n\\t * @param frens addresses to send tokens to\\n\\t * @param quantity the number of tokens to mint.\\n\\t */\\n\\tfunction reserve(\\n\\t\\taddress[] memory frens,\\n\\t\\tuint256 id,\\n\\t\\tuint256 quantity\\n\\t) external onlyOwner {\\n\\t\\t_isMintingOne(quantity);\\n\\t\\t_isValidBatchSize(id, quantity);\\n\\t\\t_isLessThanMaxSupply(id, quantity);\\n\\n\\t\\tuint256 idx;\\n\\t\\tfor (idx = 0; idx < frens.length; idx++) {\\n\\t\\t\\trequire(frens[idx] != address(0), \\\"Zero address\\\");\\n\\t\\t\\t_internalMintTokens(frens[idx], id, quantity);\\n\\t\\t\\ttokensReserved += quantity;\\n\\t\\t\\temit ReservedToken(_msgSender(), frens[idx], quantity);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reserve multiple tokens to a single team member.\\n\\t *\\n\\t * @param fren Address to send tokens to\\n\\t * @param id Token id to mint\\n\\t * @param quantity Number of tokens to mint\\n\\t */\\n\\tfunction reserveSingle(\\n\\t\\taddress fren,\\n\\t\\tuint256 id,\\n\\t\\tuint256 quantity\\n\\t) external onlyOwner {\\n\\t\\t_isMintingOne(quantity);\\n\\t\\t_isValidBatchSize(id, quantity);\\n\\t\\t_isLessThanMaxSupply(id, quantity);\\n\\n\\t\\tuint256 _maxBatchSize = _maxBatchSizes[id];\\n\\t\\tuint256 multiple = quantity / _maxBatchSize;\\n\\t\\tfor (uint256 i = 0; i < multiple; i++) {\\n\\t\\t\\t_internalMintTokens(fren, id, _maxBatchSize);\\n\\t\\t}\\n\\t\\tuint256 remainder = quantity % _maxBatchSize;\\n\\t\\tif (remainder != 0) {\\n\\t\\t\\t_internalMintTokens(fren, id, remainder);\\n\\t\\t}\\n\\t\\ttokensReserved += quantity;\\n\\t\\temit ReservedToken(_msgSender(), fren, quantity);\\n\\t}\\n\\n\\t/**\\n\\t * @dev The public mint function.\\n\\t * @param id Token id to mint.\\n\\t * @param quantity Total number of tokens to mint.\\n\\t */\\n\\tfunction mint(uint256 id, uint256 quantity)\\n\\t\\tpublic\\n\\t\\tpayable\\n\\t\\tnonReentrant\\n\\t\\tonlyUsers\\n\\t{\\n\\t\\t_isPublicSaleActive();\\n\\t\\t_isMaxTokensPerWallet(id, quantity);\\n\\t\\t_isCorrectAmountProvided(id, quantity);\\n\\t\\t_isMintingOne(quantity);\\n\\t\\t_isLessThanMaxSupply(id, quantity);\\n\\n\\t\\t_mint(_msgSender(), id, quantity, \\\"\\\");\\n\\t\\temit TokensMinted(_msgSender(), id, quantity);\\n\\t}\\n\\n\\t/**\\n\\t * @notice This is a mint cost override (must be in wei)\\n\\t * @dev Handles setting the mint cost\\n\\t * @param id token id to set the cost for\\n\\t * @param _cost new cost to associate with minting tokens (in wei)\\n\\t */\\n\\tfunction setMintCost(uint256 id, uint256 _cost) public onlyOwner {\\n\\t\\t_isNotFree(_cost);\\n\\t\\tuint256 currentCost = _costs[id];\\n\\t\\t_costs[id] = _cost; // in wei\\n\\t\\temit CostUpdated(currentCost, _cost);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Handles updating the status\\n\\t */\\n\\tfunction setStatus(Status _status) external onlyOwner {\\n\\t\\tstatus = _status;\\n\\t\\temit StatusChanged(_status);\\n\\t}\\n\\n\\t/**\\n\\t * @dev override for before token transfer method\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override(ERC1155, ERC1155Supply) whenNotPaused {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t\\trequire(!paused(), \\\"token transfer while paused\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev override for the uri that allows IPFS to be used\\n\\t * @param id token id to update uri for\\n\\t */\\n\\tfunction uri(uint256 id) public view override returns (string memory) {\\n\\t\\treturn (_uris[id]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev handles returning the cost for a token\\n\\t * @param id token id to update uri for\\n\\t */\\n\\tfunction cost(uint256 id) public view returns (uint256) {\\n\\t\\treturn (_costs[id]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev override for the uri that allows IPFS to be used\\n\\t * @param id token id to update uri for\\n\\t * @param _uri uri for token id\\n\\t */\\n\\tfunction setTokenUri(uint256 id, string memory _uri) public onlyOwner {\\n\\t\\t_uris[id] = _uri;\\n\\t}\\n\\n\\t/**\\n\\t * @dev handles returning the max supply for a token\\n\\t * @param id token id to update uri for\\n\\t */\\n\\tfunction maxSupply(uint256 id) public view returns (uint256) {\\n\\t\\treturn (_maxSupplies[id]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev handles returning the max batch size for a token\\n\\t * @param id token id to update uri for\\n\\t */\\n\\tfunction maxBatchSize(uint256 id) public view returns (uint256) {\\n\\t\\treturn (_maxBatchSizes[id]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev handles adjusting the max supply\\n\\t * @param id token id to update uri for\\n\\t * @param quantity to change the max supply to\\n\\t */\\n\\tfunction setMaxSupply(uint256 id, uint256 quantity) public onlyOwner {\\n\\t\\t_maxSupplies[id] = quantity;\\n\\t}\\n\\n\\t/**\\n\\t * @dev handles adjusting the max batch size\\n\\t * @param id token id to update uri for\\n\\t * @param quantity to change the max supply to\\n\\t */\\n\\tfunction setMaxBatchSize(uint256 id, uint256 quantity) public onlyOwner {\\n\\t\\t_maxBatchSizes[id] = quantity;\\n\\t}\\n\\n\\t/** @dev EIP2981 royalties implementation. */\\n\\n\\t// Maintain flexibility to modify royalties recipient (could also add basis points).\\n\\tfunction _setRoyalties(address newRecipient) internal {\\n\\t\\trequire(newRecipient != address(0), \\\"royalty recipient zero address\\\");\\n\\t\\t_recipient = newRecipient;\\n\\t}\\n\\n\\tfunction setRoyalties(address newRecipient) external onlyOwner {\\n\\t\\t_setRoyalties(newRecipient);\\n\\t}\\n\\n\\t// EIP2981 standard royalties return.\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address receiver, uint256 royaltyAmount)\\n\\t{\\n\\t\\treturn (_recipient, (_salePrice * 500) / 10000); // 5% (500 basis points)\\n\\t}\\n\\n\\t// EIP2981 standard Interface return. Adds to ERC1155 and ERC165 Interface returns.\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC1155, IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn (interfaceId == type(IERC2981).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/RoyaltySplits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @author FOMOLOL (fomolol.com)\\n\\ncontract RoyaltySplits {\\n\\taddress[] internal addresses = [\\n\\t\\t0xb1759409c127De32974b14c6390738920c74847e // founder\\n\\t];\\n\\n\\tuint256[] internal splits = [100];\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/libs/BetterBoolean.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title BetterBoolean\\n * @author FOMOLOL (fomolol.com)\\n * @dev Credit to Zimri Leijen\\n * See https://ethereum.stackexchange.com/a/92235\\n */\\nlibrary BetterBoolean {\\n\\tfunction getBoolean(uint256 _packedBools, uint256 _columnNumber)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tuint256 flag = (_packedBools >> _columnNumber) & uint256(1);\\n\\t\\treturn (flag == 1 ? true : false);\\n\\t}\\n\\n\\tfunction setBoolean(\\n\\t\\tuint256 _packedBools,\\n\\t\\tuint256 _columnNumber,\\n\\t\\tbool _value\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (_value) {\\n\\t\\t\\t_packedBools = _packedBools | (uint256(1) << _columnNumber);\\n\\t\\t\\treturn _packedBools;\\n\\t\\t} else {\\n\\t\\t\\t_packedBools = _packedBools & ~(uint256(1) << _columnNumber);\\n\\t\\t\\treturn _packedBools;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/libs/SafeAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * Handles ensuring that the contract is being called by a user and not a contract.\\n */\\npragma solidity 0.8.4;\\n\\nlibrary SafeAddress {\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/libs/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity 0.8.4;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n\\t/*\\n\\t * Minimum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n\\t/*\\n\\t * Maximum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromInt(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(x << 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n\\t * rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64-bit integer number\\n\\t */\\n\\tfunction toInt(int128 x) internal pure returns (int64) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int64(x >> 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromUInt(uint256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(int256(x << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n\\t * number rounding down.  Revert on underflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return unsigned 64-bit integer number\\n\\t */\\n\\tfunction toUInt(int128 x) internal pure returns (uint64) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn uint64(uint128(x >> 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n\\t * number rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 128.128-bin fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction from128x128(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = x >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n\\t * number.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 128.128 fixed point number\\n\\t */\\n\\tfunction to128x128(int128 x) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int256(x) << 64;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x + y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction add(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) + y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x - y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sub(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) - y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n\\t * number and y is signed 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 256-bit integer number\\n\\t */\\n\\tfunction muli(int128 x, int256 y) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == MIN_64x64) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\ty >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n\\t\\t\\t\\t\\t\\ty <= 0x1000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn -y << 63;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\t\\tx = -x;\\n\\t\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tuint256 absoluteResult = mulu(x, uint256(y));\\n\\t\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x8000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn -int256(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn int256(absoluteResult);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 256-bit integer number\\n\\t */\\n\\tfunction mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (y == 0) return 0;\\n\\n\\t\\t\\trequire(x >= 0);\\n\\n\\t\\t\\tuint256 lo = (uint256(int256(x)) *\\n\\t\\t\\t\\t(y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n\\t\\t\\tuint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n\\t\\t\\trequire(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\thi <<= 64;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\thi <=\\n\\t\\t\\t\\t\\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n\\t\\t\\t\\t\\t\\tlo\\n\\t\\t\\t);\\n\\t\\t\\treturn hi + lo;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divi(int256 x, int256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\tx = -x; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t}\\n\\t\\t\\tuint128 absoluteResult = divuu(uint256(x), uint256(y));\\n\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x80000000000000000000000000000000);\\n\\t\\t\\t\\treturn -int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\t\\treturn int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divu(uint256 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tuint128 result = divuu(x, y);\\n\\t\\t\\trequire(result <= uint128(MAX_64x64));\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate -x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction neg(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn -x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate |x|.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction abs(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn x < 0 ? -x : x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction inv(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != 0);\\n\\t\\t\\tint256 result = int256(0x100000000000000000000000000000000) / x;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction avg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int128((int256(x) + int256(y)) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n\\t * Revert on overflow or in case x * y is negative.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction gavg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 m = int256(x) * int256(y);\\n\\t\\t\\trequire(m >= 0);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tm <\\n\\t\\t\\t\\t\\t0x4000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t);\\n\\t\\t\\treturn int128(sqrtu(uint256(m)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y uint256 value\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction pow(int128 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tbool negative = x < 0 && y & 1 == 1;\\n\\n\\t\\t\\tuint256 absX = uint128(x < 0 ? -x : x);\\n\\t\\t\\tuint256 absResult;\\n\\t\\t\\tabsResult = 0x100000000000000000000000000000000;\\n\\n\\t\\t\\tif (absX <= 0x10000000000000000) {\\n\\t\\t\\t\\tabsX <<= 63;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x2 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x4 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x8 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\ty >>= 4;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tabsResult >>= 64;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256 absXShift = 63;\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 32;\\n\\t\\t\\t\\t\\tabsXShift -= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 16;\\n\\t\\t\\t\\t\\tabsXShift -= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 8;\\n\\t\\t\\t\\t\\tabsXShift -= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 4;\\n\\t\\t\\t\\t\\tabsXShift -= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x40000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 2;\\n\\t\\t\\t\\t\\tabsXShift -= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x80000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 1;\\n\\t\\t\\t\\t\\tabsXShift -= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256 resultShift = 0;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\trequire(absXShift < 64);\\n\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t\\tresultShift += absXShift;\\n\\t\\t\\t\\t\\t\\tif (absResult > 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\t\\tabsResult >>= 1;\\n\\t\\t\\t\\t\\t\\t\\tresultShift += 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\t\\t\\t\\t\\tabsXShift <<= 1;\\n\\t\\t\\t\\t\\tif (absX >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\tabsX >>= 1;\\n\\t\\t\\t\\t\\t\\tabsXShift += 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ty >>= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\trequire(resultShift < 64);\\n\\t\\t\\t\\tabsResult >>= 64 - resultShift;\\n\\t\\t\\t}\\n\\t\\t\\tint256 result = negative ? -int256(absResult) : int256(absResult);\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sqrt(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn int128(sqrtu(uint256(int256(x)) << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction log_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\tint256 msb = 0;\\n\\t\\t\\tint256 xc = x;\\n\\t\\t\\tif (xc >= 0x10000000000000000) {\\n\\t\\t\\t\\txc >>= 64;\\n\\t\\t\\t\\tmsb += 64;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\tint256 result = (msb - 64) << 64;\\n\\t\\t\\tuint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n\\t\\t\\tfor (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n\\t\\t\\t\\tux *= ux;\\n\\t\\t\\t\\tuint256 b = ux >> 255;\\n\\t\\t\\t\\tux >>= 127 + b;\\n\\t\\t\\t\\tresult += bit * int256(b);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction ln(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\tint256(\\n\\t\\t\\t\\t\\t\\t(uint256(int256(log_2(x))) *\\n\\t\\t\\t\\t\\t\\t\\t0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\tuint256 result = 0x80000000000000000000000000000000;\\n\\n\\t\\t\\tif (x & 0x8000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n\\t\\t\\tif (x & 0x800000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n\\t\\t\\tif (x & 0x400000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n\\t\\t\\tif (x & 0x200000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n\\t\\t\\tif (x & 0x100000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n\\t\\t\\tif (x & 0x80000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n\\t\\t\\tif (x & 0x40000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n\\t\\t\\tif (x & 0x20000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n\\t\\t\\tif (x & 0x10000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n\\t\\t\\tif (x & 0x8000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n\\t\\t\\tif (x & 0x800000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n\\t\\t\\tif (x & 0x400000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n\\t\\t\\tif (x & 0x200000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n\\t\\t\\tif (x & 0x100000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n\\t\\t\\tif (x & 0x80000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n\\t\\t\\tif (x & 0x40000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n\\t\\t\\tif (x & 0x20000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n\\t\\t\\tif (x & 0x10000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n\\t\\t\\tif (x & 0x8000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n\\t\\t\\tif (x & 0x4000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n\\t\\t\\tif (x & 0x2000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n\\t\\t\\tif (x & 0x1000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n\\t\\t\\tif (x & 0x800000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n\\t\\t\\tif (x & 0x400000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n\\t\\t\\tif (x & 0x200000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n\\t\\t\\tif (x & 0x100000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n\\t\\t\\tif (x & 0x80000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n\\t\\t\\tif (x & 0x40000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n\\t\\t\\tif (x & 0x20000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n\\t\\t\\tif (x & 0x10000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n\\t\\t\\tif (x & 0x8000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n\\t\\t\\tif (x & 0x4000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n\\t\\t\\tif (x & 0x2000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n\\t\\t\\tif (x & 0x1000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n\\t\\t\\tif (x & 0x800000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n\\t\\t\\tif (x & 0x400000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n\\t\\t\\tif (x & 0x200000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n\\t\\t\\tif (x & 0x100000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n\\t\\t\\tif (x & 0x80000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n\\t\\t\\tif (x & 0x40000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n\\t\\t\\tif (x & 0x20000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n\\t\\t\\tif (x & 0x10000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n\\t\\t\\tif (x & 0x8000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n\\t\\t\\tif (x & 0x4000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n\\t\\t\\tif (x & 0x2000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n\\t\\t\\tif (x & 0x1000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n\\t\\t\\tif (x & 0x800 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n\\t\\t\\tif (x & 0x400 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n\\t\\t\\tif (x & 0x200 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n\\t\\t\\tif (x & 0x100 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n\\t\\t\\tif (x & 0x80 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n\\t\\t\\tif (x & 0x40 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n\\t\\t\\tif (x & 0x20 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n\\t\\t\\tif (x & 0x10 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n\\t\\t\\tif (x & 0x8 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n\\t\\t\\tif (x & 0x4 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n\\t\\t\\tif (x & 0x2 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n\\t\\t\\tif (x & 0x1 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n\\t\\t\\tresult >>= uint256(int256(63 - (x >> 64)));\\n\\t\\t\\trequire(result <= uint256(int256(MAX_64x64)));\\n\\n\\t\\t\\treturn int128(int256(result));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\texp_2(\\n\\t\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\t\\t(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 64.64-bit fixed point number\\n\\t */\\n\\tfunction divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tuint256 result;\\n\\n\\t\\t\\tif (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n\\t\\t\\t\\tresult = (x << 64) / y;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 msb = 192;\\n\\t\\t\\t\\tuint256 xc = x >> 192;\\n\\t\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\t\\tresult = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n\\t\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 hi = result * (y >> 128);\\n\\t\\t\\t\\tuint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 xh = x >> 192;\\n\\t\\t\\t\\tuint256 xl = x << 64;\\n\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\t\\t\\t\\tlo = hi << 128;\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\n\\t\\t\\t\\tassert(xh == hi >> 128);\\n\\n\\t\\t\\t\\tresult += xl / y;\\n\\t\\t\\t}\\n\\n\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\treturn uint128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n\\t * number.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return unsigned 128-bit integer number\\n\\t */\\n\\tfunction sqrtu(uint256 x) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == 0) return 0;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 xx = x;\\n\\t\\t\\t\\tuint256 r = 1;\\n\\t\\t\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 128;\\n\\t\\t\\t\\t\\tr <<= 64;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 64;\\n\\t\\t\\t\\t\\tr <<= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\t\\t\\txx >>= 32;\\n\\t\\t\\t\\t\\tr <<= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\t\\t\\txx >>= 16;\\n\\t\\t\\t\\t\\tr <<= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100) {\\n\\t\\t\\t\\t\\txx >>= 8;\\n\\t\\t\\t\\t\\tr <<= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10) {\\n\\t\\t\\t\\t\\txx >>= 4;\\n\\t\\t\\t\\t\\tr <<= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x8) {\\n\\t\\t\\t\\t\\tr <<= 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\t\\t\\tuint256 r1 = x / r;\\n\\t\\t\\t\\treturn uint128(r < r1 ? r : r1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/security/ContractGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractGuardian\\n * @dev Helper contract to help protect against contract based mint spamming attacks.\\n */\\nabstract contract ContractGuardian {\\n\\tmodifier onlyUsers() {\\n\\t\\trequire(tx.origin == msg.sender, \\\"Must be user\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/finance/LockedPaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./SlimPaymentSplitter.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title LockedPaymentSplitter\\n * @author @NiftyMike, NFT Culture\\n * @dev A wrapper around SlimPaymentSplitter which adds on security elements.\\n *\\n * Based on OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n */\\nabstract contract LockedPaymentSplitter is SlimPaymentSplitter, Ownable {\\n\\t/**\\n\\t * @dev Overrides release() method, so that it can only be called by owner.\\n\\t * @notice Owner: Release funds to a specific address.\\n\\t *\\n\\t * @param account Payable address that will receive funds.\\n\\t */\\n\\tfunction release(address payable account) public override onlyOwner {\\n\\t\\tsuper.release(account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Triggers a transfer to caller's address of the amount of Ether they are owed, according to their percentage of the\\n\\t * total shares and their previous withdrawals.\\n\\t * @notice Sender: request payment.\\n\\t */\\n\\tfunction releaseToSelf() public {\\n\\t\\tsuper.release(payable(msg.sender));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HelloNFT/finance/SlimPaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title SlimPaymentSplitter\\n * @author @NiftyMike, NFT Culture (original)\\n * @dev A drop-in slim replacement version of OZ's Payment Splitter. All ERC-20 token functionality removed.\\n *\\n * Based on OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n */\\ncontract SlimPaymentSplitter is Context {\\n\\tevent PayeeAdded(address account, uint256 shares);\\n\\tevent PaymentReleased(address to, uint256 amount);\\n\\tevent AllPaymentsReleased(address[] to, uint256[] amount);\\n\\tevent PaymentReceived(address from, uint256 amount);\\n\\n\\tuint256 private _totalShares;\\n\\tuint256 private _totalReleased;\\n\\n\\tmapping(address => uint256) private _shares;\\n\\tmapping(address => uint256) private _released;\\n\\n\\taddress[] private _payees;\\n\\n\\t/**\\n\\t * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n\\t * the matching position in the `shares` array.\\n\\t *\\n\\t * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n\\t * duplicates in `payees`.\\n\\t */\\n\\tconstructor(address[] memory payees, uint256[] memory shares_) payable {\\n\\t\\trequire(payees.length == shares_.length, \\\"payees and shares mismatch\\\");\\n\\t\\trequire(payees.length > 0, \\\"no payees\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < payees.length; i++) {\\n\\t\\t\\t_addPayee(payees[i], shares_[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n\\t * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n\\t * reliability of the events, and not the actual splitting of Ether.\\n\\t *\\n\\t * To learn more about this see the Solidity documentation for\\n\\t * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n\\t * functions].\\n\\t */\\n\\treceive() external payable virtual {\\n\\t\\temit PaymentReceived(_msgSender(), msg.value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the total shares held by payees.\\n\\t */\\n\\tfunction totalShares() public view returns (uint256) {\\n\\t\\treturn _totalShares;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the total amount of Ether already released.\\n\\t */\\n\\tfunction totalReleased() public view returns (uint256) {\\n\\t\\treturn _totalReleased;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the total number of payees.\\n\\t */\\n\\tfunction totalPayees() public view returns (uint256) {\\n\\t\\treturn _payees.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the amount of shares held by an account.\\n\\t */\\n\\tfunction shares(address account) public view returns (uint256) {\\n\\t\\treturn _shares[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the amount of Ether already released to a payee.\\n\\t */\\n\\tfunction released(address account) public view returns (uint256) {\\n\\t\\treturn _released[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter for the address of the payee number `index`.\\n\\t */\\n\\tfunction payee(uint256 index) public view returns (address) {\\n\\t\\treturn _payees[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n\\t * total shares and their previous withdrawals.\\n\\t */\\n\\tfunction release(address payable account) public virtual {\\n\\t\\trequire(_shares[account] > 0, \\\"account has no shares\\\");\\n\\n\\t\\tuint256 totalReceived = address(this).balance + totalReleased();\\n\\t\\tuint256 payment = _pendingPayment(\\n\\t\\t\\taccount,\\n\\t\\t\\ttotalReceived,\\n\\t\\t\\treleased(account)\\n\\t\\t);\\n\\n\\t\\trequire(payment != 0, \\\"account is not due payment\\\");\\n\\n\\t\\t_released[account] += payment;\\n\\t\\t_totalReleased += payment;\\n\\n\\t\\tAddress.sendValue(account, payment);\\n\\t\\temit PaymentReleased(account, payment);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Triggers a release for all of the accounts in the royalty pool.\\n\\t */\\n\\tfunction releaseAll() public {\\n\\t\\tuint256 total = totalPayees();\\n\\t\\taddress[] memory _tos = new address[](total);\\n\\t\\tuint256[] memory _amounts = new uint256[](total);\\n\\t\\tfor (uint256 i = 0; i < total; i++) {\\n\\t\\t\\taddress payable to = payable(_payees[i]);\\n\\t\\t\\tuint256 amount = _shares[to];\\n\\t\\t\\trequire(amount != uint256(0), \\\"Share amount is zero\\\");\\n\\t\\t\\t_amounts[i] = amount;\\n\\t\\t\\t_tos[i] = to;\\n\\t\\t\\trelease(to);\\n\\t\\t}\\n\\t\\temit AllPaymentsReleased(_tos, _amounts);\\n\\t}\\n\\n\\t/**\\n\\t * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n\\t * already released amounts.\\n\\t */\\n\\tfunction _pendingPayment(\\n\\t\\taddress account,\\n\\t\\tuint256 totalReceived,\\n\\t\\tuint256 alreadyReleased\\n\\t) private view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add a new payee to the contract.\\n\\t * @param account The address of the payee to add.\\n\\t * @param shares_ The number of shares owned by the payee.\\n\\t */\\n\\tfunction _addPayee(address account, uint256 shares_) private {\\n\\t\\trequire(account != address(0), \\\"account is the zero address\\\");\\n\\t\\trequire(shares_ > 0, \\\"shares are 0\\\");\\n\\t\\trequire(_shares[account] == 0, \\\"account already has shares\\\");\\n\\n\\t\\t_payees.push(account);\\n\\t\\t_shares[account] = shares_;\\n\\t\\t_totalShares = _totalShares + shares_;\\n\\t\\temit PayeeAdded(account, shares_);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"MaxPerWalletCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotFree\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"AllPaymentsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"CostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FOMOPASS.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PER_WALLET_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PASS_ALL_ACCESS_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PASS_EVENTS_ONLY_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataFinalised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"frens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fren\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"reserveSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setMintCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FOMOPASS.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum FOMOPASS.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HelloWeb3", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004484e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a48454c4c4f204e46542100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f697066733a2f2f516d557644693667555a38484c617a5575757a696a34626933476f4a576f4c456732624c393541483372377169682f7b69647d2e6a736f6e00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}