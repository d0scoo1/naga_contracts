{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interfaces/IERC1155Metadata.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\ninterface IERC1155Metadata {\r\n\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n  /****************************************|\r\n  |                Functions               |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner_;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () {\r\n    _owner_ = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner_);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner_, \"Ownable#onlyOwner: SENDER_IS_NOT_OWNER\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers the ownership of the contract to new address\r\n   * @param _newOwner Address of the new owner\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable#transferOwnership: INVALID_ADDRESS\");\r\n    emit OwnershipTransferred(_owner_, _newOwner);\r\n    _owner_ = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner_;\r\n  }\r\n}\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  // Default hash for EOA accounts returned by extcodehash\r\n  bytes32 constant internal ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract.\r\n   * @param _address address of the account to check\r\n   * @return Whether the target address is a contract\r\n   */\r\n  function isContract(address _address) internal view returns (bool) {\r\n    bytes32 codehash;\r\n\r\n    // Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\r\n    assembly { codehash := extcodehash(_address) }\r\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\r\n  }\r\n}\r\n// File: contracts/interfaces/IERC165.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/utils/ERC165.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\nabstract contract ERC165 is IERC165 {\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID`\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) virtual override public view returns (bool) {\r\n    return _interfaceID == this.supportsInterface.selector;\r\n  }\r\n}\r\n// File: contracts/interfaces/IERC1155.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\ninterface IERC1155 is IERC165 {\r\n\r\n  /****************************************|\r\n  |                 Events                 |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n\r\n  /**\r\n   * @dev MUST emit when an approval is updated\r\n   */\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n  /****************************************|\r\n  |                Functions               |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n    * @dev MUST emit TransferSingle event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n  /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @dev MUST emit TransferBatch event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return        The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @dev MUST emit the ApprovalForAll event on success\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return isOperator True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n\r\n// File: contracts/interfaces/IERC1155TokenReceiver.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n}\r\n// File: contracts/ERC1155PackedBalance.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract. This implementation of the ERC-1155 standard\r\n *      utilizes the fact that balances of different token ids can be concatenated within individual\r\n *      uint256 storage slots. This allows the contract to batch transfer tokens more efficiently at\r\n *      the cost of limiting the maximum token balance each address can hold. This limit is\r\n *      2^IDS_BITS_SIZE, which can be adjusted below. In practice, using IDS_BITS_SIZE smaller than 16\r\n *      did not lead to major efficiency gains.\r\n */\r\ncontract ERC1155PackedBalance is IERC1155, ERC165 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n  // onReceive function signatures\r\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  // Constants regarding bin sizes for balance packing\r\n  // IDS_BITS_SIZE **MUST** be a power of 2 (e.g. 2, 4, 8, 16, 32, 64, 128)\r\n  uint256 internal constant IDS_BITS_SIZE   = 32;                  // Max balance amount in bits per token ID\r\n  uint256 internal constant IDS_PER_UINT256 = 256 / IDS_BITS_SIZE; // Number of ids per uint256\r\n\r\n  // Operations for _updateIDBalance\r\n  enum Operations { Add, Sub }\r\n\r\n  // Token IDs balances ; balances[address][id] => balance (using array instead of mapping for efficiency)\r\n  mapping (address => mapping(uint256 => uint256)) internal balances;\r\n\r\n  // Operators\r\n  mapping (address => mapping(address => bool)) internal operators;\r\n\r\n\r\n  /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public override\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155PackedBalance#safeTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0),\"ERC1155PackedBalance#safeTransferFrom: INVALID_RECIPIENT\");\r\n    // require(_amount <= balances);  Not necessary since checked with _viewUpdateBinValue() checks\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public override\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0),\"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   */\r\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    //Update balances\r\n    _updateIDBalance(_from, _id, _amount, Operations.Sub); // Subtract amount from sender\r\n    _updateIDBalance(_to,   _id, _amount, Operations.Add); // Add amount to recipient\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n   */\r\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\r\n    internal\r\n  {\r\n    // Check if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas:_gasLimit}(msg.sender, _from, _id, _amount, _data);\r\n      require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155PackedBalance#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   */\r\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    uint256 nTransfer = _ids.length; // Number of transfer to execute\r\n    require(nTransfer == _amounts.length, \"ERC1155PackedBalance#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n    if (_from != _to && nTransfer > 0) {\r\n      // Load first bin and index where the token ID balance exists\r\n      (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\r\n\r\n      // Balance for current bin in memory (initialized with first transfer)\r\n      uint256 balFrom = _viewUpdateBinValue(balances[_from][bin], index, _amounts[0], Operations.Sub);\r\n      uint256 balTo = _viewUpdateBinValue(balances[_to][bin], index, _amounts[0], Operations.Add);\r\n\r\n      // Last bin updated\r\n      uint256 lastBin = bin;\r\n\r\n      for (uint256 i = 1; i < nTransfer; i++) {\r\n        (bin, index) = getIDBinIndex(_ids[i]);\r\n\r\n        // If new bin\r\n        if (bin != lastBin) {\r\n          // Update storage balance of previous bin\r\n          balances[_from][lastBin] = balFrom;\r\n          balances[_to][lastBin] = balTo;\r\n\r\n          balFrom = balances[_from][bin];\r\n          balTo = balances[_to][bin];\r\n\r\n          // Bin will be the most recent bin\r\n          lastBin = bin;\r\n        }\r\n\r\n        // Update memory balance\r\n        balFrom = _viewUpdateBinValue(balFrom, index, _amounts[i], Operations.Sub);\r\n        balTo = _viewUpdateBinValue(balTo, index, _amounts[i], Operations.Add);\r\n      }\r\n\r\n      // Update storage of the last bin visited\r\n      balances[_from][bin] = balFrom;\r\n      balances[_to][bin] = balTo;\r\n\r\n    // If transfer to self, just make sure all amounts are valid\r\n    } else {\r\n      for (uint256 i = 0; i < nTransfer; i++) {\r\n        require(balanceOf(_from, _ids[i]) >= _amounts[i], \"ERC1155PackedBalance#_safeBatchTransferFrom: UNDERFLOW\");\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n   */\r\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\r\n    internal\r\n  {\r\n    // Pass data if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\r\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155PackedBalance#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved)\r\n    external override\r\n  {\r\n    // Update operator status\r\n    operators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return isOperator True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public override view returns (bool isOperator)\r\n  {\r\n    return operators[_owner][_operator];\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |     Public Balance Functions      |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id)\r\n    public override view returns (uint256)\r\n  {\r\n    uint256 bin;\r\n    uint256 index;\r\n\r\n    //Get bin and index of _id\r\n    (bin, index) = getIDBinIndex(_id);\r\n    return getValueInBin(balances[_owner][bin], index);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders (sorted owners will lead to less gas usage)\r\n   * @param _ids    ID of the Tokens (sorted ids will lead to less gas usage\r\n   * @return The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n    */\r\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n    public override view returns (uint256[] memory)\r\n  {\r\n    uint256 n_owners = _owners.length;\r\n    require(n_owners == _ids.length, \"ERC1155PackedBalance#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n    // First values\r\n    (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\r\n    uint256 balance_bin = balances[_owners[0]][bin];\r\n    uint256 last_bin = bin;\r\n\r\n    // Initialization\r\n    uint256[] memory batchBalances = new uint256[](n_owners);\r\n    batchBalances[0] = getValueInBin(balance_bin, index);\r\n\r\n    // Iterate over each owner and token ID\r\n    for (uint256 i = 1; i < n_owners; i++) {\r\n      (bin, index) = getIDBinIndex(_ids[i]);\r\n\r\n      // SLOAD if bin changed for the same owner or if owner changed\r\n      if (bin != last_bin || _owners[i-1] != _owners[i]) {\r\n        balance_bin = balances[_owners[i]][bin];\r\n        last_bin = bin;\r\n      }\r\n\r\n      batchBalances[i] = getValueInBin(balance_bin, index);\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |      Packed Balance Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Update the balance of a id for a given address\r\n   * @param _address    Address to update id balance\r\n   * @param _id         Id to update balance of\r\n   * @param _amount     Amount to update the id balance\r\n   * @param _operation  Which operation to conduct :\r\n   *   Operations.Add: Add _amount to id balance\r\n   *   Operations.Sub: Substract _amount from id balance\r\n   */\r\n  function _updateIDBalance(address _address, uint256 _id, uint256 _amount, Operations _operation)\r\n    internal\r\n  {\r\n    uint256 bin;\r\n    uint256 index;\r\n\r\n    // Get bin and index of _id\r\n    (bin, index) = getIDBinIndex(_id);\r\n\r\n    // Update balance\r\n    balances[_address][bin] = _viewUpdateBinValue(balances[_address][bin], index, _amount, _operation);\r\n  }\r\n\r\n  /**\r\n   * @notice Update a value in _binValues\r\n   * @param _binValues  Uint256 containing values of size IDS_BITS_SIZE (the token balances)\r\n   * @param _index      Index of the value in the provided bin\r\n   * @param _amount     Amount to update the id balance\r\n   * @param _operation  Which operation to conduct :\r\n   *   Operations.Add: Add _amount to value in _binValues at _index\r\n   *   Operations.Sub: Substract _amount from value in _binValues at _index\r\n   */\r\n  function _viewUpdateBinValue(uint256 _binValues, uint256 _index, uint256 _amount, Operations _operation)\r\n    internal pure returns (uint256 newBinValues)\r\n  {\r\n    uint256 shift = IDS_BITS_SIZE * _index;\r\n    uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\r\n\r\n    if (_operation == Operations.Add) {\r\n      newBinValues = _binValues + (_amount << shift);\r\n      require(newBinValues >= _binValues, \"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\");\r\n      require(\r\n        ((_binValues >> shift) & mask) + _amount < 2**IDS_BITS_SIZE, // Checks that no other id changed\r\n        \"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\"\r\n      );\r\n\r\n    } else if (_operation == Operations.Sub) {\r\n      newBinValues = _binValues - (_amount << shift);\r\n      require(newBinValues <= _binValues, \"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\");\r\n      require(\r\n        ((_binValues >> shift) & mask) >= _amount, // Checks that no other id changed\r\n        \"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\"\r\n      );\r\n\r\n    } else {\r\n      revert(\"ERC1155PackedBalance#_viewUpdateBinValue: INVALID_BIN_WRITE_OPERATION\"); // Bad operation\r\n    }\r\n\r\n    return newBinValues;\r\n  }\r\n\r\n  /**\r\n  * @notice Return the bin number and index within that bin where ID is\r\n  * @param _id  Token id\r\n  * @return bin index (Bin number, ID\"s index within that bin)\r\n  */\r\n  function getIDBinIndex(uint256 _id)\r\n    public pure returns (uint256 bin, uint256 index)\r\n  {\r\n    bin = _id / IDS_PER_UINT256;\r\n    index = _id % IDS_PER_UINT256;\r\n    return (bin, index);\r\n  }\r\n\r\n  /**\r\n   * @notice Return amount in _binValues at position _index\r\n   * @param _binValues  uint256 containing the balances of IDS_PER_UINT256 ids\r\n   * @param _index      Index at which to retrieve amount\r\n   * @return amount at given _index in _bin\r\n   */\r\n  function getValueInBin(uint256 _binValues, uint256 _index)\r\n    public pure returns (uint256)\r\n  {\r\n    // require(_index < IDS_PER_UINT256) is not required since getIDBinIndex ensures `_index < IDS_PER_UINT256`\r\n\r\n    // Mask to retrieve data for a given binData\r\n    uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\r\n\r\n    // Shift amount\r\n    uint256 rightShift = IDS_BITS_SIZE * _index;\r\n    return (_binValues >> rightShift) & mask;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) public override(ERC165, IERC165) virtual view returns (bool) {\r\n    if (_interfaceID == type(IERC1155).interfaceId) {\r\n      return true;\r\n    }\r\n    return super.supportsInterface(_interfaceID);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC1155MintBurnPackedBalance.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions.\r\n */\r\ncontract ERC1155MintBurnPackedBalance is ERC1155PackedBalance {\r\n\r\n  /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Mint _amount of tokens of a given id\r\n   * @param _to      The address to mint tokens to\r\n   * @param _id      Token id to mint\r\n   * @param _amount  The amount to be minted\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    //Add _amount\r\n    _updateIDBalance(_to,   _id, _amount, Operations.Add); // Add amount to recipient\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens for each (_ids[i], _amounts[i]) pair\r\n   * @param _to       The address to mint tokens to\r\n   * @param _ids      Array of ids to mint\r\n   * @param _amounts  Array of amount of tokens to mint per id\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurnPackedBalance#_batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n    if (_ids.length > 0) {\r\n      // Load first bin and index where the token ID balance exists\r\n      (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\r\n\r\n      // Balance for current bin in memory (initialized with first transfer)\r\n      uint256 balTo = _viewUpdateBinValue(balances[_to][bin], index, _amounts[0], Operations.Add);\r\n\r\n      // Number of transfer to execute\r\n      uint256 nTransfer = _ids.length;\r\n\r\n      // Last bin updated\r\n      uint256 lastBin = bin;\r\n\r\n      for (uint256 i = 1; i < nTransfer; i++) {\r\n        (bin, index) = getIDBinIndex(_ids[i]);\r\n\r\n        // If new bin\r\n        if (bin != lastBin) {\r\n          // Update storage balance of previous bin\r\n          balances[_to][lastBin] = balTo;\r\n          balTo = balances[_to][bin];\r\n\r\n          // Bin will be the most recent bin\r\n          lastBin = bin;\r\n        }\r\n\r\n        // Update memory balance\r\n        balTo = _viewUpdateBinValue(balTo, index, _amounts[i], Operations.Add);\r\n      }\r\n\r\n      // Update storage of the last bin visited\r\n      balances[_to][bin] = balTo;\r\n    }\r\n\r\n    // //Emit event\r\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\r\n  }\r\n\r\n\r\n  /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Burn _amount of tokens of a given token id\r\n   * @param _from    The address to burn tokens from\r\n   * @param _id      Token id to burn\r\n   * @param _amount  The amount to be burned\r\n   */\r\n  function _burn(address _from, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    // Substract _amount\r\n    _updateIDBalance(_from, _id, _amount, Operations.Sub);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n   * @dev This batchBurn method does not implement the most efficient way of updating\r\n   *      balances to reduce the potential bug surface as this function is expected to\r\n   *      be less common than transfers. EIP-2200 makes this method significantly\r\n   *      more efficient already for packed balances.\r\n   * @param _from     The address to burn tokens from\r\n   * @param _ids      Array of token ids to burn\r\n   * @param _amounts  Array of the amount to be burned\r\n   */\r\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    // Number of burning to execute\r\n    uint256 nBurn = _ids.length;\r\n    require(nBurn == _amounts.length, \"ERC1155MintBurnPackedBalance#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Executing all burning\r\n    for (uint256 i = 0; i < nBurn; i++) {\r\n      // Update storage balance\r\n      _updateIDBalance(_from,   _ids[i], _amounts[i], Operations.Sub); // Add amount to recipient\r\n    }\r\n\r\n    // Emit batch burn event\r\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n  }\r\n}\r\n\r\n// File: contracts/ResistanceClub.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ResistanceClub is ERC1155MintBurnPackedBalance, Ownable, IERC1155Metadata  {\r\n    uint256 public constant RED = 0;\r\n    uint256 public constant BEIGE = 1;\r\n\r\n    mapping (uint => string) private _metadata;\r\n    string private _contractMetadataURI;\r\n\r\n    uint96 royaltyFeesInBips;\r\n    address royaltyAddress;\r\n\r\n\r\n    function setMetadata(uint _tokenId, string calldata newMetadata) public onlyOwner {\r\n        _metadata[_tokenId] = newMetadata;\r\n    }\r\n\r\n    function setContractMetadataURI(string memory contractMetadataURI) public onlyOwner {\r\n        _contractMetadataURI = contractMetadataURI;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractMetadataURI;\r\n    }\r\n    \r\n    function uri (uint _tokenId) override public view returns (string memory) {\r\n        return _metadata[_tokenId];\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"Resistance Club\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"RESISTANCE\";\r\n    }\r\n\r\n    function setRoyaltyInfo(address _receiver, uint96 _royaltyFeesInBips) public onlyOwner {\r\n        royaltyAddress = _receiver;\r\n        royaltyFeesInBips = _royaltyFeesInBips;\r\n    }\r\n\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n        external\r\n        view\r\n        virtual\r\n        returns (address, uint256)\r\n    {\r\n        return (royaltyAddress, calculateRoyalty(_salePrice));\r\n    }\r\n\r\n    function calculateRoyalty(uint256 _salePrice) view public returns (uint256) {\r\n        return (_salePrice / 10000) * royaltyFeesInBips;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool){\r\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n\r\n\r\n    constructor() ERC1155MintBurnPackedBalance() {\r\n        _mint(address(0x2DADCD5248FB059a47192b8b182c8811E0ECDc9e), RED, 50, \"\");\r\n        _mint(address(0x2DADCD5248FB059a47192b8b182c8811E0ECDc9e), BEIGE, 100, \"\");\r\n\r\n        _metadata[0] = \"ipfs://QmQXaU23fXTbM3BCkj4811pyAgcZAf8ukT14wskJYkPr2r\";\r\n        _metadata[1] = \"ipfs://QmehLQ8vmizor9uEXE2HDwh3rCBfJ8BPTmUECg81udon8n\";\r\n        _contractMetadataURI = \"ipfs://QmVa6y1jqCAbXH9HG6GjHATnjch5Cqmj799SM34yfZbsZy\";\r\n\r\n        royaltyFeesInBips = 1000;\r\n        royaltyAddress = 0x2DADCD5248FB059a47192b8b182c8811E0ECDc9e;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BEIGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"calculateRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIDBinIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_binValues\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getValueInBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractMetadataURI\",\"type\":\"string\"}],\"name\":\"setContractMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ResistanceClub", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0fb733503f7d9c44f254b45e6f4a519a9496b110ada0c417512038c0dd20da1f"}]}