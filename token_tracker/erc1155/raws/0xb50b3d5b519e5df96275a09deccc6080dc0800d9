{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n\r\nerror CallerNotOwner();\r\nerror NewOwnerAddressZero();\r\n\r\nabstract contract ERC1155SingleTokenPausable {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 amount);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private _balanceOf;\r\n    mapping(address => mapping(address => bool)) private _isApprovedForAll;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    address public owner;\r\n    bool public isPaused;\r\n\r\n    constructor (string memory _name, string memory _symbol){\r\n        name = _name;\r\n        symbol = _symbol;\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function uri(uint256 id) public view virtual returns (string memory);\r\n\r\n    function balanceOf(address _address, uint256 id) public view returns (uint256) {\r\n        return _balanceOf[_address][id];\r\n    }\r\n    \r\n    function isApprovedForAll(address _owner, address operator) public view returns (bool) {\r\n        return  _isApprovedForAll[_owner][operator];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        _isApprovedForAll[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 id, uint256 amount) public {\r\n        require(!isPaused, \"RocketPass is currently locked.\");\r\n        require(msg.sender == from || _isApprovedForAll[from][msg.sender], \"Lacks Permissions\");\r\n\r\n        _balanceOf[from][id] -= amount;\r\n        _balanceOf[to][id] += amount;\r\n\r\n        emit TransferSingle(msg.sender, from, to, 1, amount);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) public {\r\n        transferFrom(from, to, id, amount);\r\n        require(to.code.length == 0 ? to != address(0)\r\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\r\n                    ERC1155TokenReceiver.onERC1155Received.selector,\r\n            \"Unsafe Destination\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        _balanceOf[to][1] += amount;\r\n        emit TransferSingle(msg.sender, address(0), to, 1, amount);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 amount, bytes memory data) internal {\r\n        _mint(to, amount);\r\n        require(to.code.length == 0 ? to != address(0)\r\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), 1, amount, data) ==\r\n                    ERC1155TokenReceiver.onERC1155Received.selector,\r\n            \"Unsafe Destination\"\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 ||\r\n            interfaceId == 0xd9b67a26 ||\r\n            interfaceId == 0x0e89341c;\r\n    }\r\n\r\n    function flipPauseState() external onlyOwner {\r\n        if (isPaused){\r\n            delete isPaused; \r\n        } else {\r\n            isPaused = true;\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner == address(0)) revert NewOwnerAddressZero();\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (owner != msg.sender) revert CallerNotOwner();\r\n        _;\r\n    }\r\n\r\n}\r\n\r\nabstract contract ERC1155TokenReceiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external virtual returns (bytes4) {\r\n        return ERC1155TokenReceiver.onERC1155Received.selector;\r\n    }\r\n\r\n}\r\n\r\ninterface IOGMiner {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface IHASH{\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function burnHash(uint256 _amount) external;\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract RocketPass is ERC1155SingleTokenPausable {\r\n\r\n    uint256 public constant hashPrice = 600 ether;\r\n    uint256 public constant ethOGPrice = .05 ether;\r\n    uint256 public constant ethRLPrice = .069 ether;\r\n\r\n    uint256 public stateHashMint;\r\n    uint256 public stateEthMint;\r\n\r\n    bytes32 public RLMerkleRoot;\r\n    string public passURI = \"ipfs://QmbtHrneD8JnBtS5YFPfjaiXKexhs3DkYzP3SKg9ypqpVY\";\r\n    bool public permanentlyClosedMint;\r\n\r\n    IOGMiner public og;\r\n    IHASH public hashpower;\r\n\r\n    mapping(address => uint256) public OGMints;\r\n    mapping(address => uint256) public RLMints;\r\n\r\n    constructor(address _hContract, address _ogContract) ERC1155SingleTokenPausable(\"BMC Rocket Pass\", \"RKTPASS\"){\r\n        og = IOGMiner(_ogContract);\r\n        hashpower = IHASH(_hContract);\r\n        _mint(msg.sender, 100);\r\n    }\r\n\r\n    modifier onlyHuman() {\r\n        require(tx.origin == msg.sender && msg.sender.code.length == 0, \"No Contracts\");\r\n        _;\r\n    }\r\n\r\n    function mintWithHash(uint256 _amount) external onlyHuman {\r\n        require(stateHashMint > 0, \"Sale Closed\");\r\n        uint256 hashToBurn = hashPrice*_amount;\r\n        require(hashpower.balanceOf(msg.sender)>=hashToBurn, \"Not enough Hash Owned\");\r\n        require(hashpower.allowance(msg.sender, address(this)) >= hashToBurn, \"Insufficient allowed hash\");\r\n\r\n        hashpower.transferFrom(msg.sender, address(this), hashToBurn);\r\n        _mint(msg.sender, _amount);\r\n    }\r\n\r\n    function mintWithOG(uint256 _amount) external payable onlyHuman {\r\n        require(stateEthMint > 0, \"Sale Closed\");\r\n        require(og.balanceOf(msg.sender) - OGMints[msg.sender] > 0, \"No Remaining OG Mints\");\r\n        uint256 costEth = ethOGPrice * _amount;\r\n\r\n        require(msg.value >= costEth, \"Not enough Eth attached\");\r\n        unchecked { // Cannot overflow since we checked they have sufficient OG balance and ETH\r\n            OGMints[msg.sender] += _amount;\r\n        }\r\n        _mint(msg.sender, _amount);\r\n\r\n    }\r\n\r\n    function mintRL(bytes32[] calldata _proof) external payable onlyHuman {\r\n        require(stateEthMint > 0, \"Sale Closed\");\r\n        require(verifyRL(_proof, RLMerkleRoot, keccak256(abi.encodePacked(msg.sender))), \"Not on ML\");\r\n        require(RLMints[msg.sender] == 0, \"Already ML Minted\");\r\n        require(msg.value >= ethRLPrice, \"Not enough Eth attached\");\r\n\r\n        RLMints[msg.sender]++;\r\n        _mint(msg.sender, 1);\r\n    }\r\n\r\n    function setState(uint256 _category, uint256 _value) external onlyOwner {\r\n        bool adjusted;\r\n        require(!permanentlyClosedMint, \"Mint states permanently locked\");\r\n        if (_category == 0){\r\n            stateHashMint = _value;\r\n            adjusted = true;\r\n        }\r\n\r\n        if (_category == 1){\r\n            stateEthMint = _value;\r\n            adjusted = true;\r\n        }\r\n        require(adjusted, \"Incorrect parameters\");\r\n    }\r\n\r\n    function permanentlyCloseMint() external onlyOwner {\r\n        require(!permanentlyClosedMint, \"Already permanently locked\");\r\n        delete stateHashMint;\r\n        delete stateEthMint;\r\n        permanentlyClosedMint = true;\r\n    }\r\n\r\n    function BurnTheHash() external onlyOwner {\r\n        hashpower.burnHash(hashpower.balanceOf(address(this)));\r\n    }\r\n\r\n    function setURI(string calldata _newURI) external onlyOwner {\r\n        passURI = _newURI;\r\n        emit URI(_newURI, 1);\r\n    }\r\n\r\n    function setRoot(bytes32 _newROOT) external onlyOwner {\r\n        RLMerkleRoot = _newROOT;\r\n    }\r\n\r\n    function setHASHPOWER(address _address) external onlyOwner {\r\n        hashpower = IHASH(_address);\r\n    }\r\n\r\n    function setOG(address _address) external onlyOwner {\r\n        og = IOGMiner(_address);\r\n    }\r\n\r\n    function verifyHashBalance(address _address) public view returns (bool){\r\n        return (hashpower.balanceOf(_address) - hashPrice) > 0;\r\n    }\r\n\r\n    function verifyHashApproved(address _address) public view returns (bool){\r\n        return hashpower.allowance(_address, address(this)) >= hashPrice;\r\n    }\r\n    \r\n    function verifyOG(address _address) public view returns (bool){\r\n        return (og.balanceOf(_address) - OGMints[_address]) > 0;\r\n    }\r\n\r\n    function verifyRL(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        uint256 iterations = proof.length;\r\n        for (uint256 i; i < iterations; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        return computedHash == root;\r\n    }\r\n\r\n    function uri(uint256 id) public view override returns (string memory){\r\n        return passURI;\r\n    }\r\n\r\n    function withdrawFunding() external onlyOwner {\r\n        uint256 currentBalance = address(this).balance;\r\n        (bool sent, ) = address(msg.sender).call{value: currentBalance}('');\r\n        require(sent,\"Error while transferring balance\");    \r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ogContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BurnTheHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OGMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RLMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RLMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethOGPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRLPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPauseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashpower\",\"outputs\":[{\"internalType\":\"contract IHASH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintRL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintWithHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintWithOG\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"og\",\"outputs\":[{\"internalType\":\"contract IOGMiner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyCloseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyClosedMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHASHPOWER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newROOT\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateEthMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateHashMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"verifyHashApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"verifyHashBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"verifyOG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RocketPass", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007b32982a32bb71150fcaa99bfbaddd72c1775a1000000000000000000000000047bd71b482b27ebdb57af6e372cab46c7280bf44", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://edf5ca49a9dcc532119d8df01ae45931fb20cc043ac077509b14bd246f36301d"}]}