{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/whiskersItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n           \u2500\u2500        \u2502   \u2510\u2514\u2502      \u2514\u2518  \u2502  \u250c\u2510       \u2510\u2518 \u2514\u2500\u2510\u2502 \u2510\u2502 \u250c \u250c\u2510      \u2510 \u2502\u2502 \u2510\u2510             \u2555    \u2559\u2563\u256c\u256c\u256c\u256c\u256c\u256c\\n    \u2510              \u2500\u2514\u2514  \u2518 \u2518  \u2500\u2555\u2550\u251c\u252c\u2555\u250c\u2502\u250c\u2510\u2502\u2510 \u2514\u2502    \u2510 \u2500   \u2555\u2514\u2514\u252c\u250c \u2500    \u255b\u2561\u250c\u2510 \u2534\u2510  \u2502\u250c\u2502\u2514\u2502\u2510       \u2553\u2553\u2565\u2565\u2553 \u256b\u2563\u2569 \u2551\u2563\u256c\u256c\u256c\u256c\u256c\\n    \u2563\u2557\u2557\u2565\u2553            \u250c\u2514  \u2510\u2510\u2510 \u255b\u251c\u2561\u2534\u2561\u2502\u2561\u2524\u2502\u251c\u2502\u2502\u2558 \u2510\u2510\u2510 \u2502 \u2510\u2518 \u2514  \u2502\u2502  \u2555   \u2502\u2514\u2518\u2514\u2514\u2502 \u2502\u250c\u2514\u2518 \u2502 \u2510\u250c    \u250c\u2557\u2563\u2563\u2569\u256c\u256c\u256c\u2563\u2563\u2563\u256c  \u2551\u2563\u2563\u2561\u256c\u256c\u256c\\n     \u2559\u2559\u2559\u255d\u2563\u2563\u2563\u2563\u2557\u2557\u2566\u2553 \u2514 \u250c \u2500\u2502 \u250c \u2514\u2558\u2518\u251c\u2518\u2502\u2502\u255b\u2514\u2502\u2518\u2502\u2502\u2518\u2502\u2510\u2502       \u251c \u250c\u2518 \u2502\u2502\u2502\u2510\u250c\u2510\u2555 \u2510         \u2518\u2502\u2502  \u250c\u2500\u2553\u2563\u2563\u256c\u2561\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u256c\u2569\u2559\u2563\u2563\u2561\u256c\u256c\\n    \u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2559\u2559\u2559\u255d\u2563\u2563\u2563\u2563\u2557\u2557\u2565\u2565  \u2502\u2502\u250c\u2502\u2564 \u2555\u250c\u2518\u2555\u2510\u2514\u2567\u2552\u2502 \u2555\u2502 \u2518 \u2555  \u2553\u2500\u250c \u2502  \u2502\u2502\u2510     \u2555     \u255b   \u2518\u2555\u2510\u2514\u2554\u2563\u256c\u2561\u256c\u2561\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u256c\u2555\u2553\u2563\u2563\u256c\u256c\u256c\\n    \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u250c\u2553 \u2514\u2559\u2559\u2559\u2559\u255d\u2563\u2563\u2566\u255b \u251c\u2502\u2518\u2502\u2518\u2555\u2524\u255b\u2502\u253c\u2510\u2558\u2502\u2502\u251c\u2561\u2566\u2518\u2514\u2502\u2555 \u250c\u2500\u2524 \u2555\u2510 \u2514\u2510 \u2514  \u2561\u2514 \u2555\u2500\u2500     \u2565\u2557\u2563\u2563\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u256c\u256c\u2559\u2559\u2551\u2563\u2561\u256c\\n    \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2553\u2557\u2563\u2563\u255d\u2563\u2557\u2518\u2518\u250c\u2510\u2563\u2563\u2568\u2563\u2563\u2561\u2514\u2518\u2514\u2502\u2555\u2566\u2566\u2566\u2566\u2561 \u2552\u2555\u2566\u2566\u2569\u2559 \u251c\u2555   \u2514\u255b \u2514\u2555\u2502 \u2514\u2524\u2502\u255b \u2554 \u2518\u2502\u250c\u2566\u2553\u2557\u2563\u2563\u2563\u255d\u2568\u256b\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u2561\u256c\u2561\u256c\u256c\u256c\u2563\u2563\u256c\u256c\u256c   \u2563\u2563\u2561\u256c\\n    \u2502\u2502\u2502\u2502 \u2553\u2557\u2563\u2563\u255d\u2559    \u255a\u2563\u2566 \u2563\u2563   \u2559\u2563\u2557\u250c \u2524\u2560\u2561\u2559\u2559\u255b\u2514\u255a\u2569\u2561\u2561\u2561\u2555 \u2502\u2502\u2514\u2502\u2514\u2514 \u2502\u2510\u250c \u2502  \u2502\u2555\u2553\u255b\u2553\u2553\u2557\u2563\u2563\u2563\u2568\u2559   \u250c\u2563\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u2563\u256c\u256c\u256c\u2569\u2559\u2514   \u255a\u2563\u2563\u256c\\n    \u2502\u2553\u2557\u2563\u2563\u255d\u2559          \u256b\u2563\u2563      \u256b\u2563\u2566\u2553\u256a\u2502\u251c\u255b \u2553\u2502\u2566\u256c\u2561\u256c\u2502 \u2502\u255b     \u250c    \u2502\u2553\u2557\u2557\u2563\u2563\u2563\u2568\u2559       \u2552\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u255d\u2569\u2568\u2559\u2559\u2563\u2563\u2566  \u2510    \u2551\u2563\\n    \u2563\u255d\u2568          \u2500   \u2563\u2563        \u2559\u2563\u2563\u2565\u2502\u2534\u2561\u2524\u255a\u2559\u255a\u255a\u2561\u2524\u2561\u2510\u2502\u2514\u255b\u2553\u2561\u2561\u256c\u2561\u2565\u2557\u2563\u2563\u2563\u255d\u2568\u2559       \u2553\u2556\u2556 \u2555 \u2559\u2559\u2559\u2559\u2559\u2559     \u2510     \u2559\u2563\u2563\u2566 \u2555    \u2551\\n                    \u2563\u2563           \u2559\u2563\u2557\u2510\u2561\u2561\u255b\u2502\u2559\u2559\u2561\u2561\u2561\u2561\u256c\u2567\u2561\u255b\u2557\u2563\u2563\u2563\u255d\u2568\u2559         \u2553\u2563\u2563\u255d\u2569\u2563\u2563               \u2510     \u2559\u2563\u2563\u2566\\n           \u2500   \u2500 \u2500\u2552\u2563\u2563              \u256b\u2563\u2566\u2568\u2502\u2514 \u2502\u2554\u2554\u2563\u2563\u2557\u2557\u2557\u2563\u2563\u2568        \u2557\u2563\u2563\u2563\u2557\u2557\u256c\u2563 \u2524\u2502\u2551\u2563\u2566                      \u2559\u2563\u2563\u2566\\n                 \u2552\u2563\u2563                \u2559\u2563\u2563\u2565\u2557\u2563\u2563\u2563\u2563\u2568\u2559\u2559\u2559\u2559          \u255f\u256c\u2569\u2524\u2502\u2559\u2559\u2569\u2559\u2502\u255e\u2563\u2563\u256c                  \u2510\u250c     \u2559\u2563\u2563\u2566\\n                \u250c\u2563\u2563  \u2553\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2556   \u2553\u2563\u2563\u256c\u2563\u255c\u2563\u256c\u2559             \u250c\u2510\u2553\u2553\u2553\u2563\u2563\u2563\u2502\u2561\u255b\u2514\u2561\u2502\u2502\u2559\u2563\u2563\u2563\u2557                    \u2510     \u2559\u2563\u2563\\n               \u2553\u2563\u2569   \u2563\u2563\u2502\u2502\u2502\u255b\u2502\u2559\u2563\u2563\u2563\u2563\u2563\u2569 \u2559\u2563\u2563 \u256b\u2563\u2557   \u2553\u2553\u2556\u2557\u2557\u2563\u2563\u2563\u2563\u2563\u2563\u255d\u2569\u2569\u2559\u2559\u2559\u2559\u2514\u2555\u250c  \u2524\u2561\u2524\u2524\u2551\u2563\u2563\u2565    \u2518\u2518\u2502             \u2510     \u2559\\n              \u2553\u2563\u2569    \u2559\u2563\u2563\u2561\u2524\u2561\u2561\u2561\u2502\u2502\u2568\u2559\u2502\u2502\u2502\u255e\u2563\u2563\u2557\u2563\u2563\u2563\u2563\u2563\u255d\u2569\u2569\u255c\u2559\u255c\u2559\u2514\u2514\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u255b\u2518\u255b \u2555 \u255e\u2563\u2557\u255d\u255c\u2568\u2563\u2563\u256c\u2555 \u2518 \u250c\u2555  \u2502             \u250c\\n             \u2553\u2563\u255d       \u255a\u2563\u2563\u2563\u2563\u2563\u2561\u2561\u255b\u2502\u2502\u2518\u2500\u2510 \u2502\u2559\u2514 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u255b\u255b\u2518\u2514\u2561\u2514\u2514  \u2510  \u250c\u2502 \u2552\u2514\u2502\u2502\u2569\u2555   \u2502\u2568\u2563\u2563\u256c  \u2502\u256a\u256c\u2566                 \u2510\\n         \u2550  \u2554\u2563\u255d           \u2559\u256b\u2563\u2563\u255b\u2502\u2502\u2561\u2566\u2510  \u2502\u2502\u2502\u2502\u2514\u2502\u2510 \u2500\u2555\u250c\u2510\u2514  \u2502\u2561  \u2518\u2510\u2514\u2510\u2555  \u2518\u2510\u2514\u2502\u2524\u2502    \u2561\u2561\u2551\u2563\u2566 \u256c\u256c\u256c\u256c  \u2502               \u2502\\n        \u2500  \u2554\u2563\u255d            \u2554\u2563\u256c\u2502\u2561\u2561\u2563\u2563\u2557\u2561\u2561\u2566\u2557\u2524\u2502\u2502\u2555     \u2514 \u2510\u250c \u250c\u2518\u2555 \u2514\u2502\u2518\u2502\u250c \u2514\u2555\u2510\u2510\u2514 \u2524\u2555    \u255a\u2563\u2563\u2561\u255b\u2502\u2569\u256c\u2555\u2510 \u2502\\n        \u2557 \u2551\u256c\u255d             \u2514\u255d\u2563\u2563\u2563\u2569\u2502\u2518    \u2502\u2502\u2502\u2502\u2502\u2553    \u2514 \u250c\u2518\u250c  \u2514\u255b\u2518\u2518\u2555\u250c\u2555\u2555\u2514\u2502  \u2510\u2514\u2502\u2524\u2555 \u2500\u2510 \u255a\u2563\u2563\u2555  \u2502 \u255b \u2502      \u2514\u2502\\n    \u2557\u2563\u255d\u255d\u255d\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2557\u2557\u2557\u2557\u2557\u2557\u2557\u2557\u2556\u2556\u2556\u2563\u256c\u2566\u2524\u250c\u2500    \u2502\u2502\u255b\u2514\u2502     \u2502  \u2510 \u250c\u2566\u2561\u2502\u2518\u255b\u2524\u2502 \u2552\u2502 \u250c\u250c \u2558\u2502\u2524\u2555  \u250c \u255a\u2563\u2563\u2566\u2510\u250c\u250c\u250c\u2555      \u2555\u2555  \u2514\\n    \u2569                  \u2559\u2559\u2559\u2559\u2559\u2559\u255f\u2563\u256c\u2555\u2502\u2502   \u2510 \u2502\u2502\u2518\u2502\u2502      \u250c\u255b\u2502\u2502\u250c\u2502\u2502\u2502\u2502\u2555\u2514\u2502       \u2502\u2502\u2524\u2555    \u255a\u2563\u2563\u256c         \u2502  \u2553\u2510  \u2514    \u2563\\n                             \u2514\u2563\u2563\u2566\u2557\u2502\u2555  \u2510\u2500 \u2561\u2524\u2502\u2502\u2555    \u250c\u2555\u2561 \u2502\u2555\u2502\u2502\u2518\u2502\u2518\u250c\u2502  \u2514   \u2500 \u2502\u2502\u2524\u2555    \u255a\u2563\u256c\u256c\u2555         \u2560\u256c\u256c\u256c\u2566  \u2502\u250c\u2563\u2563\\n                               \u2559\u255d\u2563\u2561\u2502      \u2502\u2524\u2502\u2502\u2502      \u2502\u250c\u2524\u2502\u2555\u2555\u2555\u2561\u255b\u2500         \u2502\u2502\u2502 \u2514  \u2502\u2563\u2563\u256c\u256c     \u2518 \u250c \u2560\u256c\u256c\u256c\u256c\u2566\u2510\u2553\u2563\u2563\\n                                 \u2563\u2563\u2555\u2555     \u2514\u2502\u2555 \u2502\u2510  \u2518 \u2510\u250c\u2514\u2502 \u2514  \u2555        \u2514 \u2500 \u2502\u2502  \u2552 \u2514\u2551\u2563\u256c\u256c\u256c  \u2518  \u2502\u250c\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u2563\u255d\\n                                 \u2514\u2563\u2563\u2502\u2555     \u2514\u2502\u2555\u2502\u2502    \u2510\u2502\u2518\u2514\u2510   \u2514\u2510  \u2502  \u2500  \u250c  \u2502\u2502     \u2551\u2563\u2563\u256c\u256c\u2500  \u2510 \u256a\u256c\u256c\u256c\u256c\u256c\u256c\u2561\u2563\u2563\u2568\\n                                  \u2551\u2563\u256c\u2502\u2555     \u2514\u2502\u2502\u2502\u2502 \u2510\u2518\u2518\u2502\u250c\u2502\u2518\u2502\u2510\u250c \u2514  \u2500      \u250c\u2502\u2502\u2518    \u2502 \u2514\u2563\u2563\u2563\u2566 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\\n                              \u250c\u2553\u2557\u2563\u2563\u2563\u2563\u256c\u2561\u2555     \u2514\u2561\u2502\u2502\u2502  \u250c\u2518\u250c\u2502\u2510\u2510\u2510\u2502  \u2502     \u2555\u2561\u2502\u2502\u2502   \u2514 \u250c   \u2500\u2502\u255a\u2563\u2563\u2561\u2518\u2514\u255a\u2561\u2563\u2557\u2566\u256b\u2563\u255d\\n                          \u2553\u2557\u2563\u2563\u2563\u256c\u256c\u256c\u2569\u2568\u2563\u2563\u2563\u2561\u2566   \u2500  \u2514\u255b\u2502\u2502\u2502\u2510          \u2514\u250c\u2555\u2502\u2502\u2502\u2502\u2524\u2518 \u2500   \u250c\u2566\u2561\u2561\u2561\u2561\u2561\u2566\u2563\u2563\u256a\u2561\u2557\u256b\u2563\u2563\u255c\u2559\u255d\u2563\u2563\u2557\u2557\u2556\\n                     \u2553\u2557\u2557\u2563\u2563\u256c\u256c\u256c\u2569\u2568\u2559 \u2553\u250c\u250c\u2534\u2559\u2563\u2563\u2561\u2561\u2566  \u2514 \u2500   \u2514\u2561\u2502\u2502\u2510\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2510\u2502\u2502\u2502\u2502\u255b       \u2555\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u256c\u256c\u256c\u256c\u2563\u2563\u2559      \u2559\u2559\u255d\u2563\u2563\u2557\\n                 \u2553\u2557\u2563\u2563\u2563\u256c\u256c\u256c\u2569\u2559\u2502\u2502   \u250c\u2558\u2555\u2555\u2555  \u2559\u2563\u2563\u2566\u2561\u2550\u2510    \u250c       \u2514\u2514\u2514\u2518\u2561\u2502\u2524\u2502\u2502\u2502\u2555     \u2555\u2554\u2563\u2563\u256c\u256c\u256c\u256c\u2569 \u2559\u2559\u2514\u256b\u2563\u2569\u2514           \u255f\u2559\\n            \u2553\u2557\u2557\u2563\u2563\u256c\u256c\u256c\u2569\u2568\u2559\u2514       \u250c\u2500\u2500\u2510 \u2514\u2514   \u2563\u2563\u2502  \u2518 \u2510\u2510    \u250c        \u2561     \u2514  \u2500\u2502\u2559\u2563\u2563\u2561\u256c\u256c\u256c\u256c\u2566\u2555 \u2553\u2563\u2563\u255c\u2502       \u2559\u2561\u2561\u2561\u2561\u2561\u2561\\n        \u2553\u2557\u2563\u2563\u2563\u256c\u256c\u2569\u2568\u2559\u2518\u2502 \u2557\u2555 \u2502    \u2514 \u2502\u2500  \u2555    \u2551\u2563\u256c\u2502 \u2518 \u2510\u256b\u2561\u2561\u2561\u2557\u2566\u2566\u2510       \u2502  \u2514\u2518   \u2514 \u2554\u2557\u2563\u2563\u256c\u256c\u256c\u2561\u256c\u256c\u2561\u2557\u2563\u2563\u2559            \u2502\u2559\u2561\u2561\\n    \u2557\u2563\u2563\u2563\u256c\u256c\u256c\u2569\u2559\u2514   \u2514   \u2563\u2563          \u2510\u2514     \u255f\u2563\u256c\u2502\u2566\u2557\u2557\u2563\u256c\u2563\u2563\u2563\u2563\u2563\u2557\u2566\u2561\u2561\u2561\u2524\u2510\u250c\u2510\u255b  \u250c\u2554\u2566\u2557\u2561\u2566\u2557\u2563\u256c\u256c\u2561\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u2569                \u2561\u2561\\n    \u256c\u256c\u2569\u2568\u2559         \u2553\u2566\u2510\u2551\u2563\u2563\u2563\u2557\u2565    \u2500\u2500  \u250c\u2518    \u2563\u2563\u2563\u2563\u2563\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u2563\u2502\u2566\u2566\u2566\u2561\u2566\u2566\u2557\u2563\u2563\u2563\u2563\u2563\u256c\u256c\u256c\u256c\u2569\u2568\u2514\u2502\u2514\u2559\u2569\u2563\u2563\u2557\u2557\u2566\u2566\u2524\u2561\u2561\u2566\u2555\u250c     \u250c\u2561\u2561\u2561\\n      \u2514           \u2514\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u2563\u2563\u2563\u2566\u2565    \u250c \u2502\u2500\u2500  \u2559\u2559\u2569\u256c\u256c\u256c\u256c\u2569\u2559   \u2514\u2559\u2559\u2569\u2563\u2563\u2563\u2563\u256c\u2563\u255d\u2569\u256c\u2568\u256c\u256c\u256c\u2569\u2568\u2559    \u2510\u250c   \u255f\u2563\u2563\u2568\u2559\u255d\u2563\u2563\u2563\u2563\u2566\u2566\u2524\u2561\u2561\u2561\u2561\u2561\u2561\u2561\u2561\\n\\n\\n     ...    .     ...                     .       .x+=:.         ..                                 .x+=:.\\n  .~`\\\"888x.!**h.-``888h.     .uef^\\\"      @88>    z`    ^%  < .z@8\\\"`                                z`    ^%\\n dX   `8888   :X   48888>  :d88E         %8P        .   <k  !@88E                      .u    .        .   <k\\n'888x  8888  X88.  '8888>  `888E          .       .@8Ned8\\\"  '888E   u         .u     .d88B :@8c     .@8Ned8\\\"\\n'88888 8888X:8888:   )?\\\"\\\"`  888E .z8k   .@88u   .@^%8888\\\"    888E u@8NL    ud8888.  =\\\"8888f8888r  .@^%8888\\\"\\n `8888>8888 '88888>.88h.    888E~?888L ''888E` x88:  `)8b.   888E`\\\"88*\\\"  :888'8888.   4888>'88\\\"  x88:  `)8b.\\n   `8\\\" 888f  `8888>X88888.  888E  888E   888E  8888N=*8888   888E .dN.   d888 '88%\\\"   4888> '    8888N=*8888\\n  -~` '8%\\\"     88\\\" `88888X  888E  888E   888E   %8\\\"    R88   888E~8888   8888.+\\\"      4888>       %8\\\"    R88\\n  .H888n.      XHn.  `*88!  888E  888E   888E    @8Wou 9%    888E '888&  8888L       .d888L .+     @8Wou 9%\\n :88888888x..x88888X.  `!   888E  888E   888&  .888888P`     888E  9888. '8888c. .+  ^\\\"8888*\\\"    .888888P`\\n f  ^%888888% `*88888nx\\\"   m888N= 888>   R888\\\" `   ^\\\"F     '\\\"888*\\\" 4888\\\"  \\\"88888%       \\\"Y\\\"      `   ^\\\"F\\n      `\\\"**\\\"`    `\\\"**\\\"\\\"      `Y\\\"   888     \\\"\\\"                  \\\"\\\"    \\\"\\\"      \\\"YP'\\n                                 J88\\\"\\n                                 @%\\n                               :\\\"\\n\\n*/\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract WhiskersItems is ERC1155, Ownable, ERC1155Burnable, ReentrancyGuard {\\n  using Address for address;\\n\\n  string  public  symbol;\\n  uint256 private _currentTokenId = 1;\\n\\n  constructor(\\n    string memory _symbol\\n  )\\n    ERC1155('Whiskers: Inventory Items')\\n  {\\n    symbol = _symbol;\\n  }\\n\\n  function totalSupply()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 numTokens = _currentTokenId - 1;\\n    uint256 sum = 0;\\n    for (uint256 i = 1; i < numTokens+1; i++) {\\n      Token storage t = Tokens[i];\\n      sum += t.supply;\\n    }\\n    return sum;\\n  }\\n\\n  function withdraw()\\n    public\\n    onlyOwner\\n    nonReentrant\\n  {\\n    Address.sendValue(payable(owner()), address(this).balance);\\n  }\\n\\n  function setSymbol(\\n    string calldata _symbol\\n  )\\n    public\\n    onlyOwner\\n  {\\n    require(bytes(_symbol).length > 0, 'Symbol required');\\n    symbol = _symbol;\\n  }\\n\\n  struct Token {\\n    uint64  supply;\\n    uint64  maxSupply;\\n    uint128 priceWei;\\n    bytes32 proofRoot;\\n    bool    paused;\\n    string  uri;\\n  }\\n  mapping(uint256 => Token) public Tokens;\\n  mapping(uint256 => mapping(address => bool)) public addressMintedToken;\\n\\n  function uri(\\n    uint256 _tokenId\\n  )\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    string memory r = Tokens[_tokenId].uri;\\n    require(bytes(r).length > 0, 'Nonexistent token');\\n    return r;\\n  }\\n\\n  function setTokenURI(\\n    uint256 _tokenId,\\n    string calldata _uri\\n  )\\n    public\\n    onlyOwner\\n  {\\n    require(bytes(_uri).length > 0, 'URI required');\\n    Tokens[_tokenId].uri = _uri;\\n    emit URI(_uri, _tokenId);\\n  }\\n\\n  function setTokenMaxSupply(\\n    uint256 _tokenId,\\n    uint64 _maxSupply\\n  )\\n    public\\n    onlyOwner\\n  {\\n    require(_maxSupply > 0, 'Max supply must be more than 0');\\n    Tokens[_tokenId].maxSupply = _maxSupply;\\n  }\\n\\n  function setTokenProofRoot(\\n    uint256 _tokenId,\\n    bytes32 _root\\n  )\\n    public\\n    onlyOwner\\n  {\\n    Tokens[_tokenId].proofRoot = _root;\\n  }\\n\\n  function setTokenPriceWei(\\n    uint256 _tokenId,\\n    uint128 _priceWei\\n  )\\n    public\\n    onlyOwner\\n  {\\n    Tokens[_tokenId].priceWei = _priceWei;\\n  }\\n\\n  function pauseToken(\\n    uint256 _tokenId\\n  )\\n    public\\n    onlyOwner\\n  {\\n    Tokens[_tokenId].paused = true;\\n  }\\n\\n  function unpauseToken(\\n    uint256 _tokenId\\n  )\\n    public\\n    onlyOwner\\n  {\\n    Tokens[_tokenId].paused = false;\\n  }\\n\\n  function createToken(\\n    uint64 _maxSupply,\\n    string calldata _uri,\\n    uint128 _priceWei,\\n    bytes32 _root,\\n    bool _paused\\n  )\\n    public\\n    onlyOwner\\n    returns (uint256)\\n  {\\n    require(bytes(_uri).length > 0, 'URI required');\\n    require(_maxSupply > 0, 'Max supply must be more than 0');\\n    uint256 _tokenId = _currentTokenId;\\n    _currentTokenId++;\\n\\n    Tokens[_tokenId] = Token(0, _maxSupply, _priceWei, _root, _paused, _uri);\\n    emit URI(_uri, _tokenId);\\n    return _tokenId;\\n  }\\n\\n  modifier mintCompliance(\\n    uint256 _quantity\\n  )\\n  {\\n    require(\\n      _quantity > 0 && _quantity <= 300,\\n      \\\"Invalid mint amount\\\"\\n    );\\n    _;\\n  }\\n\\n  function airdrop(\\n    uint64 _tokenId,\\n    address[] calldata _addresses\\n  )\\n    external\\n    onlyOwner\\n    mintCompliance(_addresses.length)\\n  {\\n    Token storage t = Tokens[_tokenId];\\n    require(\\n       t.supply + _addresses.length <= t.maxSupply,\\n      \\\"Maximum supply exceeded\\\"\\n    );\\n    for (uint i = 0; i < _addresses.length; i++) {\\n        _mint(_addresses[i], _tokenId);\\n    }\\n  }\\n\\n  function mint(\\n    uint64 _tokenId,\\n    bytes32[] memory _proof\\n  )\\n    public\\n    payable\\n    nonReentrant\\n    mintCompliance(1)\\n  {\\n    Token storage t = Tokens[_tokenId];\\n    require(\\n      msg.value == t.priceWei,\\n      \\\"Incorrect payment\\\"\\n    );\\n    require(\\n       t.supply + 1 <= t.maxSupply,\\n      \\\"Maximum supply exceeded\\\"\\n    );\\n    require(\\n      !addressMintedToken[_tokenId][msg.sender],\\n      \\\"Address already minted\\\"\\n    );\\n    require(\\n      !t.paused,\\n      \\\"Pausable: paused\\\"\\n    );\\n    require(\\n      MerkleProof.verify(_proof, t.proofRoot, keccak256(abi.encodePacked(msg.sender))),\\n      \\\"Failed allowlist proof\\\"\\n    );\\n    addressMintedToken[_tokenId][msg.sender] = true;\\n    _mint(msg.sender, _tokenId);\\n  }\\n\\n  function _mint(\\n    address _address,\\n    uint64 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    Token storage t = Tokens[_tokenId];\\n    _mint(_address, _tokenId, 1, '');\\n    t.supply += 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"priceWei\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"proofRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxSupply\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_priceWei\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_maxSupply\",\"type\":\"uint64\"}],\"name\":\"setTokenMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_priceWei\",\"type\":\"uint128\"}],\"name\":\"setTokenPriceWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setTokenProofRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unpauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhiskersItems", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000019576869736b6572733a20496e76656e746f7279204974656d7300000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}