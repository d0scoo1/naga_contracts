{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n\r\n            __   ___  ___       _______   _______      __   ___       __        __     \r\n            |/\"| /  \")|\"  |     /\"     \"| /\"     \"|    |/\"| /  \")     /\"\"\\      |\" \\    \r\n            (: |/   / ||  |    (: ______)(: ______)    (: |/   /     /    \\     ||  |   \r\n            |    __/  |:  |     \\/    |   \\/    |      |    __/     /' /\\  \\    |:  |   \r\n            (// _  \\   \\  |___  // ___)_  // ___)_     (// _  \\    //  __'  \\   |.  |   \r\n            |: | \\  \\ ( \\_|:  \\(:      \"|(:      \"|    |: | \\  \\  /   /  \\\\  \\  /\\  |\\  \r\n            (__|  \\__) \\_______)\\_______) \\_______)    (__|  \\__)(___/    \\___)(__\\_|_) \r\n                                                                                    \r\n\r\n\r\n                                     .:==+++++++++++==-.                                  \r\n                                 :=++=-:.............:-=++-.                              \r\n                              .=+=::=++*=.....       .....-=*=.                           \r\n                            :++-..=#*+++**:.....        .-=-::+*:                         \r\n                          :++:...+#+*##*+**:..........:==+++#=.:=+.                       \r\n                         =*:....=#+*#*+%++#*+++++++=:+#*+**++#=..:*=                      \r\n                        =+.....:#++#+*##++++++++++=+*#++##*#+==...:++                     \r\n                       :*......=#+###*++++++++++++++++++#*+#*--. ...+=                    \r\n                       #-.....:#*+#*+++++++++++++++++++++#*#*+#-....:#:                   \r\n                      -*......-%++++++++++++++++++++++++++#%*+#=.....=*                   \r\n                      =+.....:#*++++=. :++++++++++++=++++++*++#=.....:%                   \r\n                      =+....-#*+++++=.  =+++++++++:   =+++++++%-.....:%                   \r\n                      :#...:#*++++*##*++++++++++++=--=++++++++%-.....-#                   \r\n                       #-..+#-...:=+**#+++++++++++*####*++++++*#.....*-                   \r\n                       .*..+*       -+*+=##+++*+++#*+++++++++++%:...=*                    \r\n                        =+.=#:        .  *%#**%%--++++=-:.  .:+%-..-#.                    \r\n                         -*-#*++==--====..=##+-.              =#::++                      \r\n                         -*=:  :+.      +##%#+:..-.         .-#--*-                       \r\n                        +-       *     .:%###%%*+:        .:=#+*+.                        \r\n                       +-        =:  .:-*####+..    ...:::=#%*=++:                        \r\n                       #:        *===+#%+===:::::::--==+*%*++=+==*-                       \r\n                       =+.    .::-=*###*################*:    :+ :=+=                     \r\n                        ++:.         :=+*#*+====*****+-.       #    -*-                   \r\n                         :+*=-=.  ======-:::::::..     ..      #  .::=#                   \r\n                            .+%:.*-   + +*=*+=#++:    .::+::.:+=:::-+*:                   \r\n                             #-:=#   .- --=+: #:-+    ::-##*#*++#*=-.                     \r\n                          -+==****   .--.    :#=**===+++*##-*  .#:=-                      \r\n                        -*:     .#.    .- ..:++#=:     :-#+**-:*-*.:#.                    \r\n                       .#.       .+++==+=-::-#:-%+--+++*#:   ++.-+  =*                    \r\n                       -===     .::. .:-=+++++++-   :::#-:  =#+#:   =*                    \r\n                        * .-=-:::-+*#+=:.          .::=#+++*-  -=  :*-                    \r\n                        -*    .=**.   .:-=+*=-:.    .:=#::::.  .#.-*=                     \r\n        .:--=====**==----=+=-::-**==--:.   :*=:      -+%*=-::::+*+=.                      \r\n   .-++++======+*-          .-==-::. ..:-===+%*=---===:#:.-====-:                         \r\n.+*+==+++++++++*.                            .=*:   .::#.                                 \r\n#+++++++++++++*  .       :=+++++=:             .++=-=+*#:                                 \r\n.**++++++++++#         -**++***+=+*+.            .:---:+#+==:..::::..                     \r\n  +#++++++++*-        **+**+---=**++#:               :**++===*#*++++*#*++=:               \r\n   :**++++++#        -#+**:.....:+*+*#              =#+++++++===**++#*++++#.              \r\n     -#*++++#  .     =#+*=.......-#++%             +*+++++++++++==*#*+++++##+*+::.        \r\n       :**++#.       .#*+*-.....-**+#+            +*++++++++++++++==**++++#*=*#++***+-    \r\n         :+##* .      .#*+**+++**+*#+            -*++++++**********#**#*+*#++#=::-=+**#+: \r\n            -**-.      .=##*****##+-             *++++++##++++++++*#+++*#*#*##*++++++***#=\r\n               -++-:.    .:-====-.              .#++++++%++++++++*#+++++**=+- -+**###**+=:\r\n                  :=++=:...                     -*++++++*#*++++++#++++++**=+#***+=:       \r\n                      :=++=-::...               -*+++++++*##**+++#++++++#+=#+--=++*#+:    \r\n                          :=+++=-::::....       -*+++++*****######*****##**%+---=++**#*:  \r\n                               :-++++=-:::::::::-#***************#%####--+==*##****####*  \r\n                                     :-==+++++==-#**********#####**++*#++#====-::-::.     \r\n                                              ..:::---=###**++#++++++#*=+#==++**+-        \r\n                                                        :+##**#+++**##++#+---=++**#=      \r\n                                                           .-=**####-=*#+#********###     \r\n\r\n\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}interface IUniswapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint DEADline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint DEADline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint DEADline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint DEADline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint DEADline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint DEADline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint DEADline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint DEADline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint DEADline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint DEADline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint DEADline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint DEADline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint DEADline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract protected {\r\n\r\n    mapping (address => bool) is_auth;\r\n\r\n    function authorized(address addy) public view returns(bool) {\r\n        return is_auth[addy];\r\n    }\r\n\r\n    function set_authorized(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n\r\n    modifier onlyAuth() {\r\n        require( is_auth[msg.sender] || msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    address owner;\r\n    modifier onlyowner {\r\n        require(msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    bool locked;\r\n    modifier safe() {\r\n        require(!locked, \"reentrant\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\ncontract KLEE is ERC20, protected\r\n{\r\n    mapping (address => uint256) public _balances;\r\n    mapping (address => mapping (address => uint256)) public _allowances;\r\n    mapping (address => uint256) public _sellLock;    \r\n    mapping (address => bool) public _excluded;\r\n    mapping (address => bool) public _excludedFromSellLock;\r\n    mapping (address => bool) public _blacklist;\r\n    bool isBlacklist = true;\r\n    string public constant _name = 'KleeKai';\r\n    string public constant _symbol = 'KLEE';\r\n    uint8 public constant _decimals = 9;\r\n    uint256 public constant InitialSupply= 100000000 * 10**9 * 10**_decimals;\r\n    uint256 swapLimit = 500000 * 10**9 * 10**_decimals; // 0.5%\r\n    bool isSwapPegged = true;\r\n    uint16 public  BuyLimitDivider=50; // 2%\r\n    uint8 public   BalanceLimitDivider=25; // 4%\r\n    uint16 public  SellLimitDivider=125; // 0.75%\r\n    uint16 public  MaxSellLockTime= 10 seconds;\r\n    address public constant router_address=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public _circulatingSupply =InitialSupply;\r\n    uint256 public  balanceLimit = _circulatingSupply;\r\n    uint256 public  sellLimit = _circulatingSupply;\r\n    uint256 public  buyLimit = _circulatingSupply;\r\n    uint8 public _buyTax;\r\n    uint8 public _sellTax;\r\n    uint8 public _transferTax;\r\n    uint8 public _liquidityTax;\r\n    uint8 public _marketingTax;\r\n    uint8 public _DevelopmentTax;\r\n    uint8 public _RewardTax;\r\n    uint8 public _KaibaTax;\r\n    bool isTokenSwapManual = false;\r\n    bool public bot_killer = true;\r\n    address public pair_address;\r\n    address public deployer = 0xB19Ea1d1B9eDE773E4B86b1e913236e0dAEAF808;\r\n    address public marketing = 0x6FEe72Ad3A9210299190ed0dBFC4D377971DBE19;\r\n    address public development = 0xA29eA5118fEe344449A1DADaB49419c51B388a43;\r\n    address public rewards = 0x356bE05bd1F2FCFfA6C6fb7128BF54DBE0dF38e0;\r\n    address public kaiba = 0xCbeb3C6aEC7040e4949F22234573bd06B31DE83b;\r\n    IUniswapRouter02 public  router;\r\n    constructor () {\r\n\r\n        uint256 deployerBalance=_circulatingSupply*9/10;\r\n        _balances[msg.sender] = deployerBalance;\r\n        emit Transfer(address(0), msg.sender, deployerBalance);\r\n        uint256 injectBalance=_circulatingSupply-deployerBalance;\r\n        _balances[address(this)]=injectBalance;\r\n        emit Transfer(address(0), address(this),injectBalance);\r\n        router = IUniswapRouter02(router_address);\r\n        pair_address = IUniswapFactory(router.factory()).createPair(address(this), router.WETH());\r\n        balanceLimit=InitialSupply/BalanceLimitDivider;\r\n        sellLimit=InitialSupply/SellLimitDivider;\r\n        buyLimit=InitialSupply/BuyLimitDivider;\r\n            sellLockTime=2 seconds;\r\n        _buyTax=9;\r\n        _sellTax=9;\r\n        _transferTax=9;\r\n        _liquidityTax=30;\r\n        _marketingTax=30;\r\n        _DevelopmentTax=17;\r\n        _RewardTax=16;\r\n        _KaibaTax = 7;\r\n\r\n        // Exclusions\r\n        owner = msg.sender;\r\n        is_auth[msg.sender] = true;\r\n        _excluded[msg.sender] = true;\r\n        _excluded[deployer] = true;\r\n        _excluded[marketing] = true;\r\n        _excluded[development] = true;\r\n        _excluded[rewards] = true;\r\n        _excluded[kaiba] = true;\r\n        _excludedFromSellLock[router_address] = true;\r\n        _excludedFromSellLock[pair_address] = true;\r\n        _excludedFromSellLock[address(this)] = true;\r\n        _excludedFromSellLock[deployer] = true;\r\n        _excludedFromSellLock[marketing] = true;\r\n        _excludedFromSellLock[development] = true;\r\n        _excludedFromSellLock[rewards] = true;\r\n        _excludedFromSellLock[kaiba] = true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n        if(isBlacklist) {\r\n            require(!_blacklist[sender] && !_blacklist[recipient], \"Blacklisted!\");\r\n        }\r\n        bool isExcluded = (_excluded[sender] || _excluded[recipient] || is_auth[sender] || is_auth[recipient]);\r\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\r\n        bool isLiquidityTransfer = ((sender == pair_address && recipient == router_address)\r\n        || (recipient == pair_address && sender == router_address));\r\n        \r\n        if(isContractTransfer || isLiquidityTransfer || isExcluded ){\r\n            _feelessTransfer(sender, recipient, amount);\r\n        }\r\n        else{\r\n            if (!tradingEnabled) {\r\n                if (sender != owner && recipient != owner) {\r\n                    if (bot_killer) {\r\n                        emit Transfer(sender,recipient,0);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        require(tradingEnabled,\"trading not yet enabled\");\r\n                    }\r\n                }\r\n            }\r\n            bool isBuy=sender==pair_address|| sender == router_address;\r\n            bool isSell=recipient==pair_address|| recipient == router_address;\r\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell);\r\n        }\r\n    }\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////// Mint & Burn ///////////////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function MB_mint_contract(uint amount) public onlyAuth {\r\n        address receiver = address(this);       \r\n        _circulatingSupply += amount;\r\n        _balances[receiver] += amount;\r\n        emit Transfer(DEAD, receiver, amount);\r\n    }\r\n\r\n\r\n    function MB_mint_liquidity(uint amount) public onlyAuth {\r\n        address receiver = pair_address;\r\n        _circulatingSupply += amount;\r\n        _balances[receiver] += amount;\r\n        emit Transfer(DEAD, receiver, amount);\r\n    }\r\n\r\n    function MB_burn_contract(uint amount) public onlyAuth {\r\n        _circulatingSupply -= amount;\r\n        _balances[address(this)] -= amount;\r\n        emit Transfer(address(this), DEAD, amount);\r\n    }\r\n    function MB_burn_liquidity(uint amount) public onlyAuth {\r\n        _circulatingSupply -= amount;\r\n        _balances[pair_address] -= amount;\r\n        emit Transfer(pair_address, DEAD, amount);\r\n    }\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////// CONTROL PANEL /////////////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function CTRL_set_development(address addy) public onlyAuth {\r\n        development = addy;\r\n    }\r\n\r\n    function CTRL_set_marketing(address addy) public onlyAuth {\r\n        marketing = addy;\r\n    }\r\n    \r\n    function CTRL_set_rewards(address addy) public onlyAuth {\r\n        rewards = addy;\r\n    }\r\n    \r\n    function CTRL_set_deployer(address addy) public onlyAuth {\r\n        deployer = addy;\r\n    }\r\n    \r\n    function CTRL_set_kaiba(address addy) public onlyAuth {\r\n        kaiba = addy;\r\n    }\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////// CLAIM /////////////////////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    bool public claim_enable;\r\n    mapping(address => bool) public claimed;\r\n    address[] public claimed_list;\r\n\r\n    function MIGRATION_control_claim(bool booly) public onlyAuth {\r\n        claim_enable = booly;\r\n    }\r\n\r\n    function MIGRATION_approve_v1() public safe {\r\n        ERC20 klee_v1 = ERC20(0x382f0160c24f5c515A19f155BAc14d479433A407);\r\n        uint to_give = klee_v1.balanceOf(msg.sender);\r\n        require(to_give > 0, \"No tokens to transfer\");\r\n        require(klee_v1.allowance(msg.sender, address(this)) <= to_give, \"Already enough allowance\");\r\n        klee_v1.approve(address(this), to_give*10);\r\n    }\r\n\r\n    function MIGRATION_claim_from_v1() public safe {\r\n        require(claim_enable, \"Claim is ended\");\r\n        require(!claimed[msg.sender]);\r\n        ERC20 klee_v1 = ERC20(0x382f0160c24f5c515A19f155BAc14d479433A407);\r\n        uint to_give = klee_v1.balanceOf(msg.sender);\r\n        require(klee_v1.allowance(msg.sender, address(this)) > to_give, \"Not enough allowance\");\r\n        require(_balances[address(this)] >= to_give, \"Not enough tokens!\");\r\n        klee_v1.transferFrom(msg.sender, address(this), to_give);\r\n        _balances[address(this)] -= to_give;\r\n        _balances[msg.sender] += to_give;\r\n        emit Transfer(address(this), msg.sender, to_give);\r\n        claimed[msg.sender] = true;\r\n        claimed_list.push(msg.sender);\r\n    }\r\n\r\n    function MIGRATION_allowance_on_v1(address addy) public view onlyAuth returns (uint allowed, uint balance) {\r\n        ERC20 klee_v1 = ERC20(0x382f0160c24f5c515A19f155BAc14d479433A407);\r\n        return (klee_v1.allowance(addy, address(this)), klee_v1.balanceOf(addy));\r\n    }\r\n\r\n    function MIGRATION_has_claimed(address addy) public view returns(bool has_it) {\r\n        return(claimed[addy]);\r\n    }\r\n\r\n\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////// Airdrops //////////////////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function AIRDROP_multiple(uint amount, address[] calldata addresses) public onlyAuth {\r\n        uint256 multiplier = addresses.length;\r\n        require(_balances[address(this)] >= (amount*multiplier), \"Not enough funds\");\r\n        _balances[address(this)] -= (amount*multiplier);\r\n        for (uint i = 0; i < multiplier; i++) {\r\n            _balances[addresses[i]] += amount;\r\n            emit Transfer(address(this), addresses[i], amount);\r\n        }\r\n    }\r\n\r\n    \r\n    function AIRDROP_multiple_different(uint[] calldata amount, address[] calldata addresses) public onlyAuth {\r\n        uint256 multiplier = addresses.length;\r\n         for (uint i = 0; i < multiplier; i++) {\r\n             require(_balances[address(this)] >= amount[i], \"Not enough funds\");\r\n            _balances[address(this)] -= amount[i];\r\n            _balances[addresses[i]] += amount[i];\r\n            emit Transfer(address(this), addresses[i], amount[i]);\r\n        }\r\n    }\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////// Transfers Inner ///////////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n        uint256 recipientBalance = _balances[recipient];\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");        swapLimit = sellLimit/2;\r\n        uint8 tax;\r\n        if(isSell){\r\n            if(!_excludedFromSellLock[sender]){\r\n                           require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Seller in sellLock\");\r\n                           _sellLock[sender]=block.timestamp+sellLockTime;\r\n            }\r\n                    require(amount<=sellLimit,\"Dump protection\");\r\n            tax=_sellTax;\r\n        } else if(isBuy){\r\n                   require(recipientBalance+amount<=balanceLimit,\"whale protection\");\r\n            require(amount<=buyLimit, \"whale protection\");\r\n            tax=_buyTax;\r\n        } else {\r\n                   require(recipientBalance+amount<=balanceLimit,\"whale protection\");\r\n                          if(!_excludedFromSellLock[sender])\r\n                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Sender in Lock\");\r\n            tax=_transferTax;\r\n        }\r\n                 if((sender!=pair_address)&&(!manualConversion)&&(!_isSwappingContractModifier))\r\n            _swapContractToken(amount);\r\n           uint256 contractToken=_calculateFee(amount, tax, _marketingTax+_liquidityTax+_DevelopmentTax+_RewardTax+_KaibaTax);\r\n           uint256 taxedAmount=amount-(contractToken);\r\n           _removeToken(sender,amount);\r\n           _balances[address(this)] += contractToken;\r\n           _addToken(recipient, taxedAmount);\r\n        emit Transfer(sender, address(this), contractToken);\r\n        emit Transfer(sender,recipient,taxedAmount);\r\n    }\r\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n           _removeToken(sender,amount);\r\n           _addToken(recipient, amount);\r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n     ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////// Fees and modifications //////////////////////////\r\n   ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\r\n        return (amount*tax*taxPercent) / 10000;\r\n    }\r\n    function _addToken(address addr, uint256 amount) private {\r\n           uint256 newAmount=_balances[addr]+amount;\r\n        _balances[addr]=newAmount;\r\n    }    function _removeToken(address addr, uint256 amount) private {\r\n           uint256 newAmount=_balances[addr]-amount;\r\n        _balances[addr]=newAmount;\r\n    }\r\n    bool private _isTokenSwapping;\r\n    uint256 public totalTokenSwapGenerated;\r\n    uint256 public totalPayouts;\r\n    uint8 public marketingShare=50;\r\n    uint8 public DevelopmentShare=40;\r\n    uint8 public KaibaShare = 10;\r\n    uint256 public marketingBalance;\r\n    uint256 public DevelopmentBalance;\r\n    uint256 public RewardBalance;\r\n    uint256 public kaiBalance;\r\n    function _distributeFeesETH(uint256 ETHamount) private {\r\n        uint256 marketingSplit = (ETHamount * marketingShare)/100;\r\n        uint256 DevelopmentSplit = (ETHamount * DevelopmentShare)/100;\r\n        uint256 KaibaSplit = (ETHamount * KaibaShare)/100;\r\n        marketingBalance+=marketingSplit;\r\n        DevelopmentBalance+=DevelopmentSplit;\r\n        kaiBalance += KaibaSplit;\r\n    }\r\n    uint256 public totalLPETH;\r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n    function _swapContractToken(uint256 totalMax) private lockTheSwap{\r\n        uint256 contractBalance=_balances[address(this)] - kaiBalance;\r\n        uint16 totalTax=_liquidityTax+_marketingTax+_DevelopmentTax+_KaibaTax;\r\n        uint256 tokenToSwap=swapLimit;\r\n        if(tokenToSwap > totalMax) {\r\n            if(isSwapPegged) {\r\n                tokenToSwap = totalMax;\r\n            }\r\n        }\r\n           if(contractBalance<tokenToSwap||totalTax==0){\r\n            return;\r\n        }\r\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\r\n        uint256 tokenForMarketing= (tokenToSwap*_marketingTax)/totalTax;\r\n        uint256 tokenForReward= (tokenToSwap*_RewardTax)/totalTax;\r\n        uint256 tokenForDevelopment= (tokenToSwap*_DevelopmentTax)/totalTax;\r\n        uint256 tokenForKaiba = (tokenToSwap*_KaibaTax)/totalTax;\r\n        uint256 liqToken=tokenForLiquidity/2;\r\n        uint256 liqETHToken=tokenForLiquidity-liqToken;\r\n        uint256 swapToken=liqETHToken+tokenForMarketing+tokenForDevelopment+tokenForKaiba;\r\n        uint256 initialETHBalance = address(this).balance;\r\n        _swapTokenForETH(swapToken);\r\n        uint256 newETH=(address(this).balance - initialETHBalance);\r\n        uint256 liqETH = (newETH*liqETHToken)/swapToken;\r\n        _addLiquidity(liqToken, liqETH);\r\n        uint256 generatedETH=(address(this).balance - initialETHBalance);\r\n        _distributeFeesETH(generatedETH);\r\n        _balances[rewards] += tokenForReward;\r\n        emit Transfer(address(this), rewards, tokenForReward);\r\n    }\r\n    function _swapTokenForETH(uint256 amount) private {\r\n        _approve(address(this), address(router), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _addLiquidity(uint256 tokenamount, uint256 ETHamount) private {\r\n        totalLPETH+=ETHamount;\r\n        _approve(address(this), address(router), tokenamount);\r\n        router.addLiquidityETH{value: ETHamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    /// @notice Utilities\r\n\r\n    function UTILS_getLimits() public view returns(uint256 balance, uint256 sell){\r\n        return(balanceLimit/10**_decimals, sellLimit/10**_decimals);\r\n    }\r\n    function UTILS_getTaxes() public view returns(uint256 RewardTax, uint256 DevelopmentTax,uint256 liquidityTax,uint256 marketingTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\r\n        return (_RewardTax, _DevelopmentTax,_liquidityTax,_marketingTax,_buyTax,_sellTax,_transferTax);\r\n    }\r\n    function UTILS_getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\r\n        uint256 lockTime=_sellLock[AddressToCheck];\r\n        if(lockTime<=block.timestamp)\r\n        {\r\n            return 0;\r\n        }\r\n        return lockTime-block.timestamp;\r\n    }\r\n    function UTILS_getSellLockTimeInSeconds() public view returns(uint256){\r\n        return sellLockTime;\r\n    }\r\n    bool public sellLockDisabled;\r\n    uint256 public sellLockTime;\r\n    bool public manualConversion;    function UTILS_SetPeggedSwap(bool isPegged) public onlyAuth {\r\n        isSwapPegged = isPegged;\r\n    }\r\n    function UTILS_SetMaxSwap(uint256 max) public onlyAuth {\r\n        require(max >= (_circulatingSupply/500), \"Too low\"); /// Avoid honeypots\r\n        swapLimit = max;\r\n    }\r\n    function UTILS_SetMaxLockTime(uint16 max) public onlyAuth {\r\n     require(max <= 20 seconds, \"Too high\"); /// Avoid locking\r\n     MaxSellLockTime = max;\r\n    }\r\n\r\n    /// @notice ACL Functions\r\n    function ACL_BlackListAddress(address addy, bool booly) public onlyAuth {\r\n        _blacklist[addy] = booly;\r\n    }\r\n    function ACL_SetAuth(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n    function ACL_ExcludeAccountFromFees(address account, bool booly) public onlyAuth {\r\n        _excluded[account] = booly;\r\n    }\r\n\r\n    function ACL_ExcludeAccountFromSellLock(address account, bool booly) public onlyAuth {\r\n        _excludedFromSellLock[account] = booly;\r\n    }\r\n\r\n    function AUTH_WithdrawMarketingETH() public onlyAuth{\r\n        uint256 amount=marketingBalance;\r\n        marketingBalance=0;\r\n        address sender = marketing;\r\n        (bool sent,) =sender.call{value: (amount)}(\"\");\r\n        require(sent,\"withdraw failed\");\r\n    }\r\n    function AUTH_WithdrawDevelopmentETH() public onlyAuth{\r\n        uint256 amount=DevelopmentBalance;\r\n        DevelopmentBalance=0;\r\n        address sender = development;\r\n        (bool sent,) =sender.call{value: (amount)}(\"\");\r\n        require(sent,\"withdraw failed\");\r\n    }\r\n    function AUTH_WithdrawRewardTokens() public onlyAuth{\r\n        uint256 amount=RewardBalance;\r\n        RewardBalance=0;\r\n        address sender = msg.sender;\r\n        bool sent = ERC20(address(this)).transfer(sender, amount);\r\n        require(sent,\"withdraw failed\");\r\n    }\r\n\r\n    function AUTH_WithdrawKaibaTokens() public onlyAuth{\r\n        uint256 amount=kaiBalance;\r\n        kaiBalance=0;\r\n        address sender = msg.sender;\r\n        bool sent = ERC20(address(this)).transfer(sender, amount);\r\n        require(sent,\"withdraw failed\");\r\n    }\r\n\r\n    function UTILS_SwitchManualETHConversion(bool manual) public onlyAuth{\r\n        manualConversion=manual;\r\n    }\r\n    function UTILS_DisableSellLock(bool disabled) public onlyAuth{\r\n        sellLockDisabled=disabled;\r\n    }\r\n    function UTILS_SetSellLockTime(uint256 sellLockSeconds)public onlyAuth{\r\n        sellLockTime=sellLockSeconds;\r\n    }\r\n    function UTILS_SetTaxes(uint8 RewardTaxes, uint8 DevelopmentTaxes, uint8 liquidityTaxes, uint8 marketingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax) public onlyAuth{\r\n        uint8 totalTax=RewardTaxes + DevelopmentTaxes +liquidityTaxes+marketingTaxes;\r\n        require(totalTax==100, \"burn+liq+marketing needs to equal 100%\");\r\n        _RewardTax = RewardTaxes;\r\n        _DevelopmentTax = DevelopmentTaxes;\r\n        _liquidityTax=liquidityTaxes;\r\n        _marketingTax=marketingTaxes;\r\n        _buyTax=buyTax;\r\n        _sellTax=sellTax;\r\n        _transferTax=transferTax;\r\n        require(_buyTax < 48 && _sellTax < 48 && _transferTax < 48, \"No honey pls!\");\r\n    }\r\n    function UTILS_ChangeMarketingShare(uint8 newShare) public onlyAuth{\r\n        marketingShare=newShare;\r\n    }\r\n    function UTILS_ChangeDevelopmentShare(uint8 newShare) public onlyAuth{\r\n        DevelopmentShare=newShare;\r\n    }\r\n    function UTILS_ChangeKaibaShare(uint8 newShare) public onlyAuth{\r\n        KaibaShare=newShare;\r\n    }\r\n    function UTILS_ManualGenerateTokenSwapBalance(uint256 _qty) public onlyAuth{\r\n        _swapContractToken(_qty * 10**9);\r\n    }\r\n    function UTILS_UpdateLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyAuth{\r\n        newBalanceLimit=newBalanceLimit*10**_decimals;\r\n        newSellLimit=newSellLimit*10**_decimals;\r\n        balanceLimit = newBalanceLimit;\r\n        sellLimit = newSellLimit;\r\n    }\r\n    bool public tradingEnabled;\r\n    address private _liquidityTokenAddress;\r\n    function SETTINGS_EnableTrading() public onlyAuth{\r\n        tradingEnabled = true;\r\n    }\r\n    function SETTINGS_LiquidityTokenAddress(address liquidityTokenAddress) public onlyAuth{\r\n        _liquidityTokenAddress=liquidityTokenAddress;\r\n    }\r\n    function UTILS_RescueTokens(address tknAddress) public onlyAuth {\r\n        require(tknAddress != pair_address, \"Hey! No!\"); /// Avoid liquidity pulls\r\n        ERC20 token = ERC20(tknAddress);\r\n        uint256 ourBalance = token.balanceOf(address(this));\r\n        require(ourBalance>0, \"No tokens in our balance\");\r\n        token.transfer(msg.sender, ourBalance);\r\n    }\r\n    function UTILS_setBlacklistEnabled(bool isBlacklistEnabled) public onlyAuth {\r\n        isBlacklist = isBlacklistEnabled;\r\n    }\r\n    function UTILS_setContractTokenSwapManual(bool manual) public onlyAuth {\r\n        isTokenSwapManual = manual;\r\n    }\r\n    function UTILS_setBlacklistedAddress(address toBlacklist) public onlyAuth {\r\n        _blacklist[toBlacklist] = true;\r\n    }\r\n    function UTILS_removeBlacklistedAddress(address toRemove) public onlyAuth {\r\n        _blacklist[toRemove] = false;\r\n    }    function UTILS_AvoidLocks() public onlyAuth{\r\n        (bool sent,) =msg.sender.call{value: (address(this).balance)}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    function UTILS_setMarketingWallet(address wallet) public onlyAuth {\r\n        marketing = wallet;\r\n    }\r\n    function UTILS_setDevelopergWallet(address wallet) public onlyAuth {\r\n        development = wallet;\r\n    }\r\n    function UTILS_setRewardsWallet(address wallet) public onlyAuth {\r\n        rewards = wallet;\r\n    }\r\n    function UTILS_setKaibaWallet(address wallet) public onlyAuth {\r\n        kaiba = wallet;\r\n    }\r\n    function getowner() public view returns (address) {\r\n        return owner;\r\n    }\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _circulatingSupply;\r\n    }\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) external view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_BlackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_ExcludeAccountFromSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_SetAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AIRDROP_multiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AIRDROP_multiple_different\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTH_WithdrawDevelopmentETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTH_WithdrawKaibaTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTH_WithdrawMarketingETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTH_WithdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"CTRL_set_deployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"CTRL_set_development\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"CTRL_set_kaiba\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"CTRL_set_marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"CTRL_set_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevelopmentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevelopmentShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KaibaShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MB_burn_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MB_burn_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MB_mint_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MB_mint_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"MIGRATION_allowance_on_v1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_approve_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_claim_from_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"MIGRATION_control_claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"MIGRATION_has_claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"has_it\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS_EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SETTINGS_LiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILS_AvoidLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"UTILS_ChangeDevelopmentShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"UTILS_ChangeKaibaShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"UTILS_ChangeMarketingShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"UTILS_DisableSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"UTILS_ManualGenerateTokenSwapBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"}],\"name\":\"UTILS_RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"name\":\"UTILS_SetMaxLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"UTILS_SetMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"}],\"name\":\"UTILS_SetPeggedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLockSeconds\",\"type\":\"uint256\"}],\"name\":\"UTILS_SetSellLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"RewardTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"DevelopmentTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"UTILS_SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"UTILS_SwitchManualETHConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"UTILS_UpdateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"UTILS_getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILS_getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILS_getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILS_getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"RewardTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"UTILS_removeBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBlacklistEnabled\",\"type\":\"bool\"}],\"name\":\"UTILS_setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBlacklist\",\"type\":\"address\"}],\"name\":\"UTILS_setBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"UTILS_setContractTokenSwapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UTILS_setDevelopergWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UTILS_setKaibaWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UTILS_setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UTILS_setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DevelopmentTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_KaibaTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RewardTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromSellLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_sellLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bot_killer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"development\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kaiba\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_authorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSwapGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KLEE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5b5802ff27592dd0da6942a9cb442743dd5592352d0dc272b620ed209c1052f"}]}